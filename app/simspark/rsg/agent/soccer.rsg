; -*- mode: lisp; -*-

(RubySceneGraph 0 1)
(
;
; define constants, copy values from the ScriptServer Soccer namespace
;

 (define $FieldLength (eval Soccer.FieldLength))
 (define $FieldWidth  (eval Soccer.FieldWidth))
 (define $BorderExt   (eval Soccer.BorderSize))

; height of the field ground plane
 (define $FieldBaseHeight 4) 

; with of the side boundary
 (define $SideExt 2) 

; height of the side boundary
 (define $SideHeight 1) 

; height of a field line
 (define $LineHeight 0.2)

 (define $FieldMaterial matGreen)
 (define $BorderMaterial matYellow)
 (define $SideMaterial matGrey)
 (define $LineMaterial matWhite)

; calc some helper vars
 (define $FieldBase (eval -1 * $FieldBaseHeight / 2.0))
 (define $LineBase 0)
 (define $FieldHalfLength (eval $FieldLength / 2.0))
 (define $FieldHalfWidth  (eval $FieldWidth / 2.0))

 (define $HalfBorderExt   (eval $BorderExt / 2.0))
 (define $BorderLength    (eval $FieldHalfLength + $HalfBorderExt))
 (define $BorderWidth     (eval $FieldHalfWidth + $HalfBorderExt))

 (define $SideLength      (eval $FieldHalfLength + $BorderExt))
 (define $SideWidth       (eval $FieldHalfWidth  + $BorderExt))

 (define $LineWidth       (eval $FieldWidth - $LineHeight))

;
; construct playing field
;

; add lights
 (node Transform
       (setLocalPos -10 10 10)
       (node Light
	     (setDiffuse 1.0 1.0 1.0 1.0)
	     (setSpecular 0.1 0.1 0.1 1.0)
	     (setAmbient 0.8 0.8 0.8 1.0)
	     )

       )

; add lights
 (node Transform
       (setLocalPos 10 -10 10)
       (node Light
	     (setDiffuse 1.0 1.0 1.0 1.0)
	     (setSpecular 0.1 0.1 0.1 1.0)
	     (setAmbient 0.0 0.0 0.0 1.0)
	     )
       )

; create the base plane
 (node Transform
       (setLocalPos 0 0 $FieldBase)
       (node Box
	     (setMaterial $FieldMaterial)
	     (setExtents $FieldLength $FieldWidth $FieldBaseHeight)
	     )
       (node PlaneCollider
	     (setParams 0 0 1.0 0)
	     (node ContactJointHandler
		   (setContactBounceMode false)
		   )
	     )
       )


; create left side
 (node Transform
       (setLocalPos (eval -1 * $SideLength) 0 0)
       (node Box
	     (setMaterial $SideMaterial)
	     (setExtents $SideHeight (eval $FieldWidth + 2 * $BorderExt) $SideExt)
	     ) 
       (node PlaneCollider
	     (setParams 1.0 0 0 (eval -1 * $SideLength))
	     )
       )


; create right side
 (node Transform
       (setLocalPos $SideLength 0 0)
       (node Box
	     (setMaterial $SideMaterial)
	     (setExtents $SideHeight (eval $FieldWidth + 2 * $BorderExt) $SideExt)
	     ) 
       (node PlaneCollider
	     (setParams -1.0 0 0 (eval -1 * $SideLength))
	     )
       )


; create back side
 (node Transform
       (setLocalPos 0 $SideWidth 0)
       (node Box
	     (setMaterial $SideMaterial)
	     (setExtents (eval $FieldLength + 2 * $BorderExt) $SideHeight $SideExt)
	     ) 
       (node PlaneCollider
	     (setParams 0 -1.0 0 (eval -1 * $SideWidth))
	     )
       )

; create front side
 (node Transform
       (setLocalPos 0 (eval -1 * $SideWidth) 0)
       (node Box
	     (setMaterial $SideMaterial)
	     (setExtents (eval $FieldLength + 2 * $BorderExt) $SideHeight $SideExt)
	     ) 
       (node PlaneCollider
	     (setParams 0 1.0 0 (eval -1 * $SideWidth))
	     )
       )

; create middle line
 (node Transform
       (setLocalPos 0 0 $LineBase)
       (node Box
	     (setExtents $LineHeight $LineWidth $LineHeight)
	     (setMaterial $LineMaterial)
	     )
       )

; create front line
 (node Transform
       (setLocalPos 0 (eval -1 * $FieldHalfWidth) $LineBase)
       (node Box
	     (setExtents $FieldLength $LineHeight $LineHeight)
	     (setMaterial $LineMaterial)
	     )
       )

; create back line
 (node Transform
       (setLocalPos 0 $FieldHalfWidth $LineBase)
       (node Box
	     (setExtents $FieldLength $LineHeight $LineHeight)
	     (setMaterial $LineMaterial)
	     )
       )

; create left line
 (node Transform
       (setLocalPos (eval -1 * $FieldHalfLength) 0 -1)
       (node Box
	     (setExtents $LineHeight $LineWidth $LineHeight)
	     (setMaterial $LineMaterial)
	     )
       )

; create right line
 (node Transform
       (setLocalPos $FieldHalfLength 0 $LineBase)
       (node Box
	     (setExtents $LineHeight $LineWidth $LineHeight)
	     (setMaterial $LineMaterial)
	     )
       )

; create left outer field
 (node Transform
       (setLocalPos (eval -1 * $BorderLength) 0 $FieldBase)
       (node Box
	     (setMaterial $BorderMaterial)
	     (setExtents $BorderExt $FieldWidth $FieldBaseHeight)
	     )
       )

; create right outer field
 (node Transform
       (setLocalPos $BorderLength 0 $FieldBase)
       (node Box
	     (setMaterial $BorderMaterial)
	     (setExtents $BorderExt $FieldWidth $FieldBaseHeight)
	     )
       )

; create front outer field
 (node Transform
       (setLocalPos 0 (eval -1 * $BorderWidth) $FieldBase)
       (node Box
	     (setMaterial $BorderMaterial)
	     (setExtents (eval $FieldLength + 2 * $BorderExt) $BorderExt $FieldBaseHeight)
	     )
       )

; create back outer field
 (node Transform
       (setLocalPos 0 $BorderWidth $FieldBase)
       (node Box
	     (setMaterial $BorderMaterial)
	     (setExtents (eval $FieldLength + 2 * $BorderExt) $BorderExt $FieldBaseHeight)
	     )
       )

;;
;; add flags
;;

; mark the soccer field with 4 field flags
 (importScene rsg/agent/flag.rsg 
	      (eval -1 * $FieldHalfLength)  
	      $FieldHalfWidth
	      0 
	      Flag_1_l matRed
	      )

 (importScene rsg/agent/flag.rsg 
	      (eval -1 * $FieldHalfLength) 
	      (eval -1 * $FieldHalfWidth)
	      0
	      Flag_2_l matRed
	      )

 (importScene rsg/agent/flag.rsg 
	      $FieldHalfLength 
	      $FieldHalfWidth 
	      0 
	      Flag_1_r matBlue
	      )

 (importScene rsg/agent/flag.rsg 
	      $FieldHalfLength 
	      (eval -1 * $FieldHalfWidth) 
	      0 
	      Flag_2_r 
	      matBlue
	      )

;;
;; add the ball
;;
 (importScene rsg/agent/ball.rsg)

 )