/* -*- mode: c++; c-basic-offset: 4; indent-tabs-mode: nil -*-

   this file is part of rcssserver3D
   Fri May 9 2003
   Copyright (C) 2002,2003 Koblenz University
   Copyright (C) 2003 RoboCup Soccer Server 3D Maintenance Group
   $Id: transform.h,v 1.3 2003/11/14 14:05:52 fruit Exp $

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#ifndef KEROSIN_TRANSFORM_H
#define KEROSIN_TRANSFORM_H

#include <oxygen/sceneserver/basenode.h>

/*      \class Transform
        $Id: transform.h,v 1.3 2003/11/14 14:05:52 fruit Exp $

        Transform

        This class is used to do local transforms relative to a parent node.

        NOTE:

        HISTORY:
                05.11.02 - MK
                        - Initial version

        TODO:

        TOFIX:
*/

namespace kerosin
{

class Transform : public oxygen::BaseNode
{
    //
    // Functions
    //
public:
    Transform();
    ~Transform();

    // transformation related

    //! return the local transform of this node
    virtual const salt::Matrix&     GetLocalTransform()     const;
    //! return the world transform of this node
    virtual const salt::Matrix&     GetWorldTransform()     const;
    //! set the local transform of this node
    virtual void SetLocalTransform(const salt::Matrix &transform);
    //! set the world transform of this node
    virtual void SetWorldTransform(const salt::Matrix &transform);
    //! set the local position of this node
    void SetLocalPos(float x, float y, float z);
    //! set the local position of this node
    void SetLocalPos(const salt::Vector3f &pos);

protected:
    //! upon linkage, we have to update our world transform
    virtual void OnLink();

private:
    //! update hierarchical date (position, bounding volumes, etc..)
    virtual void UpdateHierarchyInternal();

private:
    //! local transformation relative to parent
    salt::Matrix    mLocalTransform;
    //! world transform generated by multiplying the parent's world transform with the local transform
    salt::Matrix    mWorldTransform;
};

DECLARE_CLASS(Transform);

} //namespace kerosin
#endif //KEROSIN_TRANSFORM_H
