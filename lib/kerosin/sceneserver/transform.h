#ifndef TRANSFORM_H__
#define TRANSFORM_H__

/*	\class Transform
	$Id: transform.h,v 1.1 2003/04/30 14:21:42 fruit Exp $

	Transform

	This class is used to do local transforms relative to a parent node.

	NOTE:

	HISTORY:
		05.11.02 - MK
			- Initial version

	TODO:

	TOFIX:
*/
#include "basenode.h"

namespace kerosin
{

class Transform : public BaseNode
{
	//
	// Functions
	//
public:
	Transform();
	~Transform();

	// transformation related

	//! return the local transform of this node 
	virtual const salt::Matrix&	GetLocalTransform()	const;
	//! return the world transform of this node 
	virtual const salt::Matrix&	GetWorldTransform()	const;
	//! set the local transform of this node 
	virtual void SetLocalTransform(const salt::Matrix &transform);
	//! set the world transform of this node
	virtual void SetWorldTransform(const salt::Matrix &transform);
	//! set the local position of this node
	void SetLocalPos(float x, float y, float z);
	//! set the local position of this node
	void SetLocalPos(const salt::Vector3f &pos);

protected:
	//! upon linkage, we have to update our world transform
	virtual void OnLink();

private:
	//! update hierarchical date (position, bounding volumes, etc..)
	virtual void UpdateHierarchyInternal();

private:
	//! local transformation relative to parent
	salt::Matrix	mLocalTransform;
	//! world transform generated by multiplying the parent's world transform with the local transform
	salt::Matrix	mWorldTransform;
};

DECLARE_CLASS(Transform);

} //namespace kerosin
#endif //TRANSFORM_H__
