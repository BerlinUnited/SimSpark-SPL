#include "glextensionreg.h"
#include <string.h>

#define GET_PROC_ADDRESS(ptr, function) function = (ptr)GetProcedure( #function ); if (function == NULL) return false;

void* GetProcedure(const char *name)
{
#if defined(_WIN32)
    void *t = wglGetProcAddress(name);
#else
    void *t = glXGetProcAddressARB((unsigned char*)name);
#endif //_WIN32
    return t;
}

static bool TestExtensionString(const char *name, const char *extensions)
{
    /*
    	It takes a bit of care to be fool-proof about parsing the
    	OpenGL extensions string. Don't be fooled by sub-strings,
		etc.
	*/
    const char *start = extensions;
    char *where, *terminator;
    
    where = strchr(name, ' ');
    if (where || *name == '\0')
        return false;
        
    for (;;)
    {
        where = strstr((const char *) start, name);
        if (!where)
            break;
        terminator = where + strlen(name);
        if (where == start || *(where - 1) == ' ')
            if (*terminator == ' ' || *terminator == '\0')
                return true;
        start = terminator;
    }
    return false;
}

// returns true if the extension is available
bool GLExtensionReg::QueryGLExtension(const char *name)
{
    const char *extensions = NULL;
	/*	extension names should not have spaces.	*/
    extensions = (const char*)glGetString(GL_EXTENSIONS);

	return TestExtensionString(name, extensions);
}

#if defined(_WIN32)
// returns true if the extension is available
bool GLExtensionReg::QueryWGLExtension(const char *name)
{
    const char *extensions = NULL;

    if ((wglGetExtensionsStringARB == NULL) || (mHDC == 0))
        if (wglGetExtensionsStringEXT == NULL)
            return false;
        else
            extensions = (const char*) wglGetExtensionsStringEXT();
    else
        extensions = (const char*) wglGetExtensionsStringARB(mHDC);
        
 	return TestExtensionString(name, extensions);
}
#endif //_WIN32

#ifdef GL_3DFX_tbuffer
PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX = NULL;
#endif //GL_3DFX_tbuffer

#ifdef GL_ARB_imaging
PFNGLBLENDCOLORPROC glBlendColor = NULL;
PFNGLBLENDEQUATIONPROC glBlendEquation = NULL;
PFNGLCOLORTABLEPROC glColorTable = NULL;
PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv = NULL;
PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv = NULL;
PFNGLCOPYCOLORTABLEPROC glCopyColorTable = NULL;
PFNGLGETCOLORTABLEPROC glGetColorTable = NULL;
PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv = NULL;
PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv = NULL;
PFNGLCOLORSUBTABLEPROC glColorSubTable = NULL;
PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable = NULL;
PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D = NULL;
PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D = NULL;
PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf = NULL;
PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv = NULL;
PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri = NULL;
PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D = NULL;
PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv = NULL;
PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter = NULL;
PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D = NULL;
PFNGLGETHISTOGRAMPROC glGetHistogram = NULL;
PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv = NULL;
PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv = NULL;
PFNGLGETMINMAXPROC glGetMinmax = NULL;
PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv = NULL;
PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv = NULL;
PFNGLHISTOGRAMPROC glHistogram = NULL;
PFNGLMINMAXPROC glMinmax = NULL;
PFNGLRESETHISTOGRAMPROC glResetHistogram = NULL;
PFNGLRESETMINMAXPROC glResetMinmax = NULL;
#endif //GL_ARB_imaging

#ifdef GL_ARB_matrix_palette
PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB = NULL;
PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB = NULL;
PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB = NULL;
PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB = NULL;
PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB = NULL;
#endif //GL_ARB_matrix_palette

#ifdef GL_ARB_multisample
PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB = NULL;
#endif //GL_ARB_multisample

#ifdef GL_ARB_multitexture
PFNGLACTIVETEXTUREARBPROC glActiveTextureARB = NULL;
PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB = NULL;
PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB = NULL;
PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB = NULL;
PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB = NULL;
PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB = NULL;
PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB = NULL;
PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB = NULL;
PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB = NULL;
PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB = NULL;
PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB = NULL;
PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB = NULL;
PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB = NULL;
PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB = NULL;
PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB = NULL;
PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB = NULL;
PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB = NULL;
PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB = NULL;
PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB = NULL;
PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB = NULL;
PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB = NULL;
PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB = NULL;
PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB = NULL;
PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB = NULL;
PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB = NULL;
PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB = NULL;
PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB = NULL;
PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB = NULL;
PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB = NULL;
PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB = NULL;
PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB = NULL;
PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB = NULL;
PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB = NULL;
PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB = NULL;
#endif //GL_ARB_multitexture

#ifdef GL_ARB_point_parameters
PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB = NULL;
PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB = NULL;
#endif //GL_ARB_point_parameters

#ifdef GL_ARB_texture_compression
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB = NULL;
#endif //GL_ARB_texture_compression

#ifdef GL_ARB_transpose_matrix
PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB = NULL;
PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB = NULL;
PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB = NULL;
PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB = NULL;
#endif //GL_ARB_transpose_matrix

#ifdef GL_ARB_vertex_blend
PFNGLWEIGHTBVARBPROC glWeightbvARB = NULL;
PFNGLWEIGHTSVARBPROC glWeightsvARB = NULL;
PFNGLWEIGHTIVARBPROC glWeightivARB = NULL;
PFNGLWEIGHTFVARBPROC glWeightfvARB = NULL;
PFNGLWEIGHTDVARBPROC glWeightdvARB = NULL;
PFNGLWEIGHTUBVARBPROC glWeightubvARB = NULL;
PFNGLWEIGHTUSVARBPROC glWeightusvARB = NULL;
PFNGLWEIGHTUIVARBPROC glWeightuivARB = NULL;
PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB = NULL;
PFNGLVERTEXBLENDARBPROC glVertexBlendARB = NULL;
#endif //GL_ARB_vertex_blend

#ifdef GL_ARB_vertex_program
PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB = NULL;
PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB = NULL;
PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB = NULL;
PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB = NULL;
PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB = NULL;
PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB = NULL;
PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB = NULL;
PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB = NULL;
PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB = NULL;
PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB = NULL;
PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB = NULL;
PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB = NULL;
PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB = NULL;
PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB = NULL;
PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB = NULL;
PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB = NULL;
PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB = NULL;
PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB = NULL;
PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB = NULL;
PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB = NULL;
PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB = NULL;
PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB = NULL;
PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB = NULL;
PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB = NULL;
PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB = NULL;
PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB = NULL;
PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB = NULL;
PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB = NULL;
PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB = NULL;
PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB = NULL;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB = NULL;
PFNGLPROGRAMSTRINGARBPROC glProgramStringARB = NULL;
PFNGLBINDPROGRAMARBPROC glBindProgramARB = NULL;
PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB = NULL;
PFNGLGENPROGRAMSARBPROC glGenProgramsARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB = NULL;
PFNGLGETPROGRAMIVARBPROC glGetProgramivARB = NULL;
PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB = NULL;
PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB = NULL;
PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB = NULL;
PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB = NULL;
PFNGLISPROGRAMARBPROC glIsProgramARB = NULL;
#endif //GL_ARB_vertex_program

#ifdef GL_ARB_window_pos
PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB = NULL;
PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB = NULL;
PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB = NULL;
PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB = NULL;
PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB = NULL;
PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB = NULL;
PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB = NULL;
PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB = NULL;
PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB = NULL;
PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB = NULL;
PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB = NULL;
PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB = NULL;
PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB = NULL;
PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB = NULL;
PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB = NULL;
PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB = NULL;
#endif //GL_ARB_window_pos

#ifdef GL_ATI_element_array
PFNGLELEMENTPOINTERATIPROC glElementPointerATI = NULL;
PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI = NULL;
PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI = NULL;
#endif //GL_ATI_element_array

#ifdef GL_ATI_envmap_bumpmap
PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI = NULL;
PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI = NULL;
PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI = NULL;
PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI = NULL;
#endif //GL_ATI_envmap_bumpmap

#ifdef GL_ATI_fragment_shader
PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI = NULL;
PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI = NULL;
PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI = NULL;
PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI = NULL;
PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI = NULL;
PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI = NULL;
PFNGLSAMPLEMAPATIPROC glSampleMapATI = NULL;
PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI = NULL;
PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI = NULL;
PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI = NULL;
PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI = NULL;
PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI = NULL;
PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI = NULL;
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI = NULL;
#endif //GL_ATI_fragment_shader

#ifdef GL_ATI_pn_triangles
PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI = NULL;
PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI = NULL;
#endif //GL_ATI_pn_triangles

#ifdef GL_ATI_vertex_array_object
PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI = NULL;
PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI = NULL;
PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI = NULL;
PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI = NULL;
PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI = NULL;
PFNGLDELETEOBJECTBUFFERATIPROC glDeleteObjectBufferATI = NULL;
PFNGLARRAYOBJECTATIPROC glArrayObjectATI = NULL;
PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI = NULL;
PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI = NULL;
PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI = NULL;
PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI = NULL;
PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI = NULL;
#endif //GL_ATI_vertex_array_object

#ifdef GL_ATI_vertex_streams
PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI = NULL;
PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI = NULL;
PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI = NULL;
PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI = NULL;
PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI = NULL;
PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI = NULL;
PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI = NULL;
PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI = NULL;
PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI = NULL;
PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI = NULL;
PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI = NULL;
PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI = NULL;
PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI = NULL;
PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI = NULL;
PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI = NULL;
PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI = NULL;
PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI = NULL;
PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI = NULL;
PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI = NULL;
PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI = NULL;
PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI = NULL;
PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI = NULL;
PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI = NULL;
PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI = NULL;
PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI = NULL;
PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI = NULL;
PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI = NULL;
PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI = NULL;
PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI = NULL;
PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI = NULL;
PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI = NULL;
PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI = NULL;
PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI = NULL;
PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI = NULL;
PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI = NULL;
PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI = NULL;
PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI = NULL;
PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI = NULL;
PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI = NULL;
PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI = NULL;
PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI = NULL;
PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI = NULL;
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI = NULL;
PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI = NULL;
PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI = NULL;
#endif //GL_ATI_vertex_streams

#ifdef GL_EXT_blend_color
PFNGLBLENDCOLOREXTPROC glBlendColorEXT = NULL;
#endif //GL_EXT_blend_color

#ifdef GL_EXT_blend_func_separate
PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT = NULL;
PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR = NULL;
#endif //GL_EXT_blend_func_separate

#ifdef GL_EXT_blend_minmax
PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT = NULL;
#endif //GL_EXT_blend_minmax

#ifdef GL_EXT_color_subtable
PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT = NULL;
PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT = NULL;
#endif //GL_EXT_color_subtable

#ifdef GL_EXT_compiled_vertex_array
PFNGLLOCKARRAYSEXTPROC glLockArraysEXT = NULL;
PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT = NULL;
#endif //GL_EXT_compiled_vertex_array

#ifdef GL_EXT_convolution
PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT = NULL;
PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT = NULL;
PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT = NULL;
PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT = NULL;
PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT = NULL;
PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT = NULL;
PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT = NULL;
PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT = NULL;
PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT = NULL;
#endif //GL_EXT_convolution

#ifdef GL_EXT_coordinate_frame
PFNGLTANGENT3BEXTPROC glTangent3bEXT = NULL;
PFNGLTANGENT3BVEXTPROC glTangent3bvEXT = NULL;
PFNGLTANGENT3DEXTPROC glTangent3dEXT = NULL;
PFNGLTANGENT3DVEXTPROC glTangent3dvEXT = NULL;
PFNGLTANGENT3FEXTPROC glTangent3fEXT = NULL;
PFNGLTANGENT3FVEXTPROC glTangent3fvEXT = NULL;
PFNGLTANGENT3IEXTPROC glTangent3iEXT = NULL;
PFNGLTANGENT3IVEXTPROC glTangent3ivEXT = NULL;
PFNGLTANGENT3SEXTPROC glTangent3sEXT = NULL;
PFNGLTANGENT3SVEXTPROC glTangent3svEXT = NULL;
PFNGLBINORMAL3BEXTPROC glBinormal3bEXT = NULL;
PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT = NULL;
PFNGLBINORMAL3DEXTPROC glBinormal3dEXT = NULL;
PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT = NULL;
PFNGLBINORMAL3FEXTPROC glBinormal3fEXT = NULL;
PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT = NULL;
PFNGLBINORMAL3IEXTPROC glBinormal3iEXT = NULL;
PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT = NULL;
PFNGLBINORMAL3SEXTPROC glBinormal3sEXT = NULL;
PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT = NULL;
PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT = NULL;
PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT = NULL;
#endif //GL_EXT_coordinate_frame

#ifdef GL_EXT_copy_texture
PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT = NULL;
PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT = NULL;
#endif //GL_EXT_copy_texture

#ifdef GL_EXT_cull_vertex
PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT = NULL;
PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT = NULL;
#endif //GL_EXT_cull_vertex

#ifdef GL_EXT_draw_range_elements
PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT = NULL;
#endif //GL_EXT_draw_range_elements

#ifdef GL_EXT_fog_coord
PFNGLFOGCOORDFEXTPROC glFogCoordfEXT = NULL;
PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT = NULL;
PFNGLFOGCOORDDEXTPROC glFogCoorddEXT = NULL;
PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT = NULL;
PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT = NULL;
#endif //GL_EXT_fog_coord

#ifdef GL_EXT_histogram
PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT = NULL;
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT = NULL;
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT = NULL;
PFNGLGETMINMAXEXTPROC glGetMinmaxEXT = NULL;
PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT = NULL;
PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT = NULL;
PFNGLHISTOGRAMEXTPROC glHistogramEXT = NULL;
PFNGLMINMAXEXTPROC glMinmaxEXT = NULL;
PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT = NULL;
PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT = NULL;
#endif //GL_EXT_histogram

#ifdef GL_EXT_index_func
PFNGLINDEXFUNCEXTPROC glIndexFuncEXT = NULL;
#endif //GL_EXT_index_func

#ifdef GL_EXT_index_material
PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT = NULL;
#endif //GL_EXT_index_material

#ifdef GL_EXT_light_texture
PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT = NULL;
PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT = NULL;
PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT = NULL;
#endif //GL_EXT_light_texture

#ifdef GL_EXT_multi_draw_arrays
PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT = NULL;
PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT = NULL;
#endif //GL_EXT_multi_draw_arrays

#ifdef GL_EXT_multisample
PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT = NULL;
PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT = NULL;
#endif //GL_EXT_multisample

#ifdef GL_EXT_paletted_texture
PFNGLCOLORTABLEEXTPROC glColorTableEXT = NULL;
PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT = NULL;
#endif //GL_EXT_paletted_texture

#ifdef GL_EXT_pixel_transform
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT = NULL;
#endif //GL_EXT_pixel_transform

#ifdef GL_EXT_point_parameters
PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT = NULL;
PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT = NULL;
#endif //GL_EXT_point_parameters

#ifdef GL_EXT_polygon_offset
PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT = NULL;
#endif //GL_EXT_polygon_offset

#ifdef GL_EXT_secondary_color
PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT = NULL;
PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT = NULL;
PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT = NULL;
PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT = NULL;
PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT = NULL;
PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT = NULL;
PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT = NULL;
PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT = NULL;
PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT = NULL;
PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT = NULL;
PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT = NULL;
PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT = NULL;
PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT = NULL;
PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT = NULL;
PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT = NULL;
PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT = NULL;
PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT = NULL;
#endif //GL_EXT_secondary_color

#ifdef GL_EXT_stencil_two_side
PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT = NULL;
#endif //GL_EXT_stencil_two_side

#ifdef GL_EXT_subtexture
PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT = NULL;
PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT = NULL;
#endif //GL_EXT_subtexture

#ifdef GL_EXT_texture3D
PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT = NULL;
PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT = NULL;
#endif //GL_EXT_texture3D

#ifdef GL_EXT_texture_object
PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT = NULL;
PFNGLBINDTEXTUREEXTPROC glBindTextureEXT = NULL;
PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT = NULL;
PFNGLGENTEXTURESEXTPROC glGenTexturesEXT = NULL;
PFNGLISTEXTUREEXTPROC glIsTextureEXT = NULL;
PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT = NULL;
#endif //GL_EXT_texture_object

#ifdef GL_EXT_texture_perturb_normal
PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT = NULL;
#endif //GL_EXT_texture_perturb_normal

#ifdef GL_EXT_vertex_array
PFNGLARRAYELEMENTEXTPROC glArrayElementEXT = NULL;
PFNGLCOLORPOINTEREXTPROC glColorPointerEXT = NULL;
PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT = NULL;
PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT = NULL;
PFNGLGETPOINTERVEXTPROC glGetPointervEXT = NULL;
PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT = NULL;
PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT = NULL;
PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT = NULL;
PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT = NULL;
#endif //GL_EXT_vertex_array

#ifdef GL_EXT_vertex_shader
PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT = NULL;
PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT = NULL;
PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT = NULL;
PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT = NULL;
PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT = NULL;
PFNGLSHADEROP1EXTPROC glShaderOp1EXT = NULL;
PFNGLSHADEROP2EXTPROC glShaderOp2EXT = NULL;
PFNGLSHADEROP3EXTPROC glShaderOp3EXT = NULL;
PFNGLSWIZZLEEXTPROC glSwizzleEXT = NULL;
PFNGLWRITEMASKEXTPROC glWriteMaskEXT = NULL;
PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT = NULL;
PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT = NULL;
PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT = NULL;
PFNGLSETINVARIANTEXTPROC glSetInvariantEXT = NULL;
PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT = NULL;
PFNGLVARIANTBVEXTPROC glVariantbvEXT = NULL;
PFNGLVARIANTSVEXTPROC glVariantsvEXT = NULL;
PFNGLVARIANTIVEXTPROC glVariantivEXT = NULL;
PFNGLVARIANTFVEXTPROC glVariantfvEXT = NULL;
PFNGLVARIANTDVEXTPROC glVariantdvEXT = NULL;
PFNGLVARIANTUBVEXTPROC glVariantubvEXT = NULL;
PFNGLVARIANTUSVEXTPROC glVariantusvEXT = NULL;
PFNGLVARIANTUIVEXTPROC glVariantuivEXT = NULL;
PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT = NULL;
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT = NULL;
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT = NULL;
PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT = NULL;
PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT = NULL;
PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT = NULL;
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT = NULL;
PFNGLBINDPARAMETEREXTPROC glBindParameterEXT = NULL;
PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT = NULL;
PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT = NULL;
PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT = NULL;
PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT = NULL;
PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT = NULL;
PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT = NULL;
PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT = NULL;
PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT = NULL;
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT = NULL;
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT = NULL;
PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT = NULL;
#endif //GL_EXT_vertex_shader

#ifdef GL_EXT_vertex_weighting
PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT = NULL;
PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT = NULL;
PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT = NULL;
#endif //GL_EXT_vertex_weighting

#ifdef GL_HP_image_transform
PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP = NULL;
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP = NULL;
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP = NULL;
#endif //GL_HP_image_transform

#ifdef GL_IBM_multimode_draw_arrays
PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM = NULL;
PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM = NULL;
#endif //GL_IBM_multimode_draw_arrays

#ifdef GL_IBM_vertex_array_lists
PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM = NULL;
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM = NULL;
PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM = NULL;
PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM = NULL;
PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM = NULL;
PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM = NULL;
PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM = NULL;
PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM = NULL;
#endif //GL_IBM_vertex_array_lists

#ifdef GL_INTEL_parallel_arrays
PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL = NULL;
PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL = NULL;
PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL = NULL;
PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL = NULL;
#endif //GL_INTEL_parallel_arrays

#ifdef GL_MESA_resize_buffers
PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA = NULL;
#endif //GL_MESA_resize_buffers

#ifdef GL_MESA_window_pos
PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA = NULL;
PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA = NULL;
PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA = NULL;
PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA = NULL;
PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA = NULL;
PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA = NULL;
PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA = NULL;
PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA = NULL;
PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA = NULL;
PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA = NULL;
PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA = NULL;
PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA = NULL;
PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA = NULL;
PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA = NULL;
PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA = NULL;
PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA = NULL;
PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA = NULL;
PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA = NULL;
PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA = NULL;
PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA = NULL;
PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA = NULL;
PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA = NULL;
PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA = NULL;
PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA = NULL;
#endif //GL_MESA_window_pos

#ifdef GL_NV_evaluators
PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV = NULL;
PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV = NULL;
PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV = NULL;
PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV = NULL;
PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV = NULL;
PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV = NULL;
PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV = NULL;
PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV = NULL;
PFNGLEVALMAPSNVPROC glEvalMapsNV = NULL;
#endif //GL_NV_evaluators

#ifdef GL_NV_fence
PFNGLDELETEFENCESNVPROC glDeleteFencesNV = NULL;
PFNGLGENFENCESNVPROC glGenFencesNV = NULL;
PFNGLISFENCENVPROC glIsFenceNV = NULL;
PFNGLTESTFENCENVPROC glTestFenceNV = NULL;
PFNGLGETFENCEIVNVPROC glGetFenceivNV = NULL;
PFNGLFINISHFENCENVPROC glFinishFenceNV = NULL;
PFNGLSETFENCENVPROC glSetFenceNV = NULL;
#endif //GL_NV_fence

#ifdef GL_NV_occlusion_query
PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV = NULL;
PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV = NULL;
PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV = NULL;
PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV = NULL;
PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV = NULL;
PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV = NULL;
PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV = NULL;
#endif //GL_NV_occlusion_query

#ifdef GL_NV_point_sprite
PFNGLPOINTPARAMETERINVPROC glPointParameteriNV = NULL;
PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV = NULL;
#endif //GL_NV_point_sprite

#ifdef GL_NV_register_combiners
PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV = NULL;
PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV = NULL;
PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV = NULL;
PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV = NULL;
PFNGLCOMBINERINPUTNVPROC glCombinerInputNV = NULL;
PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV = NULL;
PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV = NULL;
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV = NULL;
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV = NULL;
#endif //GL_NV_register_combiners

#ifdef GL_NV_register_combiners2
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV = NULL;
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV = NULL;
#endif //GL_NV_register_combiners2

#ifdef GL_NV_vertex_array_range
PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV = NULL;
PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV = NULL;
#endif //GL_NV_vertex_array_range

#ifdef GL_NV_vertex_program
PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV = NULL;
PFNGLBINDPROGRAMNVPROC glBindProgramNV = NULL;
PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV = NULL;
PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV = NULL;
PFNGLGENPROGRAMSNVPROC glGenProgramsNV = NULL;
PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV = NULL;
PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV = NULL;
PFNGLGETPROGRAMIVNVPROC glGetProgramivNV = NULL;
PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV = NULL;
PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV = NULL;
PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV = NULL;
PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV = NULL;
PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV = NULL;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV = NULL;
PFNGLISPROGRAMNVPROC glIsProgramNV = NULL;
PFNGLLOADPROGRAMNVPROC glLoadProgramNV = NULL;
PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV = NULL;
PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV = NULL;
PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV = NULL;
PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV = NULL;
PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV = NULL;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV = NULL;
PFNGLTRACKMATRIXNVPROC glTrackMatrixNV = NULL;
PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV = NULL;
PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV = NULL;
PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV = NULL;
PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV = NULL;
PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV = NULL;
PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV = NULL;
PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV = NULL;
PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV = NULL;
PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV = NULL;
PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV = NULL;
PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV = NULL;
PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV = NULL;
PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV = NULL;
PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV = NULL;
PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV = NULL;
PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV = NULL;
PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV = NULL;
PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV = NULL;
PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV = NULL;
PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV = NULL;
PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV = NULL;
PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV = NULL;
PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV = NULL;
PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV = NULL;
PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV = NULL;
PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV = NULL;
PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV = NULL;
PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV = NULL;
PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV = NULL;
PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV = NULL;
PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV = NULL;
PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV = NULL;
PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV = NULL;
PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV = NULL;
PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV = NULL;
PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV = NULL;
PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV = NULL;
PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV = NULL;
PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV = NULL;
PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV = NULL;
#endif //GL_NV_vertex_program

#ifdef GL_PGI_misc_hints
PFNGLHINTPGIPROC glHintPGI = NULL;
#endif //GL_PGI_misc_hints

#ifdef GL_SGIS_detail_texture
PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS = NULL;
PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS = NULL;
#endif //GL_SGIS_detail_texture

#ifdef GL_SGIS_fog_function
PFNGLFOGFUNCSGISPROC glFogFuncSGIS = NULL;
PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS = NULL;
#endif //GL_SGIS_fog_function

#ifdef GL_SGIS_multisample
PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS = NULL;
PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS = NULL;
#endif //GL_SGIS_multisample

#ifdef GL_SGIS_pixel_texture
PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS = NULL;
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS = NULL;
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS = NULL;
#endif //GL_SGIS_pixel_texture

#ifdef GL_SGIS_point_parameters
PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS = NULL;
PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS = NULL;
#endif //GL_SGIS_point_parameters

#ifdef GL_SGIS_sharpen_texture
PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS = NULL;
PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS = NULL;
#endif //GL_SGIS_sharpen_texture

#ifdef GL_SGIS_texture4D
PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS = NULL;
PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS = NULL;
#endif //GL_SGIS_texture4D

#ifdef GL_SGIS_texture_color_mask
PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS = NULL;
#endif //GL_SGIS_texture_color_mask

#ifdef GL_SGIS_texture_filter4
PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS = NULL;
PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS = NULL;
#endif //GL_SGIS_texture_filter4

#ifdef GL_SGIX_async
PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX = NULL;
PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX = NULL;
PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX = NULL;
PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX = NULL;
PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX = NULL;
PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX = NULL;
#endif //GL_SGIX_async

#ifdef GL_SGIX_flush_raster
PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX = NULL;
#endif //GL_SGIX_flush_raster

#ifdef GL_SGIX_fragment_lighting
PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX = NULL;
PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX = NULL;
PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX = NULL;
PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX = NULL;
PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX = NULL;
PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX = NULL;
PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX = NULL;
PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX = NULL;
PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX = NULL;
PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX = NULL;
PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX = NULL;
PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX = NULL;
PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX = NULL;
PFNGLLIGHTENVISGIXPROC glLightEnviSGIX = NULL;
#endif //GL_SGIX_fragment_lighting

#ifdef GL_SGIX_framezoom
PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX = NULL;
#endif //GL_SGIX_framezoom

#ifdef GL_SGIX_igloo_interface
PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX = NULL;
#endif //GL_SGIX_igloo_interface

#ifdef GL_SGIX_instruments
PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX = NULL;
PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX = NULL;
PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX = NULL;
PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX = NULL;
PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX = NULL;
PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX = NULL;
#endif //GL_SGIX_instruments

#ifdef GL_SGIX_list_priority
PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX = NULL;
PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX = NULL;
PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX = NULL;
PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX = NULL;
PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX = NULL;
PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX = NULL;
#endif //GL_SGIX_list_priority

#ifdef GL_SGIX_pixel_texture
PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX = NULL;
#endif //GL_SGIX_pixel_texture

#ifdef GL_SGIX_polynomial_ffd
PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX = NULL;
PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX = NULL;
PFNGLDEFORMSGIXPROC glDeformSGIX = NULL;
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX = NULL;
#endif //GL_SGIX_polynomial_ffd

#ifdef GL_SGIX_reference_plane
PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX = NULL;
#endif //GL_SGIX_reference_plane

#ifdef GL_SGIX_sprite
PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX = NULL;
PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX = NULL;
PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX = NULL;
PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX = NULL;
#endif //GL_SGIX_sprite

#ifdef GL_SGIX_tag_sample_buffer
PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX = NULL;
#endif //GL_SGIX_tag_sample_buffer

#ifdef GL_SGI_color_table
PFNGLCOLORTABLESGIPROC glColorTableSGI = NULL;
PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI = NULL;
PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI = NULL;
PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI = NULL;
PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI = NULL;
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI = NULL;
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI = NULL;
#endif //GL_SGI_color_table

#ifdef GL_SUNX_constant_data
PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX = NULL;
#endif //GL_SUNX_constant_data

#ifdef GL_SUN_global_alpha
PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN = NULL;
PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN = NULL;
PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN = NULL;
PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN = NULL;
PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN = NULL;
PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN = NULL;
PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN = NULL;
PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN = NULL;
#endif //GL_SUN_global_alpha

#ifdef GL_SUN_mesh_array
PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN = NULL;
#endif //GL_SUN_mesh_array

#ifdef GL_SUN_triangle_list
PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN = NULL;
PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN = NULL;
PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN = NULL;
PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN = NULL;
PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN = NULL;
PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN = NULL;
PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN = NULL;
#endif //GL_SUN_triangle_list

#ifdef GL_SUN_vertex
PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN = NULL;
PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN = NULL;
PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN = NULL;
PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN = NULL;
PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN = NULL;
PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN = NULL;
PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN = NULL;
PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN = NULL;
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN = NULL;
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN = NULL;
PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN = NULL;
PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN = NULL;
PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN = NULL;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN = NULL;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN = NULL;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
#endif //GL_SUN_vertex

#ifdef GL_VERSION_1_2
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements = NULL;
PFNGLTEXIMAGE3DPROC glTexImage3D = NULL;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D = NULL;
#endif //GL_VERSION_1_2

#ifdef GL_VERSION_1_3
PFNGLACTIVETEXTUREPROC glActiveTexture = NULL;
PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture = NULL;
PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d = NULL;
PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv = NULL;
PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f = NULL;
PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv = NULL;
PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i = NULL;
PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv = NULL;
PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s = NULL;
PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv = NULL;
PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d = NULL;
PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv = NULL;
PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f = NULL;
PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv = NULL;
PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i = NULL;
PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv = NULL;
PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s = NULL;
PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv = NULL;
PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d = NULL;
PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv = NULL;
PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f = NULL;
PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv = NULL;
PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i = NULL;
PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv = NULL;
PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s = NULL;
PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv = NULL;
PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d = NULL;
PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv = NULL;
PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f = NULL;
PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv = NULL;
PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i = NULL;
PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv = NULL;
PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s = NULL;
PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv = NULL;
PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf = NULL;
PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd = NULL;
PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf = NULL;
PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd = NULL;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage = NULL;
#endif //GL_VERSION_1_3

#if defined(_WIN32)
#ifdef WGL_ARB_buffer_region
PFNWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB = NULL;
PFNWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB = NULL;
PFNWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB = NULL;
PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB = NULL;
#endif //WGL_ARB_buffer_region

#ifdef WGL_ARB_extensions_string
PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB = NULL;
#endif //WGL_ARB_extensions_string

#ifdef WGL_ARB_make_current_read
PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB = NULL;
PFNWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB = NULL;
#endif //WGL_ARB_make_current_read

#ifdef WGL_ARB_pbuffer
PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB = NULL;
PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB = NULL;
PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB = NULL;
PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB = NULL;
PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB = NULL;
#endif //WGL_ARB_pbuffer

#ifdef WGL_ARB_pixel_format
PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB = NULL;
PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB = NULL;
PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB = NULL;
#endif //WGL_ARB_pixel_format

#ifdef WGL_ARB_render_texture
PFNWGLBINDTEXIMAGEARBPROC wglBindTexImageARB = NULL;
PFNWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB = NULL;
PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB = NULL;
#endif //WGL_ARB_render_texture

#ifdef WGL_EXT_display_color_table
PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT = NULL;
PFNWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT = NULL;
PFNWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT = NULL;
PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT = NULL;
#endif //WGL_EXT_display_color_table

#ifdef WGL_EXT_extensions_string
PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT = NULL;
#endif //WGL_EXT_extensions_string

#ifdef WGL_EXT_make_current_read
PFNWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT = NULL;
PFNWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT = NULL;
#endif //WGL_EXT_make_current_read

#ifdef WGL_EXT_pbuffer
PFNWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT = NULL;
PFNWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT = NULL;
PFNWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT = NULL;
PFNWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT = NULL;
PFNWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT = NULL;
#endif //WGL_EXT_pbuffer

#ifdef WGL_EXT_pixel_format
PFNWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT = NULL;
PFNWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT = NULL;
PFNWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT = NULL;
#endif //WGL_EXT_pixel_format

#ifdef WGL_EXT_swap_control
PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT = NULL;
PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT = NULL;
#endif //WGL_EXT_swap_control

#ifdef WGL_I3D_digital_video_control
PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D = NULL;
PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D = NULL;
#endif //WGL_I3D_digital_video_control

#ifdef WGL_I3D_gamma
PFNWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D = NULL;
PFNWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D = NULL;
PFNWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D = NULL;
PFNWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D = NULL;
#endif //WGL_I3D_gamma

#ifdef WGL_I3D_genlock
PFNWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D = NULL;
PFNWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D = NULL;
PFNWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D = NULL;
PFNWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D = NULL;
PFNWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D = NULL;
PFNWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D = NULL;
PFNWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D = NULL;
PFNWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D = NULL;
PFNWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D = NULL;
PFNWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D = NULL;
PFNWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D = NULL;
PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D = NULL;
#endif //WGL_I3D_genlock

#ifdef WGL_I3D_image_buffer
PFNWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D = NULL;
PFNWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D = NULL;
PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D = NULL;
PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D = NULL;
#endif //WGL_I3D_image_buffer

#ifdef WGL_I3D_swap_frame_lock
PFNWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D = NULL;
PFNWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D = NULL;
PFNWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D = NULL;
PFNWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D = NULL;
#endif //WGL_I3D_swap_frame_lock

#ifdef WGL_I3D_swap_frame_usage
PFNWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D = NULL;
PFNWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D = NULL;
PFNWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D = NULL;
PFNWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D = NULL;
#endif //WGL_I3D_swap_frame_usage

#ifdef WGL_NV_vertex_array_range
PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV = NULL;
PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV = NULL;
#endif //WGL_NV_vertex_array_range

#ifdef WGL_OML_sync_control
PFNWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML = NULL;
PFNWGLGETMSCRATEOMLPROC wglGetMscRateOML = NULL;
PFNWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML = NULL;
PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML = NULL;
PFNWGLWAITFORMSCOMLPROC wglWaitForMscOML = NULL;
PFNWGLWAITFORSBCOMLPROC wglWaitForSbcOML = NULL;
#endif //WGL_OML_sync_control

#endif //_WIN32
static bool Load_GL_3DFX_multisample(GLExtensionReg *reg)
{
#ifdef GL_3DFX_multisample
	if(reg->QueryGLExtension("GL_3DFX_multisample") == 0)
		return false;
	return true;
#endif //GL_3DFX_multisample
	return false;
}

static bool Load_GL_3DFX_tbuffer(GLExtensionReg *reg)
{
#ifdef GL_3DFX_tbuffer
	if(reg->QueryGLExtension("GL_3DFX_tbuffer") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTBUFFERMASK3DFXPROC, glTbufferMask3DFX);
	return true;
#endif //GL_3DFX_tbuffer
	return false;
}

static bool Load_GL_3DFX_texture_compression_FXT1(GLExtensionReg *reg)
{
#ifdef GL_3DFX_texture_compression_FXT1
	if(reg->QueryGLExtension("GL_3DFX_texture_compression_FXT1") == 0)
		return false;
	return true;
#endif //GL_3DFX_texture_compression_FXT1
	return false;
}

static bool Load_GL_APPLE_specular_vector(GLExtensionReg *reg)
{
#ifdef GL_APPLE_specular_vector
	if(reg->QueryGLExtension("GL_APPLE_specular_vector") == 0)
		return false;
	return true;
#endif //GL_APPLE_specular_vector
	return false;
}

static bool Load_GL_APPLE_transform_hint(GLExtensionReg *reg)
{
#ifdef GL_APPLE_transform_hint
	if(reg->QueryGLExtension("GL_APPLE_transform_hint") == 0)
		return false;
	return true;
#endif //GL_APPLE_transform_hint
	return false;
}

static bool Load_GL_ARB_depth_texture(GLExtensionReg *reg)
{
#ifdef GL_ARB_depth_texture
	if(reg->QueryGLExtension("GL_ARB_depth_texture") == 0)
		return false;
	return true;
#endif //GL_ARB_depth_texture
	return false;
}

static bool Load_GL_ARB_fragment_program(GLExtensionReg *reg)
{
#ifdef GL_ARB_fragment_program
	if(reg->QueryGLExtension("GL_ARB_fragment_program") == 0)
		return false;
	return true;
#endif //GL_ARB_fragment_program
	return false;
}

static bool Load_GL_ARB_imaging(GLExtensionReg *reg)
{
#ifdef GL_ARB_imaging
	if(reg->QueryGLExtension("GL_ARB_imaging") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDCOLORPROC, glBlendColor);
	GET_PROC_ADDRESS(PFNGLBLENDEQUATIONPROC, glBlendEquation);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPROC, glColorTable);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERFVPROC, glColorTableParameterfv);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERIVPROC, glColorTableParameteriv);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORTABLEPROC, glCopyColorTable);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPROC, glGetColorTable);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERFVPROC, glGetColorTableParameterfv);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERIVPROC, glGetColorTableParameteriv);
	GET_PROC_ADDRESS(PFNGLCOLORSUBTABLEPROC, glColorSubTable);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORSUBTABLEPROC, glCopyColorSubTable);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER1DPROC, glConvolutionFilter1D);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER2DPROC, glConvolutionFilter2D);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFPROC, glConvolutionParameterf);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFVPROC, glConvolutionParameterfv);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIPROC, glConvolutionParameteri);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIVPROC, glConvolutionParameteriv);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER1DPROC, glCopyConvolutionFilter1D);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER2DPROC, glCopyConvolutionFilter2D);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONFILTERPROC, glGetConvolutionFilter);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERFVPROC, glGetConvolutionParameterfv);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERIVPROC, glGetConvolutionParameteriv);
	GET_PROC_ADDRESS(PFNGLGETSEPARABLEFILTERPROC, glGetSeparableFilter);
	GET_PROC_ADDRESS(PFNGLSEPARABLEFILTER2DPROC, glSeparableFilter2D);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPROC, glGetHistogram);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERFVPROC, glGetHistogramParameterfv);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERIVPROC, glGetHistogramParameteriv);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPROC, glGetMinmax);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERFVPROC, glGetMinmaxParameterfv);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERIVPROC, glGetMinmaxParameteriv);
	GET_PROC_ADDRESS(PFNGLHISTOGRAMPROC, glHistogram);
	GET_PROC_ADDRESS(PFNGLMINMAXPROC, glMinmax);
	GET_PROC_ADDRESS(PFNGLRESETHISTOGRAMPROC, glResetHistogram);
	GET_PROC_ADDRESS(PFNGLRESETMINMAXPROC, glResetMinmax);
	return true;
#endif //GL_ARB_imaging
	return false;
}

static bool Load_GL_ARB_matrix_palette(GLExtensionReg *reg)
{
#ifdef GL_ARB_matrix_palette
	if(reg->QueryGLExtension("GL_ARB_matrix_palette") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCURRENTPALETTEMATRIXARBPROC, glCurrentPaletteMatrixARB);
	GET_PROC_ADDRESS(PFNGLMATRIXINDEXUBVARBPROC, glMatrixIndexubvARB);
	GET_PROC_ADDRESS(PFNGLMATRIXINDEXUSVARBPROC, glMatrixIndexusvARB);
	GET_PROC_ADDRESS(PFNGLMATRIXINDEXUIVARBPROC, glMatrixIndexuivARB);
	GET_PROC_ADDRESS(PFNGLMATRIXINDEXPOINTERARBPROC, glMatrixIndexPointerARB);
	return true;
#endif //GL_ARB_matrix_palette
	return false;
}

static bool Load_GL_ARB_multisample(GLExtensionReg *reg)
{
#ifdef GL_ARB_multisample
	if(reg->QueryGLExtension("GL_ARB_multisample") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSAMPLECOVERAGEARBPROC, glSampleCoverageARB);
	return true;
#endif //GL_ARB_multisample
	return false;
}

static bool Load_GL_ARB_multitexture(GLExtensionReg *reg)
{
#ifdef GL_ARB_multitexture
	if(reg->QueryGLExtension("GL_ARB_multitexture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLACTIVETEXTUREARBPROC, glActiveTextureARB);
	GET_PROC_ADDRESS(PFNGLCLIENTACTIVETEXTUREARBPROC, glClientActiveTextureARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DARBPROC, glMultiTexCoord1dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DVARBPROC, glMultiTexCoord1dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FARBPROC, glMultiTexCoord1fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FVARBPROC, glMultiTexCoord1fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IARBPROC, glMultiTexCoord1iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IVARBPROC, glMultiTexCoord1ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SARBPROC, glMultiTexCoord1sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SVARBPROC, glMultiTexCoord1svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DARBPROC, glMultiTexCoord2dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DVARBPROC, glMultiTexCoord2dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FARBPROC, glMultiTexCoord2fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FVARBPROC, glMultiTexCoord2fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IARBPROC, glMultiTexCoord2iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IVARBPROC, glMultiTexCoord2ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SARBPROC, glMultiTexCoord2sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SVARBPROC, glMultiTexCoord2svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DARBPROC, glMultiTexCoord3dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DVARBPROC, glMultiTexCoord3dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FARBPROC, glMultiTexCoord3fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FVARBPROC, glMultiTexCoord3fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IARBPROC, glMultiTexCoord3iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IVARBPROC, glMultiTexCoord3ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SARBPROC, glMultiTexCoord3sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SVARBPROC, glMultiTexCoord3svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DARBPROC, glMultiTexCoord4dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DVARBPROC, glMultiTexCoord4dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FARBPROC, glMultiTexCoord4fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FVARBPROC, glMultiTexCoord4fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IARBPROC, glMultiTexCoord4iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IVARBPROC, glMultiTexCoord4ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SARBPROC, glMultiTexCoord4sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SVARBPROC, glMultiTexCoord4svARB);
	return true;
#endif //GL_ARB_multitexture
	return false;
}

static bool Load_GL_ARB_point_parameters(GLExtensionReg *reg)
{
#ifdef GL_ARB_point_parameters
	if(reg->QueryGLExtension("GL_ARB_point_parameters") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFARBPROC, glPointParameterfARB);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVARBPROC, glPointParameterfvARB);
	return true;
#endif //GL_ARB_point_parameters
	return false;
}

static bool Load_GL_ARB_shadow(GLExtensionReg *reg)
{
#ifdef GL_ARB_shadow
	if(reg->QueryGLExtension("GL_ARB_shadow") == 0)
		return false;
	return true;
#endif //GL_ARB_shadow
	return false;
}

static bool Load_GL_ARB_shadow_ambient(GLExtensionReg *reg)
{
#ifdef GL_ARB_shadow_ambient
	if(reg->QueryGLExtension("GL_ARB_shadow_ambient") == 0)
		return false;
	return true;
#endif //GL_ARB_shadow_ambient
	return false;
}

static bool Load_GL_ARB_texture_border_clamp(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_border_clamp
	if(reg->QueryGLExtension("GL_ARB_texture_border_clamp") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_border_clamp
	return false;
}

static bool Load_GL_ARB_texture_compression(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_compression
	if(reg->QueryGLExtension("GL_ARB_texture_compression") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE3DARBPROC, glCompressedTexImage3DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE2DARBPROC, glCompressedTexImage2DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE1DARBPROC, glCompressedTexImage1DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC, glCompressedTexSubImage3DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC, glCompressedTexSubImage2DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC, glCompressedTexSubImage1DARB);
	GET_PROC_ADDRESS(PFNGLGETCOMPRESSEDTEXIMAGEARBPROC, glGetCompressedTexImageARB);
	return true;
#endif //GL_ARB_texture_compression
	return false;
}

static bool Load_GL_ARB_texture_cube_map(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_cube_map
	if(reg->QueryGLExtension("GL_ARB_texture_cube_map") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_cube_map
	return false;
}

static bool Load_GL_ARB_texture_env_add(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_add
	if(reg->QueryGLExtension("GL_ARB_texture_env_add") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_add
	return false;
}

static bool Load_GL_ARB_texture_env_combine(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_combine
	if(reg->QueryGLExtension("GL_ARB_texture_env_combine") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_combine
	return false;
}

static bool Load_GL_ARB_texture_env_crossbar(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_crossbar
	if(reg->QueryGLExtension("GL_ARB_texture_env_crossbar") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_crossbar
	return false;
}

static bool Load_GL_ARB_texture_env_dot3(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_dot3
	if(reg->QueryGLExtension("GL_ARB_texture_env_dot3") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_dot3
	return false;
}

static bool Load_GL_ARB_texture_mirror_repeat(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_mirror_repeat
	if(reg->QueryGLExtension("GL_ARB_texture_mirror_repeat") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_mirror_repeat
	return false;
}

static bool Load_GL_ARB_texture_mirrored_repeat(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_mirrored_repeat
	if(reg->QueryGLExtension("GL_ARB_texture_mirrored_repeat") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_mirrored_repeat
	return false;
}

static bool Load_GL_ARB_transpose_matrix(GLExtensionReg *reg)
{
#ifdef GL_ARB_transpose_matrix
	if(reg->QueryGLExtension("GL_ARB_transpose_matrix") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXFARBPROC, glLoadTransposeMatrixfARB);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXDARBPROC, glLoadTransposeMatrixdARB);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXFARBPROC, glMultTransposeMatrixfARB);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXDARBPROC, glMultTransposeMatrixdARB);
	return true;
#endif //GL_ARB_transpose_matrix
	return false;
}

static bool Load_GL_ARB_vertex_blend(GLExtensionReg *reg)
{
#ifdef GL_ARB_vertex_blend
	if(reg->QueryGLExtension("GL_ARB_vertex_blend") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLWEIGHTBVARBPROC, glWeightbvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTSVARBPROC, glWeightsvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTIVARBPROC, glWeightivARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTFVARBPROC, glWeightfvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTDVARBPROC, glWeightdvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTUBVARBPROC, glWeightubvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTUSVARBPROC, glWeightusvARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTUIVARBPROC, glWeightuivARB);
	GET_PROC_ADDRESS(PFNGLWEIGHTPOINTERARBPROC, glWeightPointerARB);
	GET_PROC_ADDRESS(PFNGLVERTEXBLENDARBPROC, glVertexBlendARB);
	return true;
#endif //GL_ARB_vertex_blend
	return false;
}

static bool Load_GL_ARB_vertex_program(GLExtensionReg *reg)
{
#ifdef GL_ARB_vertex_program
	if(reg->QueryGLExtension("GL_ARB_vertex_program") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SARBPROC, glVertexAttrib1sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FARBPROC, glVertexAttrib1fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DARBPROC, glVertexAttrib1dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SARBPROC, glVertexAttrib2sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FARBPROC, glVertexAttrib2fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DARBPROC, glVertexAttrib2dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SARBPROC, glVertexAttrib3sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FARBPROC, glVertexAttrib3fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DARBPROC, glVertexAttrib3dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SARBPROC, glVertexAttrib4sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FARBPROC, glVertexAttrib4fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DARBPROC, glVertexAttrib4dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUBARBPROC, glVertexAttrib4NubARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SVARBPROC, glVertexAttrib1svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FVARBPROC, glVertexAttrib1fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DVARBPROC, glVertexAttrib1dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SVARBPROC, glVertexAttrib2svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FVARBPROC, glVertexAttrib2fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DVARBPROC, glVertexAttrib2dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SVARBPROC, glVertexAttrib3svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FVARBPROC, glVertexAttrib3fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DVARBPROC, glVertexAttrib3dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4BVARBPROC, glVertexAttrib4bvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SVARBPROC, glVertexAttrib4svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4IVARBPROC, glVertexAttrib4ivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBVARBPROC, glVertexAttrib4ubvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4USVARBPROC, glVertexAttrib4usvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UIVARBPROC, glVertexAttrib4uivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FVARBPROC, glVertexAttrib4fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DVARBPROC, glVertexAttrib4dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NBVARBPROC, glVertexAttrib4NbvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NSVARBPROC, glVertexAttrib4NsvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NIVARBPROC, glVertexAttrib4NivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUBVARBPROC, glVertexAttrib4NubvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUSVARBPROC, glVertexAttrib4NusvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUIVARBPROC, glVertexAttrib4NuivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBPOINTERARBPROC, glVertexAttribPointerARB);
	GET_PROC_ADDRESS(PFNGLENABLEVERTEXATTRIBARRAYARBPROC, glEnableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLDISABLEVERTEXATTRIBARRAYARBPROC, glDisableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMSTRINGARBPROC, glProgramStringARB);
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMARBPROC, glBindProgramARB);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSARBPROC, glDeleteProgramsARB);
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSARBPROC, glGenProgramsARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FARBPROC, glProgramEnvParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4DARBPROC, glProgramEnvParameter4dARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FVARBPROC, glProgramEnvParameter4fvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4DVARBPROC, glProgramEnvParameter4dvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FARBPROC, glProgramLocalParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4DARBPROC, glProgramLocalParameter4dARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FVARBPROC, glProgramLocalParameter4fvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4DVARBPROC, glProgramLocalParameter4dvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMENVPARAMETERFVARBPROC, glGetProgramEnvParameterfvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMENVPARAMETERDVARBPROC, glGetProgramEnvParameterdvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC, glGetProgramLocalParameterfvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC, glGetProgramLocalParameterdvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMIVARBPROC, glGetProgramivARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMSTRINGARBPROC, glGetProgramStringARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBDVARBPROC, glGetVertexAttribdvARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBFVARBPROC, glGetVertexAttribfvARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBIVARBPROC, glGetVertexAttribivARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBPOINTERVARBPROC, glGetVertexAttribPointervARB);
	GET_PROC_ADDRESS(PFNGLISPROGRAMARBPROC, glIsProgramARB);
	return true;
#endif //GL_ARB_vertex_program
	return false;
}

static bool Load_GL_ARB_window_pos(GLExtensionReg *reg)
{
#ifdef GL_ARB_window_pos
	if(reg->QueryGLExtension("GL_ARB_window_pos") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DARBPROC, glWindowPos2dARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DVARBPROC, glWindowPos2dvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FARBPROC, glWindowPos2fARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FVARBPROC, glWindowPos2fvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IARBPROC, glWindowPos2iARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IVARBPROC, glWindowPos2ivARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SARBPROC, glWindowPos2sARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SVARBPROC, glWindowPos2svARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DARBPROC, glWindowPos3dARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DVARBPROC, glWindowPos3dvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FARBPROC, glWindowPos3fARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FVARBPROC, glWindowPos3fvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IARBPROC, glWindowPos3iARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IVARBPROC, glWindowPos3ivARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SARBPROC, glWindowPos3sARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SVARBPROC, glWindowPos3svARB);
	return true;
#endif //GL_ARB_window_pos
	return false;
}

static bool Load_GL_ATI_element_array(GLExtensionReg *reg)
{
#ifdef GL_ATI_element_array
	if(reg->QueryGLExtension("GL_ATI_element_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLELEMENTPOINTERATIPROC, glElementPointerATI);
	GET_PROC_ADDRESS(PFNGLDRAWELEMENTARRAYATIPROC, glDrawElementArrayATI);
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTARRAYATIPROC, glDrawRangeElementArrayATI);
	return true;
#endif //GL_ATI_element_array
	return false;
}

static bool Load_GL_ATI_envmap_bumpmap(GLExtensionReg *reg)
{
#ifdef GL_ATI_envmap_bumpmap
	if(reg->QueryGLExtension("GL_ATI_envmap_bumpmap") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXBUMPPARAMETERIVATIPROC, glTexBumpParameterivATI);
	GET_PROC_ADDRESS(PFNGLTEXBUMPPARAMETERFVATIPROC, glTexBumpParameterfvATI);
	GET_PROC_ADDRESS(PFNGLGETTEXBUMPPARAMETERIVATIPROC, glGetTexBumpParameterivATI);
	GET_PROC_ADDRESS(PFNGLGETTEXBUMPPARAMETERFVATIPROC, glGetTexBumpParameterfvATI);
	return true;
#endif //GL_ATI_envmap_bumpmap
	return false;
}

static bool Load_GL_ATI_fragment_shader(GLExtensionReg *reg)
{
#ifdef GL_ATI_fragment_shader
	if(reg->QueryGLExtension("GL_ATI_fragment_shader") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGENFRAGMENTSHADERSATIPROC, glGenFragmentShadersATI);
	GET_PROC_ADDRESS(PFNGLBINDFRAGMENTSHADERATIPROC, glBindFragmentShaderATI);
	GET_PROC_ADDRESS(PFNGLDELETEFRAGMENTSHADERATIPROC, glDeleteFragmentShaderATI);
	GET_PROC_ADDRESS(PFNGLBEGINFRAGMENTSHADERATIPROC, glBeginFragmentShaderATI);
	GET_PROC_ADDRESS(PFNGLENDFRAGMENTSHADERATIPROC, glEndFragmentShaderATI);
	GET_PROC_ADDRESS(PFNGLPASSTEXCOORDATIPROC, glPassTexCoordATI);
	GET_PROC_ADDRESS(PFNGLSAMPLEMAPATIPROC, glSampleMapATI);
	GET_PROC_ADDRESS(PFNGLCOLORFRAGMENTOP1ATIPROC, glColorFragmentOp1ATI);
	GET_PROC_ADDRESS(PFNGLCOLORFRAGMENTOP2ATIPROC, glColorFragmentOp2ATI);
	GET_PROC_ADDRESS(PFNGLCOLORFRAGMENTOP3ATIPROC, glColorFragmentOp3ATI);
	GET_PROC_ADDRESS(PFNGLALPHAFRAGMENTOP1ATIPROC, glAlphaFragmentOp1ATI);
	GET_PROC_ADDRESS(PFNGLALPHAFRAGMENTOP2ATIPROC, glAlphaFragmentOp2ATI);
	GET_PROC_ADDRESS(PFNGLALPHAFRAGMENTOP3ATIPROC, glAlphaFragmentOp3ATI);
	GET_PROC_ADDRESS(PFNGLSETFRAGMENTSHADERCONSTANTATIPROC, glSetFragmentShaderConstantATI);
	return true;
#endif //GL_ATI_fragment_shader
	return false;
}

static bool Load_GL_ATI_pn_triangles(GLExtensionReg *reg)
{
#ifdef GL_ATI_pn_triangles
	if(reg->QueryGLExtension("GL_ATI_pn_triangles") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPNTRIANGLESIATIPROC, glPNTrianglesiATI);
	GET_PROC_ADDRESS(PFNGLPNTRIANGLESFATIPROC, glPNTrianglesfATI);
	return true;
#endif //GL_ATI_pn_triangles
	return false;
}

static bool Load_GL_ATI_texture_mirror_once(GLExtensionReg *reg)
{
#ifdef GL_ATI_texture_mirror_once
	if(reg->QueryGLExtension("GL_ATI_texture_mirror_once") == 0)
		return false;
	return true;
#endif //GL_ATI_texture_mirror_once
	return false;
}

static bool Load_GL_ATI_vertex_array_object(GLExtensionReg *reg)
{
#ifdef GL_ATI_vertex_array_object
	if(reg->QueryGLExtension("GL_ATI_vertex_array_object") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLNEWOBJECTBUFFERATIPROC, glNewObjectBufferATI);
	GET_PROC_ADDRESS(PFNGLISOBJECTBUFFERATIPROC, glIsObjectBufferATI);
	GET_PROC_ADDRESS(PFNGLUPDATEOBJECTBUFFERATIPROC, glUpdateObjectBufferATI);
	GET_PROC_ADDRESS(PFNGLGETOBJECTBUFFERFVATIPROC, glGetObjectBufferfvATI);
	GET_PROC_ADDRESS(PFNGLGETOBJECTBUFFERIVATIPROC, glGetObjectBufferivATI);
	GET_PROC_ADDRESS(PFNGLDELETEOBJECTBUFFERATIPROC, glDeleteObjectBufferATI);
	GET_PROC_ADDRESS(PFNGLARRAYOBJECTATIPROC, glArrayObjectATI);
	GET_PROC_ADDRESS(PFNGLGETARRAYOBJECTFVATIPROC, glGetArrayObjectfvATI);
	GET_PROC_ADDRESS(PFNGLGETARRAYOBJECTIVATIPROC, glGetArrayObjectivATI);
	GET_PROC_ADDRESS(PFNGLVARIANTARRAYOBJECTATIPROC, glVariantArrayObjectATI);
	GET_PROC_ADDRESS(PFNGLGETVARIANTARRAYOBJECTFVATIPROC, glGetVariantArrayObjectfvATI);
	GET_PROC_ADDRESS(PFNGLGETVARIANTARRAYOBJECTIVATIPROC, glGetVariantArrayObjectivATI);
	return true;
#endif //GL_ATI_vertex_array_object
	return false;
}

static bool Load_GL_ATI_vertex_streams(GLExtensionReg *reg)
{
#ifdef GL_ATI_vertex_streams
	if(reg->QueryGLExtension("GL_ATI_vertex_streams") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1SATIPROC, glVertexStream1sATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1SVATIPROC, glVertexStream1svATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1IATIPROC, glVertexStream1iATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1IVATIPROC, glVertexStream1ivATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1FATIPROC, glVertexStream1fATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1FVATIPROC, glVertexStream1fvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1DATIPROC, glVertexStream1dATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM1DVATIPROC, glVertexStream1dvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2SATIPROC, glVertexStream2sATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2SVATIPROC, glVertexStream2svATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2IATIPROC, glVertexStream2iATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2IVATIPROC, glVertexStream2ivATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2FATIPROC, glVertexStream2fATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2FVATIPROC, glVertexStream2fvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2DATIPROC, glVertexStream2dATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM2DVATIPROC, glVertexStream2dvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3SATIPROC, glVertexStream3sATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3SVATIPROC, glVertexStream3svATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3IATIPROC, glVertexStream3iATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3IVATIPROC, glVertexStream3ivATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3FATIPROC, glVertexStream3fATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3FVATIPROC, glVertexStream3fvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3DATIPROC, glVertexStream3dATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM3DVATIPROC, glVertexStream3dvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4SATIPROC, glVertexStream4sATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4SVATIPROC, glVertexStream4svATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4IATIPROC, glVertexStream4iATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4IVATIPROC, glVertexStream4ivATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4FATIPROC, glVertexStream4fATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4FVATIPROC, glVertexStream4fvATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4DATIPROC, glVertexStream4dATI);
	GET_PROC_ADDRESS(PFNGLVERTEXSTREAM4DVATIPROC, glVertexStream4dvATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3BATIPROC, glNormalStream3bATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3BVATIPROC, glNormalStream3bvATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3SATIPROC, glNormalStream3sATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3SVATIPROC, glNormalStream3svATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3IATIPROC, glNormalStream3iATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3IVATIPROC, glNormalStream3ivATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3FATIPROC, glNormalStream3fATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3FVATIPROC, glNormalStream3fvATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3DATIPROC, glNormalStream3dATI);
	GET_PROC_ADDRESS(PFNGLNORMALSTREAM3DVATIPROC, glNormalStream3dvATI);
	GET_PROC_ADDRESS(PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC, glClientActiveVertexStreamATI);
	GET_PROC_ADDRESS(PFNGLVERTEXBLENDENVIATIPROC, glVertexBlendEnviATI);
	GET_PROC_ADDRESS(PFNGLVERTEXBLENDENVFATIPROC, glVertexBlendEnvfATI);
	return true;
#endif //GL_ATI_vertex_streams
	return false;
}

static bool Load_GL_EXT_422_pixels(GLExtensionReg *reg)
{
#ifdef GL_EXT_422_pixels
	if(reg->QueryGLExtension("GL_EXT_422_pixels") == 0)
		return false;
	return true;
#endif //GL_EXT_422_pixels
	return false;
}

static bool Load_GL_EXT_abgr(GLExtensionReg *reg)
{
#ifdef GL_EXT_abgr
	if(reg->QueryGLExtension("GL_EXT_abgr") == 0)
		return false;
	return true;
#endif //GL_EXT_abgr
	return false;
}

static bool Load_GL_EXT_bgra(GLExtensionReg *reg)
{
#ifdef GL_EXT_bgra
	if(reg->QueryGLExtension("GL_EXT_bgra") == 0)
		return false;
	return true;
#endif //GL_EXT_bgra
	return false;
}

static bool Load_GL_EXT_blend_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_color
	if(reg->QueryGLExtension("GL_EXT_blend_color") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDCOLOREXTPROC, glBlendColorEXT);
	return true;
#endif //GL_EXT_blend_color
	return false;
}

static bool Load_GL_EXT_blend_func_separate(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_func_separate
	if(reg->QueryGLExtension("GL_EXT_blend_func_separate") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDFUNCSEPARATEEXTPROC, glBlendFuncSeparateEXT);
	GET_PROC_ADDRESS(PFNGLBLENDFUNCSEPARATEINGRPROC, glBlendFuncSeparateINGR);
	return true;
#endif //GL_EXT_blend_func_separate
	return false;
}

static bool Load_GL_EXT_blend_logic_op(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_logic_op
	if(reg->QueryGLExtension("GL_EXT_blend_logic_op") == 0)
		return false;
	return true;
#endif //GL_EXT_blend_logic_op
	return false;
}

static bool Load_GL_EXT_blend_minmax(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_minmax
	if(reg->QueryGLExtension("GL_EXT_blend_minmax") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDEQUATIONEXTPROC, glBlendEquationEXT);
	return true;
#endif //GL_EXT_blend_minmax
	return false;
}

static bool Load_GL_EXT_blend_subtract(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_subtract
	if(reg->QueryGLExtension("GL_EXT_blend_subtract") == 0)
		return false;
	return true;
#endif //GL_EXT_blend_subtract
	return false;
}

static bool Load_GL_EXT_clip_volume_hint(GLExtensionReg *reg)
{
#ifdef GL_EXT_clip_volume_hint
	if(reg->QueryGLExtension("GL_EXT_clip_volume_hint") == 0)
		return false;
	return true;
#endif //GL_EXT_clip_volume_hint
	return false;
}

static bool Load_GL_EXT_cmyka(GLExtensionReg *reg)
{
#ifdef GL_EXT_cmyka
	if(reg->QueryGLExtension("GL_EXT_cmyka") == 0)
		return false;
	return true;
#endif //GL_EXT_cmyka
	return false;
}

static bool Load_GL_EXT_color_matrix(GLExtensionReg *reg)
{
#ifdef GL_EXT_color_matrix
	if(reg->QueryGLExtension("GL_EXT_color_matrix") == 0)
		return false;
	return true;
#endif //GL_EXT_color_matrix
	return false;
}

static bool Load_GL_EXT_color_subtable(GLExtensionReg *reg)
{
#ifdef GL_EXT_color_subtable
	if(reg->QueryGLExtension("GL_EXT_color_subtable") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLORSUBTABLEEXTPROC, glColorSubTableEXT);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORSUBTABLEEXTPROC, glCopyColorSubTableEXT);
	return true;
#endif //GL_EXT_color_subtable
	return false;
}

static bool Load_GL_EXT_compiled_vertex_array(GLExtensionReg *reg)
{
#ifdef GL_EXT_compiled_vertex_array
	if(reg->QueryGLExtension("GL_EXT_compiled_vertex_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLLOCKARRAYSEXTPROC, glLockArraysEXT);
	GET_PROC_ADDRESS(PFNGLUNLOCKARRAYSEXTPROC, glUnlockArraysEXT);
	return true;
#endif //GL_EXT_compiled_vertex_array
	return false;
}

static bool Load_GL_EXT_convolution(GLExtensionReg *reg)
{
#ifdef GL_EXT_convolution
	if(reg->QueryGLExtension("GL_EXT_convolution") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER1DEXTPROC, glConvolutionFilter1DEXT);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER2DEXTPROC, glConvolutionFilter2DEXT);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFEXTPROC, glConvolutionParameterfEXT);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFVEXTPROC, glConvolutionParameterfvEXT);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIEXTPROC, glConvolutionParameteriEXT);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIVEXTPROC, glConvolutionParameterivEXT);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC, glCopyConvolutionFilter1DEXT);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC, glCopyConvolutionFilter2DEXT);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONFILTEREXTPROC, glGetConvolutionFilterEXT);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC, glGetConvolutionParameterfvEXT);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC, glGetConvolutionParameterivEXT);
	GET_PROC_ADDRESS(PFNGLGETSEPARABLEFILTEREXTPROC, glGetSeparableFilterEXT);
	GET_PROC_ADDRESS(PFNGLSEPARABLEFILTER2DEXTPROC, glSeparableFilter2DEXT);
	return true;
#endif //GL_EXT_convolution
	return false;
}

static bool Load_GL_EXT_coordinate_frame(GLExtensionReg *reg)
{
#ifdef GL_EXT_coordinate_frame
	if(reg->QueryGLExtension("GL_EXT_coordinate_frame") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTANGENT3BEXTPROC, glTangent3bEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3BVEXTPROC, glTangent3bvEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3DEXTPROC, glTangent3dEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3DVEXTPROC, glTangent3dvEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3FEXTPROC, glTangent3fEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3FVEXTPROC, glTangent3fvEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3IEXTPROC, glTangent3iEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3IVEXTPROC, glTangent3ivEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3SEXTPROC, glTangent3sEXT);
	GET_PROC_ADDRESS(PFNGLTANGENT3SVEXTPROC, glTangent3svEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3BEXTPROC, glBinormal3bEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3BVEXTPROC, glBinormal3bvEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3DEXTPROC, glBinormal3dEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3DVEXTPROC, glBinormal3dvEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3FEXTPROC, glBinormal3fEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3FVEXTPROC, glBinormal3fvEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3IEXTPROC, glBinormal3iEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3IVEXTPROC, glBinormal3ivEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3SEXTPROC, glBinormal3sEXT);
	GET_PROC_ADDRESS(PFNGLBINORMAL3SVEXTPROC, glBinormal3svEXT);
	GET_PROC_ADDRESS(PFNGLTANGENTPOINTEREXTPROC, glTangentPointerEXT);
	GET_PROC_ADDRESS(PFNGLBINORMALPOINTEREXTPROC, glBinormalPointerEXT);
	return true;
#endif //GL_EXT_coordinate_frame
	return false;
}

static bool Load_GL_EXT_copy_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_copy_texture
	if(reg->QueryGLExtension("GL_EXT_copy_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOPYTEXIMAGE1DEXTPROC, glCopyTexImage1DEXT);
	GET_PROC_ADDRESS(PFNGLCOPYTEXIMAGE2DEXTPROC, glCopyTexImage2DEXT);
	GET_PROC_ADDRESS(PFNGLCOPYTEXSUBIMAGE1DEXTPROC, glCopyTexSubImage1DEXT);
	GET_PROC_ADDRESS(PFNGLCOPYTEXSUBIMAGE2DEXTPROC, glCopyTexSubImage2DEXT);
	GET_PROC_ADDRESS(PFNGLCOPYTEXSUBIMAGE3DEXTPROC, glCopyTexSubImage3DEXT);
	return true;
#endif //GL_EXT_copy_texture
	return false;
}

static bool Load_GL_EXT_cull_vertex(GLExtensionReg *reg)
{
#ifdef GL_EXT_cull_vertex
	if(reg->QueryGLExtension("GL_EXT_cull_vertex") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCULLPARAMETERDVEXTPROC, glCullParameterdvEXT);
	GET_PROC_ADDRESS(PFNGLCULLPARAMETERFVEXTPROC, glCullParameterfvEXT);
	return true;
#endif //GL_EXT_cull_vertex
	return false;
}

static bool Load_GL_EXT_draw_range_elements(GLExtensionReg *reg)
{
#ifdef GL_EXT_draw_range_elements
	if(reg->QueryGLExtension("GL_EXT_draw_range_elements") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTSEXTPROC, glDrawRangeElementsEXT);
	return true;
#endif //GL_EXT_draw_range_elements
	return false;
}

static bool Load_GL_EXT_fog_coord(GLExtensionReg *reg)
{
#ifdef GL_EXT_fog_coord
	if(reg->QueryGLExtension("GL_EXT_fog_coord") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFOGCOORDFEXTPROC, glFogCoordfEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDFVEXTPROC, glFogCoordfvEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDDEXTPROC, glFogCoorddEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDDVEXTPROC, glFogCoorddvEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDPOINTEREXTPROC, glFogCoordPointerEXT);
	return true;
#endif //GL_EXT_fog_coord
	return false;
}

static bool Load_GL_EXT_histogram(GLExtensionReg *reg)
{
#ifdef GL_EXT_histogram
	if(reg->QueryGLExtension("GL_EXT_histogram") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMEXTPROC, glGetHistogramEXT);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERFVEXTPROC, glGetHistogramParameterfvEXT);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERIVEXTPROC, glGetHistogramParameterivEXT);
	GET_PROC_ADDRESS(PFNGLGETMINMAXEXTPROC, glGetMinmaxEXT);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERFVEXTPROC, glGetMinmaxParameterfvEXT);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERIVEXTPROC, glGetMinmaxParameterivEXT);
	GET_PROC_ADDRESS(PFNGLHISTOGRAMEXTPROC, glHistogramEXT);
	GET_PROC_ADDRESS(PFNGLMINMAXEXTPROC, glMinmaxEXT);
	GET_PROC_ADDRESS(PFNGLRESETHISTOGRAMEXTPROC, glResetHistogramEXT);
	GET_PROC_ADDRESS(PFNGLRESETMINMAXEXTPROC, glResetMinmaxEXT);
	return true;
#endif //GL_EXT_histogram
	return false;
}

static bool Load_GL_EXT_index_array_formats(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_array_formats
	if(reg->QueryGLExtension("GL_EXT_index_array_formats") == 0)
		return false;
	return true;
#endif //GL_EXT_index_array_formats
	return false;
}

static bool Load_GL_EXT_index_func(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_func
	if(reg->QueryGLExtension("GL_EXT_index_func") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLINDEXFUNCEXTPROC, glIndexFuncEXT);
	return true;
#endif //GL_EXT_index_func
	return false;
}

static bool Load_GL_EXT_index_material(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_material
	if(reg->QueryGLExtension("GL_EXT_index_material") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLINDEXMATERIALEXTPROC, glIndexMaterialEXT);
	return true;
#endif //GL_EXT_index_material
	return false;
}

static bool Load_GL_EXT_index_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_texture
	if(reg->QueryGLExtension("GL_EXT_index_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_index_texture
	return false;
}

static bool Load_GL_EXT_light_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_light_texture
	if(reg->QueryGLExtension("GL_EXT_light_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLAPPLYTEXTUREEXTPROC, glApplyTextureEXT);
	GET_PROC_ADDRESS(PFNGLTEXTURELIGHTEXTPROC, glTextureLightEXT);
	GET_PROC_ADDRESS(PFNGLTEXTUREMATERIALEXTPROC, glTextureMaterialEXT);
	return true;
#endif //GL_EXT_light_texture
	return false;
}

static bool Load_GL_EXT_misc_attribute(GLExtensionReg *reg)
{
#ifdef GL_EXT_misc_attribute
	if(reg->QueryGLExtension("GL_EXT_misc_attribute") == 0)
		return false;
	return true;
#endif //GL_EXT_misc_attribute
	return false;
}

static bool Load_GL_EXT_multi_draw_arrays(GLExtensionReg *reg)
{
#ifdef GL_EXT_multi_draw_arrays
	if(reg->QueryGLExtension("GL_EXT_multi_draw_arrays") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLMULTIDRAWARRAYSEXTPROC, glMultiDrawArraysEXT);
	GET_PROC_ADDRESS(PFNGLMULTIDRAWELEMENTSEXTPROC, glMultiDrawElementsEXT);
	return true;
#endif //GL_EXT_multi_draw_arrays
	return false;
}

static bool Load_GL_EXT_multisample(GLExtensionReg *reg)
{
#ifdef GL_EXT_multisample
	if(reg->QueryGLExtension("GL_EXT_multisample") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSAMPLEMASKEXTPROC, glSampleMaskEXT);
	GET_PROC_ADDRESS(PFNGLSAMPLEPATTERNEXTPROC, glSamplePatternEXT);
	return true;
#endif //GL_EXT_multisample
	return false;
}

static bool Load_GL_EXT_packed_pixels(GLExtensionReg *reg)
{
#ifdef GL_EXT_packed_pixels
	if(reg->QueryGLExtension("GL_EXT_packed_pixels") == 0)
		return false;
	return true;
#endif //GL_EXT_packed_pixels
	return false;
}

static bool Load_GL_EXT_paletted_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_paletted_texture
	if(reg->QueryGLExtension("GL_EXT_paletted_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLORTABLEEXTPROC, glColorTableEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEEXTPROC, glGetColorTableEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERIVEXTPROC, glGetColorTableParameterivEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERFVEXTPROC, glGetColorTableParameterfvEXT);
	return true;
#endif //GL_EXT_paletted_texture
	return false;
}

static bool Load_GL_EXT_pixel_transform(GLExtensionReg *reg)
{
#ifdef GL_EXT_pixel_transform
	if(reg->QueryGLExtension("GL_EXT_pixel_transform") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPIXELTRANSFORMPARAMETERIEXTPROC, glPixelTransformParameteriEXT);
	GET_PROC_ADDRESS(PFNGLPIXELTRANSFORMPARAMETERFEXTPROC, glPixelTransformParameterfEXT);
	GET_PROC_ADDRESS(PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC, glPixelTransformParameterivEXT);
	GET_PROC_ADDRESS(PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC, glPixelTransformParameterfvEXT);
	return true;
#endif //GL_EXT_pixel_transform
	return false;
}

static bool Load_GL_EXT_pixel_transform_color_table(GLExtensionReg *reg)
{
#ifdef GL_EXT_pixel_transform_color_table
	if(reg->QueryGLExtension("GL_EXT_pixel_transform_color_table") == 0)
		return false;
	return true;
#endif //GL_EXT_pixel_transform_color_table
	return false;
}

static bool Load_GL_EXT_point_parameters(GLExtensionReg *reg)
{
#ifdef GL_EXT_point_parameters
	if(reg->QueryGLExtension("GL_EXT_point_parameters") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFEXTPROC, glPointParameterfEXT);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVEXTPROC, glPointParameterfvEXT);
	return true;
#endif //GL_EXT_point_parameters
	return false;
}

static bool Load_GL_EXT_polygon_offset(GLExtensionReg *reg)
{
#ifdef GL_EXT_polygon_offset
	if(reg->QueryGLExtension("GL_EXT_polygon_offset") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOLYGONOFFSETEXTPROC, glPolygonOffsetEXT);
	return true;
#endif //GL_EXT_polygon_offset
	return false;
}

static bool Load_GL_EXT_rescale_normal(GLExtensionReg *reg)
{
#ifdef GL_EXT_rescale_normal
	if(reg->QueryGLExtension("GL_EXT_rescale_normal") == 0)
		return false;
	return true;
#endif //GL_EXT_rescale_normal
	return false;
}

static bool Load_GL_EXT_secondary_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_secondary_color
	if(reg->QueryGLExtension("GL_EXT_secondary_color") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BEXTPROC, glSecondaryColor3bEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BVEXTPROC, glSecondaryColor3bvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DEXTPROC, glSecondaryColor3dEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DVEXTPROC, glSecondaryColor3dvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FEXTPROC, glSecondaryColor3fEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FVEXTPROC, glSecondaryColor3fvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IEXTPROC, glSecondaryColor3iEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IVEXTPROC, glSecondaryColor3ivEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SEXTPROC, glSecondaryColor3sEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SVEXTPROC, glSecondaryColor3svEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBEXTPROC, glSecondaryColor3ubEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBVEXTPROC, glSecondaryColor3ubvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIEXTPROC, glSecondaryColor3uiEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIVEXTPROC, glSecondaryColor3uivEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USEXTPROC, glSecondaryColor3usEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USVEXTPROC, glSecondaryColor3usvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLORPOINTEREXTPROC, glSecondaryColorPointerEXT);
	return true;
#endif //GL_EXT_secondary_color
	return false;
}

static bool Load_GL_EXT_separate_specular_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_separate_specular_color
	if(reg->QueryGLExtension("GL_EXT_separate_specular_color") == 0)
		return false;
	return true;
#endif //GL_EXT_separate_specular_color
	return false;
}

static bool Load_GL_EXT_shadow_funcs(GLExtensionReg *reg)
{
#ifdef GL_EXT_shadow_funcs
	if(reg->QueryGLExtension("GL_EXT_shadow_funcs") == 0)
		return false;
	return true;
#endif //GL_EXT_shadow_funcs
	return false;
}

static bool Load_GL_EXT_shared_texture_palette(GLExtensionReg *reg)
{
#ifdef GL_EXT_shared_texture_palette
	if(reg->QueryGLExtension("GL_EXT_shared_texture_palette") == 0)
		return false;
	return true;
#endif //GL_EXT_shared_texture_palette
	return false;
}

static bool Load_GL_EXT_stencil_two_side(GLExtensionReg *reg)
{
#ifdef GL_EXT_stencil_two_side
	if(reg->QueryGLExtension("GL_EXT_stencil_two_side") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLACTIVESTENCILFACEEXTPROC, glActiveStencilFaceEXT);
	return true;
#endif //GL_EXT_stencil_two_side
	return false;
}

static bool Load_GL_EXT_stencil_wrap(GLExtensionReg *reg)
{
#ifdef GL_EXT_stencil_wrap
	if(reg->QueryGLExtension("GL_EXT_stencil_wrap") == 0)
		return false;
	return true;
#endif //GL_EXT_stencil_wrap
	return false;
}

static bool Load_GL_EXT_subtexture(GLExtensionReg *reg)
{
#ifdef GL_EXT_subtexture
	if(reg->QueryGLExtension("GL_EXT_subtexture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE1DEXTPROC, glTexSubImage1DEXT);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE2DEXTPROC, glTexSubImage2DEXT);
	return true;
#endif //GL_EXT_subtexture
	return false;
}

static bool Load_GL_EXT_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture
	if(reg->QueryGLExtension("GL_EXT_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_texture
	return false;
}

static bool Load_GL_EXT_texture3D(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture3D
	if(reg->QueryGLExtension("GL_EXT_texture3D") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXIMAGE3DEXTPROC, glTexImage3DEXT);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE3DEXTPROC, glTexSubImage3DEXT);
	return true;
#endif //GL_EXT_texture3D
	return false;
}

static bool Load_GL_EXT_texture_compression_s3tc(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_compression_s3tc
	if(reg->QueryGLExtension("GL_EXT_texture_compression_s3tc") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_compression_s3tc
	return false;
}

static bool Load_GL_EXT_texture_cube_map(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_cube_map
	if(reg->QueryGLExtension("GL_EXT_texture_cube_map") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_cube_map
	return false;
}

static bool Load_GL_EXT_texture_env_add(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_add
	if(reg->QueryGLExtension("GL_EXT_texture_env_add") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_add
	return false;
}

static bool Load_GL_EXT_texture_env_combine(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_combine
	if(reg->QueryGLExtension("GL_EXT_texture_env_combine") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_combine
	return false;
}

static bool Load_GL_EXT_texture_env_dot3(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_dot3
	if(reg->QueryGLExtension("GL_EXT_texture_env_dot3") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_dot3
	return false;
}

static bool Load_GL_EXT_texture_filter_anisotropic(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_filter_anisotropic
	if(reg->QueryGLExtension("GL_EXT_texture_filter_anisotropic") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_filter_anisotropic
	return false;
}

static bool Load_GL_EXT_texture_lod_bias(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_lod_bias
	if(reg->QueryGLExtension("GL_EXT_texture_lod_bias") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_lod_bias
	return false;
}

static bool Load_GL_EXT_texture_object(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_object
	if(reg->QueryGLExtension("GL_EXT_texture_object") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLARETEXTURESRESIDENTEXTPROC, glAreTexturesResidentEXT);
	GET_PROC_ADDRESS(PFNGLBINDTEXTUREEXTPROC, glBindTextureEXT);
	GET_PROC_ADDRESS(PFNGLDELETETEXTURESEXTPROC, glDeleteTexturesEXT);
	GET_PROC_ADDRESS(PFNGLGENTEXTURESEXTPROC, glGenTexturesEXT);
	GET_PROC_ADDRESS(PFNGLISTEXTUREEXTPROC, glIsTextureEXT);
	GET_PROC_ADDRESS(PFNGLPRIORITIZETEXTURESEXTPROC, glPrioritizeTexturesEXT);
	return true;
#endif //GL_EXT_texture_object
	return false;
}

static bool Load_GL_EXT_texture_perturb_normal(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_perturb_normal
	if(reg->QueryGLExtension("GL_EXT_texture_perturb_normal") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXTURENORMALEXTPROC, glTextureNormalEXT);
	return true;
#endif //GL_EXT_texture_perturb_normal
	return false;
}

static bool Load_GL_EXT_vertex_array(GLExtensionReg *reg)
{
#ifdef GL_EXT_vertex_array
	if(reg->QueryGLExtension("GL_EXT_vertex_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLARRAYELEMENTEXTPROC, glArrayElementEXT);
	GET_PROC_ADDRESS(PFNGLCOLORPOINTEREXTPROC, glColorPointerEXT);
	GET_PROC_ADDRESS(PFNGLDRAWARRAYSEXTPROC, glDrawArraysEXT);
	GET_PROC_ADDRESS(PFNGLEDGEFLAGPOINTEREXTPROC, glEdgeFlagPointerEXT);
	GET_PROC_ADDRESS(PFNGLGETPOINTERVEXTPROC, glGetPointervEXT);
	GET_PROC_ADDRESS(PFNGLINDEXPOINTEREXTPROC, glIndexPointerEXT);
	GET_PROC_ADDRESS(PFNGLNORMALPOINTEREXTPROC, glNormalPointerEXT);
	GET_PROC_ADDRESS(PFNGLTEXCOORDPOINTEREXTPROC, glTexCoordPointerEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXPOINTEREXTPROC, glVertexPointerEXT);
	return true;
#endif //GL_EXT_vertex_array
	return false;
}

static bool Load_GL_EXT_vertex_shader(GLExtensionReg *reg)
{
#ifdef GL_EXT_vertex_shader
	if(reg->QueryGLExtension("GL_EXT_vertex_shader") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBEGINVERTEXSHADEREXTPROC, glBeginVertexShaderEXT);
	GET_PROC_ADDRESS(PFNGLENDVERTEXSHADEREXTPROC, glEndVertexShaderEXT);
	GET_PROC_ADDRESS(PFNGLBINDVERTEXSHADEREXTPROC, glBindVertexShaderEXT);
	GET_PROC_ADDRESS(PFNGLGENVERTEXSHADERSEXTPROC, glGenVertexShadersEXT);
	GET_PROC_ADDRESS(PFNGLDELETEVERTEXSHADEREXTPROC, glDeleteVertexShaderEXT);
	GET_PROC_ADDRESS(PFNGLSHADEROP1EXTPROC, glShaderOp1EXT);
	GET_PROC_ADDRESS(PFNGLSHADEROP2EXTPROC, glShaderOp2EXT);
	GET_PROC_ADDRESS(PFNGLSHADEROP3EXTPROC, glShaderOp3EXT);
	GET_PROC_ADDRESS(PFNGLSWIZZLEEXTPROC, glSwizzleEXT);
	GET_PROC_ADDRESS(PFNGLWRITEMASKEXTPROC, glWriteMaskEXT);
	GET_PROC_ADDRESS(PFNGLINSERTCOMPONENTEXTPROC, glInsertComponentEXT);
	GET_PROC_ADDRESS(PFNGLEXTRACTCOMPONENTEXTPROC, glExtractComponentEXT);
	GET_PROC_ADDRESS(PFNGLGENSYMBOLSEXTPROC, glGenSymbolsEXT);
	GET_PROC_ADDRESS(PFNGLSETINVARIANTEXTPROC, glSetInvariantEXT);
	GET_PROC_ADDRESS(PFNGLSETLOCALCONSTANTEXTPROC, glSetLocalConstantEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTBVEXTPROC, glVariantbvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTSVEXTPROC, glVariantsvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTIVEXTPROC, glVariantivEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTFVEXTPROC, glVariantfvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTDVEXTPROC, glVariantdvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTUBVEXTPROC, glVariantubvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTUSVEXTPROC, glVariantusvEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTUIVEXTPROC, glVariantuivEXT);
	GET_PROC_ADDRESS(PFNGLVARIANTPOINTEREXTPROC, glVariantPointerEXT);
	GET_PROC_ADDRESS(PFNGLENABLEVARIANTCLIENTSTATEEXTPROC, glEnableVariantClientStateEXT);
	GET_PROC_ADDRESS(PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC, glDisableVariantClientStateEXT);
	GET_PROC_ADDRESS(PFNGLBINDLIGHTPARAMETEREXTPROC, glBindLightParameterEXT);
	GET_PROC_ADDRESS(PFNGLBINDMATERIALPARAMETEREXTPROC, glBindMaterialParameterEXT);
	GET_PROC_ADDRESS(PFNGLBINDTEXGENPARAMETEREXTPROC, glBindTexGenParameterEXT);
	GET_PROC_ADDRESS(PFNGLBINDTEXTUREUNITPARAMETEREXTPROC, glBindTextureUnitParameterEXT);
	GET_PROC_ADDRESS(PFNGLBINDPARAMETEREXTPROC, glBindParameterEXT);
	GET_PROC_ADDRESS(PFNGLISVARIANTENABLEDEXTPROC, glIsVariantEnabledEXT);
	GET_PROC_ADDRESS(PFNGLGETVARIANTBOOLEANVEXTPROC, glGetVariantBooleanvEXT);
	GET_PROC_ADDRESS(PFNGLGETVARIANTINTEGERVEXTPROC, glGetVariantIntegervEXT);
	GET_PROC_ADDRESS(PFNGLGETVARIANTFLOATVEXTPROC, glGetVariantFloatvEXT);
	GET_PROC_ADDRESS(PFNGLGETVARIANTPOINTERVEXTPROC, glGetVariantPointervEXT);
	GET_PROC_ADDRESS(PFNGLGETINVARIANTBOOLEANVEXTPROC, glGetInvariantBooleanvEXT);
	GET_PROC_ADDRESS(PFNGLGETINVARIANTINTEGERVEXTPROC, glGetInvariantIntegervEXT);
	GET_PROC_ADDRESS(PFNGLGETINVARIANTFLOATVEXTPROC, glGetInvariantFloatvEXT);
	GET_PROC_ADDRESS(PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC, glGetLocalConstantBooleanvEXT);
	GET_PROC_ADDRESS(PFNGLGETLOCALCONSTANTINTEGERVEXTPROC, glGetLocalConstantIntegervEXT);
	GET_PROC_ADDRESS(PFNGLGETLOCALCONSTANTFLOATVEXTPROC, glGetLocalConstantFloatvEXT);
	return true;
#endif //GL_EXT_vertex_shader
	return false;
}

static bool Load_GL_EXT_vertex_weighting(GLExtensionReg *reg)
{
#ifdef GL_EXT_vertex_weighting
	if(reg->QueryGLExtension("GL_EXT_vertex_weighting") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTFEXTPROC, glVertexWeightfEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTFVEXTPROC, glVertexWeightfvEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTPOINTEREXTPROC, glVertexWeightPointerEXT);
	return true;
#endif //GL_EXT_vertex_weighting
	return false;
}

static bool Load_GL_FfdMaskSGIX(GLExtensionReg *reg)
{
#ifdef GL_FfdMaskSGIX
	if(reg->QueryGLExtension("GL_FfdMaskSGIX") == 0)
		return false;
	return true;
#endif //GL_FfdMaskSGIX
	return false;
}

static bool Load_GL_HP_convolution_border_modes(GLExtensionReg *reg)
{
#ifdef GL_HP_convolution_border_modes
	if(reg->QueryGLExtension("GL_HP_convolution_border_modes") == 0)
		return false;
	return true;
#endif //GL_HP_convolution_border_modes
	return false;
}

static bool Load_GL_HP_image_transform(GLExtensionReg *reg)
{
#ifdef GL_HP_image_transform
	if(reg->QueryGLExtension("GL_HP_image_transform") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLIMAGETRANSFORMPARAMETERIHPPROC, glImageTransformParameteriHP);
	GET_PROC_ADDRESS(PFNGLIMAGETRANSFORMPARAMETERFHPPROC, glImageTransformParameterfHP);
	GET_PROC_ADDRESS(PFNGLIMAGETRANSFORMPARAMETERIVHPPROC, glImageTransformParameterivHP);
	GET_PROC_ADDRESS(PFNGLIMAGETRANSFORMPARAMETERFVHPPROC, glImageTransformParameterfvHP);
	GET_PROC_ADDRESS(PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC, glGetImageTransformParameterivHP);
	GET_PROC_ADDRESS(PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC, glGetImageTransformParameterfvHP);
	return true;
#endif //GL_HP_image_transform
	return false;
}

static bool Load_GL_HP_occlusion_test(GLExtensionReg *reg)
{
#ifdef GL_HP_occlusion_test
	if(reg->QueryGLExtension("GL_HP_occlusion_test") == 0)
		return false;
	return true;
#endif //GL_HP_occlusion_test
	return false;
}

static bool Load_GL_HP_texture_lighting(GLExtensionReg *reg)
{
#ifdef GL_HP_texture_lighting
	if(reg->QueryGLExtension("GL_HP_texture_lighting") == 0)
		return false;
	return true;
#endif //GL_HP_texture_lighting
	return false;
}

static bool Load_GL_IBM_cull_vertex(GLExtensionReg *reg)
{
#ifdef GL_IBM_cull_vertex
	if(reg->QueryGLExtension("GL_IBM_cull_vertex") == 0)
		return false;
	return true;
#endif //GL_IBM_cull_vertex
	return false;
}

static bool Load_GL_IBM_multimode_draw_arrays(GLExtensionReg *reg)
{
#ifdef GL_IBM_multimode_draw_arrays
	if(reg->QueryGLExtension("GL_IBM_multimode_draw_arrays") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLMULTIMODEDRAWARRAYSIBMPROC, glMultiModeDrawArraysIBM);
	GET_PROC_ADDRESS(PFNGLMULTIMODEDRAWELEMENTSIBMPROC, glMultiModeDrawElementsIBM);
	return true;
#endif //GL_IBM_multimode_draw_arrays
	return false;
}

static bool Load_GL_IBM_rasterpos_clip(GLExtensionReg *reg)
{
#ifdef GL_IBM_rasterpos_clip
	if(reg->QueryGLExtension("GL_IBM_rasterpos_clip") == 0)
		return false;
	return true;
#endif //GL_IBM_rasterpos_clip
	return false;
}

static bool Load_GL_IBM_texture_mirrored_repeat(GLExtensionReg *reg)
{
#ifdef GL_IBM_texture_mirrored_repeat
	if(reg->QueryGLExtension("GL_IBM_texture_mirrored_repeat") == 0)
		return false;
	return true;
#endif //GL_IBM_texture_mirrored_repeat
	return false;
}

static bool Load_GL_IBM_vertex_array_lists(GLExtensionReg *reg)
{
#ifdef GL_IBM_vertex_array_lists
	if(reg->QueryGLExtension("GL_IBM_vertex_array_lists") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLORPOINTERLISTIBMPROC, glColorPointerListIBM);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLORPOINTERLISTIBMPROC, glSecondaryColorPointerListIBM);
	GET_PROC_ADDRESS(PFNGLEDGEFLAGPOINTERLISTIBMPROC, glEdgeFlagPointerListIBM);
	GET_PROC_ADDRESS(PFNGLFOGCOORDPOINTERLISTIBMPROC, glFogCoordPointerListIBM);
	GET_PROC_ADDRESS(PFNGLINDEXPOINTERLISTIBMPROC, glIndexPointerListIBM);
	GET_PROC_ADDRESS(PFNGLNORMALPOINTERLISTIBMPROC, glNormalPointerListIBM);
	GET_PROC_ADDRESS(PFNGLTEXCOORDPOINTERLISTIBMPROC, glTexCoordPointerListIBM);
	GET_PROC_ADDRESS(PFNGLVERTEXPOINTERLISTIBMPROC, glVertexPointerListIBM);
	return true;
#endif //GL_IBM_vertex_array_lists
	return false;
}

static bool Load_GL_INGR_color_clamp(GLExtensionReg *reg)
{
#ifdef GL_INGR_color_clamp
	if(reg->QueryGLExtension("GL_INGR_color_clamp") == 0)
		return false;
	return true;
#endif //GL_INGR_color_clamp
	return false;
}

static bool Load_GL_INGR_interlace_read(GLExtensionReg *reg)
{
#ifdef GL_INGR_interlace_read
	if(reg->QueryGLExtension("GL_INGR_interlace_read") == 0)
		return false;
	return true;
#endif //GL_INGR_interlace_read
	return false;
}

static bool Load_GL_INGR_palette_buffer(GLExtensionReg *reg)
{
#ifdef GL_INGR_palette_buffer
	if(reg->QueryGLExtension("GL_INGR_palette_buffer") == 0)
		return false;
	return true;
#endif //GL_INGR_palette_buffer
	return false;
}

static bool Load_GL_INTEL_parallel_arrays(GLExtensionReg *reg)
{
#ifdef GL_INTEL_parallel_arrays
	if(reg->QueryGLExtension("GL_INTEL_parallel_arrays") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXPOINTERVINTELPROC, glVertexPointervINTEL);
	GET_PROC_ADDRESS(PFNGLNORMALPOINTERVINTELPROC, glNormalPointervINTEL);
	GET_PROC_ADDRESS(PFNGLCOLORPOINTERVINTELPROC, glColorPointervINTEL);
	GET_PROC_ADDRESS(PFNGLTEXCOORDPOINTERVINTELPROC, glTexCoordPointervINTEL);
	return true;
#endif //GL_INTEL_parallel_arrays
	return false;
}

static bool Load_GL_INTEL_texture_scissor(GLExtensionReg *reg)
{
#ifdef GL_INTEL_texture_scissor
	if(reg->QueryGLExtension("GL_INTEL_texture_scissor") == 0)
		return false;
	return true;
#endif //GL_INTEL_texture_scissor
	return false;
}

static bool Load_GL_MESA_resize_buffers(GLExtensionReg *reg)
{
#ifdef GL_MESA_resize_buffers
	if(reg->QueryGLExtension("GL_MESA_resize_buffers") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLRESIZEBUFFERSMESAPROC, glResizeBuffersMESA);
	return true;
#endif //GL_MESA_resize_buffers
	return false;
}

static bool Load_GL_MESA_window_pos(GLExtensionReg *reg)
{
#ifdef GL_MESA_window_pos
	if(reg->QueryGLExtension("GL_MESA_window_pos") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DMESAPROC, glWindowPos2dMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DVMESAPROC, glWindowPos2dvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FMESAPROC, glWindowPos2fMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FVMESAPROC, glWindowPos2fvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IMESAPROC, glWindowPos2iMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IVMESAPROC, glWindowPos2ivMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SMESAPROC, glWindowPos2sMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SVMESAPROC, glWindowPos2svMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DMESAPROC, glWindowPos3dMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DVMESAPROC, glWindowPos3dvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FMESAPROC, glWindowPos3fMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FVMESAPROC, glWindowPos3fvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IMESAPROC, glWindowPos3iMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IVMESAPROC, glWindowPos3ivMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SMESAPROC, glWindowPos3sMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SVMESAPROC, glWindowPos3svMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4DMESAPROC, glWindowPos4dMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4DVMESAPROC, glWindowPos4dvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4FMESAPROC, glWindowPos4fMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4FVMESAPROC, glWindowPos4fvMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4IMESAPROC, glWindowPos4iMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4IVMESAPROC, glWindowPos4ivMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4SMESAPROC, glWindowPos4sMESA);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS4SVMESAPROC, glWindowPos4svMESA);
	return true;
#endif //GL_MESA_window_pos
	return false;
}

static bool Load_GL_NV_blend_square(GLExtensionReg *reg)
{
#ifdef GL_NV_blend_square
	if(reg->QueryGLExtension("GL_NV_blend_square") == 0)
		return false;
	return true;
#endif //GL_NV_blend_square
	return false;
}

static bool Load_GL_NV_copy_depth_to_color(GLExtensionReg *reg)
{
#ifdef GL_NV_copy_depth_to_color
	if(reg->QueryGLExtension("GL_NV_copy_depth_to_color") == 0)
		return false;
	return true;
#endif //GL_NV_copy_depth_to_color
	return false;
}

static bool Load_GL_NV_depth_clamp(GLExtensionReg *reg)
{
#ifdef GL_NV_depth_clamp
	if(reg->QueryGLExtension("GL_NV_depth_clamp") == 0)
		return false;
	return true;
#endif //GL_NV_depth_clamp
	return false;
}

static bool Load_GL_NV_evaluators(GLExtensionReg *reg)
{
#ifdef GL_NV_evaluators
	if(reg->QueryGLExtension("GL_NV_evaluators") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLMAPCONTROLPOINTSNVPROC, glMapControlPointsNV);
	GET_PROC_ADDRESS(PFNGLMAPPARAMETERIVNVPROC, glMapParameterivNV);
	GET_PROC_ADDRESS(PFNGLMAPPARAMETERFVNVPROC, glMapParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETMAPCONTROLPOINTSNVPROC, glGetMapControlPointsNV);
	GET_PROC_ADDRESS(PFNGLGETMAPPARAMETERIVNVPROC, glGetMapParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETMAPPARAMETERFVNVPROC, glGetMapParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETMAPATTRIBPARAMETERIVNVPROC, glGetMapAttribParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETMAPATTRIBPARAMETERFVNVPROC, glGetMapAttribParameterfvNV);
	GET_PROC_ADDRESS(PFNGLEVALMAPSNVPROC, glEvalMapsNV);
	return true;
#endif //GL_NV_evaluators
	return false;
}

static bool Load_GL_NV_fence(GLExtensionReg *reg)
{
#ifdef GL_NV_fence
	if(reg->QueryGLExtension("GL_NV_fence") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDELETEFENCESNVPROC, glDeleteFencesNV);
	GET_PROC_ADDRESS(PFNGLGENFENCESNVPROC, glGenFencesNV);
	GET_PROC_ADDRESS(PFNGLISFENCENVPROC, glIsFenceNV);
	GET_PROC_ADDRESS(PFNGLTESTFENCENVPROC, glTestFenceNV);
	GET_PROC_ADDRESS(PFNGLGETFENCEIVNVPROC, glGetFenceivNV);
	GET_PROC_ADDRESS(PFNGLFINISHFENCENVPROC, glFinishFenceNV);
	GET_PROC_ADDRESS(PFNGLSETFENCENVPROC, glSetFenceNV);
	return true;
#endif //GL_NV_fence
	return false;
}

static bool Load_GL_NV_fog_distance(GLExtensionReg *reg)
{
#ifdef GL_NV_fog_distance
	if(reg->QueryGLExtension("GL_NV_fog_distance") == 0)
		return false;
	return true;
#endif //GL_NV_fog_distance
	return false;
}

static bool Load_GL_NV_light_max_exponent(GLExtensionReg *reg)
{
#ifdef GL_NV_light_max_exponent
	if(reg->QueryGLExtension("GL_NV_light_max_exponent") == 0)
		return false;
	return true;
#endif //GL_NV_light_max_exponent
	return false;
}

static bool Load_GL_NV_multisample_filter_hint(GLExtensionReg *reg)
{
#ifdef GL_NV_multisample_filter_hint
	if(reg->QueryGLExtension("GL_NV_multisample_filter_hint") == 0)
		return false;
	return true;
#endif //GL_NV_multisample_filter_hint
	return false;
}

static bool Load_GL_NV_occlusion_query(GLExtensionReg *reg)
{
#ifdef GL_NV_occlusion_query
	if(reg->QueryGLExtension("GL_NV_occlusion_query") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGENOCCLUSIONQUERIESNVPROC, glGenOcclusionQueriesNV);
	GET_PROC_ADDRESS(PFNGLDELETEOCCLUSIONQUERIESNVPROC, glDeleteOcclusionQueriesNV);
	GET_PROC_ADDRESS(PFNGLISOCCLUSIONQUERYNVPROC, glIsOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLBEGINOCCLUSIONQUERYNVPROC, glBeginOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLENDOCCLUSIONQUERYNVPROC, glEndOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLGETOCCLUSIONQUERYIVNVPROC, glGetOcclusionQueryivNV);
	GET_PROC_ADDRESS(PFNGLGETOCCLUSIONQUERYUIVNVPROC, glGetOcclusionQueryuivNV);
	return true;
#endif //GL_NV_occlusion_query
	return false;
}

static bool Load_GL_NV_packed_depth_stencil(GLExtensionReg *reg)
{
#ifdef GL_NV_packed_depth_stencil
	if(reg->QueryGLExtension("GL_NV_packed_depth_stencil") == 0)
		return false;
	return true;
#endif //GL_NV_packed_depth_stencil
	return false;
}

static bool Load_GL_NV_point_sprite(GLExtensionReg *reg)
{
#ifdef GL_NV_point_sprite
	if(reg->QueryGLExtension("GL_NV_point_sprite") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERINVPROC, glPointParameteriNV);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERIVNVPROC, glPointParameterivNV);
	return true;
#endif //GL_NV_point_sprite
	return false;
}

static bool Load_GL_NV_register_combiners(GLExtensionReg *reg)
{
#ifdef GL_NV_register_combiners
	if(reg->QueryGLExtension("GL_NV_register_combiners") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERFVNVPROC, glCombinerParameterfvNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERFNVPROC, glCombinerParameterfNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERIVNVPROC, glCombinerParameterivNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERINVPROC, glCombinerParameteriNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERINPUTNVPROC, glCombinerInputNV);
	GET_PROC_ADDRESS(PFNGLCOMBINEROUTPUTNVPROC, glCombinerOutputNV);
	GET_PROC_ADDRESS(PFNGLFINALCOMBINERINPUTNVPROC, glFinalCombinerInputNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC, glGetCombinerInputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC, glGetCombinerInputParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC, glGetCombinerOutputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC, glGetCombinerOutputParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC, glGetFinalCombinerInputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC, glGetFinalCombinerInputParameterivNV);
	return true;
#endif //GL_NV_register_combiners
	return false;
}

static bool Load_GL_NV_register_combiners2(GLExtensionReg *reg)
{
#ifdef GL_NV_register_combiners2
	if(reg->QueryGLExtension("GL_NV_register_combiners2") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMBINERSTAGEPARAMETERFVNVPROC, glCombinerStageParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC, glGetCombinerStageParameterfvNV);
	return true;
#endif //GL_NV_register_combiners2
	return false;
}

static bool Load_GL_NV_texgen_emboss(GLExtensionReg *reg)
{
#ifdef GL_NV_texgen_emboss
	if(reg->QueryGLExtension("GL_NV_texgen_emboss") == 0)
		return false;
	return true;
#endif //GL_NV_texgen_emboss
	return false;
}

static bool Load_GL_NV_texgen_reflection(GLExtensionReg *reg)
{
#ifdef GL_NV_texgen_reflection
	if(reg->QueryGLExtension("GL_NV_texgen_reflection") == 0)
		return false;
	return true;
#endif //GL_NV_texgen_reflection
	return false;
}

static bool Load_GL_NV_texture_compression_vtc(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_compression_vtc
	if(reg->QueryGLExtension("GL_NV_texture_compression_vtc") == 0)
		return false;
	return true;
#endif //GL_NV_texture_compression_vtc
	return false;
}

static bool Load_GL_NV_texture_env_combine4(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_env_combine4
	if(reg->QueryGLExtension("GL_NV_texture_env_combine4") == 0)
		return false;
	return true;
#endif //GL_NV_texture_env_combine4
	return false;
}

static bool Load_GL_NV_texture_rectangle(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_rectangle
	if(reg->QueryGLExtension("GL_NV_texture_rectangle") == 0)
		return false;
	return true;
#endif //GL_NV_texture_rectangle
	return false;
}

static bool Load_GL_NV_texture_shader(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader
	if(reg->QueryGLExtension("GL_NV_texture_shader") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader
	return false;
}

static bool Load_GL_NV_texture_shader2(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader2
	if(reg->QueryGLExtension("GL_NV_texture_shader2") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader2
	return false;
}

static bool Load_GL_NV_texture_shader3(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader3
	if(reg->QueryGLExtension("GL_NV_texture_shader3") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader3
	return false;
}

static bool Load_GL_NV_vertex_array_range(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_array_range
	if(reg->QueryGLExtension("GL_NV_vertex_array_range") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFLUSHVERTEXARRAYRANGENVPROC, glFlushVertexArrayRangeNV);
	GET_PROC_ADDRESS(PFNGLVERTEXARRAYRANGENVPROC, glVertexArrayRangeNV);
	return true;
#endif //GL_NV_vertex_array_range
	return false;
}

static bool Load_GL_NV_vertex_array_range2(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_array_range2
	if(reg->QueryGLExtension("GL_NV_vertex_array_range2") == 0)
		return false;
	return true;
#endif //GL_NV_vertex_array_range2
	return false;
}

static bool Load_GL_NV_vertex_program(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_program
	if(reg->QueryGLExtension("GL_NV_vertex_program") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLAREPROGRAMSRESIDENTNVPROC, glAreProgramsResidentNV);
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMNVPROC, glBindProgramNV);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSNVPROC, glDeleteProgramsNV);
	GET_PROC_ADDRESS(PFNGLEXECUTEPROGRAMNVPROC, glExecuteProgramNV);
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSNVPROC, glGenProgramsNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMPARAMETERDVNVPROC, glGetProgramParameterdvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMPARAMETERFVNVPROC, glGetProgramParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMIVNVPROC, glGetProgramivNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMSTRINGNVPROC, glGetProgramStringNV);
	GET_PROC_ADDRESS(PFNGLGETTRACKMATRIXIVNVPROC, glGetTrackMatrixivNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBDVNVPROC, glGetVertexAttribdvNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBFVNVPROC, glGetVertexAttribfvNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBIVNVPROC, glGetVertexAttribivNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBPOINTERVNVPROC, glGetVertexAttribPointervNV);
	GET_PROC_ADDRESS(PFNGLISPROGRAMNVPROC, glIsProgramNV);
	GET_PROC_ADDRESS(PFNGLLOADPROGRAMNVPROC, glLoadProgramNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4DNVPROC, glProgramParameter4dNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4DVNVPROC, glProgramParameter4dvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4FNVPROC, glProgramParameter4fNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4FVNVPROC, glProgramParameter4fvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETERS4DVNVPROC, glProgramParameters4dvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETERS4FVNVPROC, glProgramParameters4fvNV);
	GET_PROC_ADDRESS(PFNGLREQUESTRESIDENTPROGRAMSNVPROC, glRequestResidentProgramsNV);
	GET_PROC_ADDRESS(PFNGLTRACKMATRIXNVPROC, glTrackMatrixNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBPOINTERNVPROC, glVertexAttribPointerNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DNVPROC, glVertexAttrib1dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DVNVPROC, glVertexAttrib1dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FNVPROC, glVertexAttrib1fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FVNVPROC, glVertexAttrib1fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SNVPROC, glVertexAttrib1sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SVNVPROC, glVertexAttrib1svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DNVPROC, glVertexAttrib2dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DVNVPROC, glVertexAttrib2dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FNVPROC, glVertexAttrib2fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FVNVPROC, glVertexAttrib2fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SNVPROC, glVertexAttrib2sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SVNVPROC, glVertexAttrib2svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DNVPROC, glVertexAttrib3dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DVNVPROC, glVertexAttrib3dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FNVPROC, glVertexAttrib3fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FVNVPROC, glVertexAttrib3fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SNVPROC, glVertexAttrib3sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SVNVPROC, glVertexAttrib3svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DNVPROC, glVertexAttrib4dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DVNVPROC, glVertexAttrib4dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FNVPROC, glVertexAttrib4fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FVNVPROC, glVertexAttrib4fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SNVPROC, glVertexAttrib4sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SVNVPROC, glVertexAttrib4svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBNVPROC, glVertexAttrib4ubNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBVNVPROC, glVertexAttrib4ubvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1DVNVPROC, glVertexAttribs1dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1FVNVPROC, glVertexAttribs1fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1SVNVPROC, glVertexAttribs1svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2DVNVPROC, glVertexAttribs2dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2FVNVPROC, glVertexAttribs2fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2SVNVPROC, glVertexAttribs2svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3DVNVPROC, glVertexAttribs3dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3FVNVPROC, glVertexAttribs3fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3SVNVPROC, glVertexAttribs3svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4DVNVPROC, glVertexAttribs4dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4FVNVPROC, glVertexAttribs4fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4SVNVPROC, glVertexAttribs4svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4UBVNVPROC, glVertexAttribs4ubvNV);
	return true;
#endif //GL_NV_vertex_program
	return false;
}

static bool Load_GL_NV_vertex_program1_1(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_program1_1
	if(reg->QueryGLExtension("GL_NV_vertex_program1_1") == 0)
		return false;
	return true;
#endif //GL_NV_vertex_program1_1
	return false;
}

static bool Load_GL_OML_interlace(GLExtensionReg *reg)
{
#ifdef GL_OML_interlace
	if(reg->QueryGLExtension("GL_OML_interlace") == 0)
		return false;
	return true;
#endif //GL_OML_interlace
	return false;
}

static bool Load_GL_OML_resample(GLExtensionReg *reg)
{
#ifdef GL_OML_resample
	if(reg->QueryGLExtension("GL_OML_resample") == 0)
		return false;
	return true;
#endif //GL_OML_resample
	return false;
}

static bool Load_GL_OML_subsample(GLExtensionReg *reg)
{
#ifdef GL_OML_subsample
	if(reg->QueryGLExtension("GL_OML_subsample") == 0)
		return false;
	return true;
#endif //GL_OML_subsample
	return false;
}

static bool Load_GL_PGI_misc_hints(GLExtensionReg *reg)
{
#ifdef GL_PGI_misc_hints
	if(reg->QueryGLExtension("GL_PGI_misc_hints") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLHINTPGIPROC, glHintPGI);
	return true;
#endif //GL_PGI_misc_hints
	return false;
}

static bool Load_GL_PGI_vertex_hints(GLExtensionReg *reg)
{
#ifdef GL_PGI_vertex_hints
	if(reg->QueryGLExtension("GL_PGI_vertex_hints") == 0)
		return false;
	return true;
#endif //GL_PGI_vertex_hints
	return false;
}

static bool Load_GL_REND_screen_coordinates(GLExtensionReg *reg)
{
#ifdef GL_REND_screen_coordinates
	if(reg->QueryGLExtension("GL_REND_screen_coordinates") == 0)
		return false;
	return true;
#endif //GL_REND_screen_coordinates
	return false;
}

static bool Load_GL_SGIS_detail_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_detail_texture
	if(reg->QueryGLExtension("GL_SGIS_detail_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDETAILTEXFUNCSGISPROC, glDetailTexFuncSGIS);
	GET_PROC_ADDRESS(PFNGLGETDETAILTEXFUNCSGISPROC, glGetDetailTexFuncSGIS);
	return true;
#endif //GL_SGIS_detail_texture
	return false;
}

static bool Load_GL_SGIS_fog_function(GLExtensionReg *reg)
{
#ifdef GL_SGIS_fog_function
	if(reg->QueryGLExtension("GL_SGIS_fog_function") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFOGFUNCSGISPROC, glFogFuncSGIS);
	GET_PROC_ADDRESS(PFNGLGETFOGFUNCSGISPROC, glGetFogFuncSGIS);
	return true;
#endif //GL_SGIS_fog_function
	return false;
}

static bool Load_GL_SGIS_generate_mipmap(GLExtensionReg *reg)
{
#ifdef GL_SGIS_generate_mipmap
	if(reg->QueryGLExtension("GL_SGIS_generate_mipmap") == 0)
		return false;
	return true;
#endif //GL_SGIS_generate_mipmap
	return false;
}

static bool Load_GL_SGIS_multisample(GLExtensionReg *reg)
{
#ifdef GL_SGIS_multisample
	if(reg->QueryGLExtension("GL_SGIS_multisample") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSAMPLEMASKSGISPROC, glSampleMaskSGIS);
	GET_PROC_ADDRESS(PFNGLSAMPLEPATTERNSGISPROC, glSamplePatternSGIS);
	return true;
#endif //GL_SGIS_multisample
	return false;
}

static bool Load_GL_SGIS_pixel_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_pixel_texture
	if(reg->QueryGLExtension("GL_SGIS_pixel_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPIXELTEXGENPARAMETERISGISPROC, glPixelTexGenParameteriSGIS);
	GET_PROC_ADDRESS(PFNGLPIXELTEXGENPARAMETERIVSGISPROC, glPixelTexGenParameterivSGIS);
	GET_PROC_ADDRESS(PFNGLPIXELTEXGENPARAMETERFSGISPROC, glPixelTexGenParameterfSGIS);
	GET_PROC_ADDRESS(PFNGLPIXELTEXGENPARAMETERFVSGISPROC, glPixelTexGenParameterfvSGIS);
	GET_PROC_ADDRESS(PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC, glGetPixelTexGenParameterivSGIS);
	GET_PROC_ADDRESS(PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC, glGetPixelTexGenParameterfvSGIS);
	return true;
#endif //GL_SGIS_pixel_texture
	return false;
}

static bool Load_GL_SGIS_point_line_texgen(GLExtensionReg *reg)
{
#ifdef GL_SGIS_point_line_texgen
	if(reg->QueryGLExtension("GL_SGIS_point_line_texgen") == 0)
		return false;
	return true;
#endif //GL_SGIS_point_line_texgen
	return false;
}

static bool Load_GL_SGIS_point_parameters(GLExtensionReg *reg)
{
#ifdef GL_SGIS_point_parameters
	if(reg->QueryGLExtension("GL_SGIS_point_parameters") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFSGISPROC, glPointParameterfSGIS);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVSGISPROC, glPointParameterfvSGIS);
	return true;
#endif //GL_SGIS_point_parameters
	return false;
}

static bool Load_GL_SGIS_sharpen_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_sharpen_texture
	if(reg->QueryGLExtension("GL_SGIS_sharpen_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSHARPENTEXFUNCSGISPROC, glSharpenTexFuncSGIS);
	GET_PROC_ADDRESS(PFNGLGETSHARPENTEXFUNCSGISPROC, glGetSharpenTexFuncSGIS);
	return true;
#endif //GL_SGIS_sharpen_texture
	return false;
}

static bool Load_GL_SGIS_texture4D(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture4D
	if(reg->QueryGLExtension("GL_SGIS_texture4D") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXIMAGE4DSGISPROC, glTexImage4DSGIS);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE4DSGISPROC, glTexSubImage4DSGIS);
	return true;
#endif //GL_SGIS_texture4D
	return false;
}

static bool Load_GL_SGIS_texture_border_clamp(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_border_clamp
	if(reg->QueryGLExtension("GL_SGIS_texture_border_clamp") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_border_clamp
	return false;
}

static bool Load_GL_SGIS_texture_color_mask(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_color_mask
	if(reg->QueryGLExtension("GL_SGIS_texture_color_mask") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXTURECOLORMASKSGISPROC, glTextureColorMaskSGIS);
	return true;
#endif //GL_SGIS_texture_color_mask
	return false;
}

static bool Load_GL_SGIS_texture_edge_clamp(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_edge_clamp
	if(reg->QueryGLExtension("GL_SGIS_texture_edge_clamp") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_edge_clamp
	return false;
}

static bool Load_GL_SGIS_texture_filter4(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_filter4
	if(reg->QueryGLExtension("GL_SGIS_texture_filter4") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGETTEXFILTERFUNCSGISPROC, glGetTexFilterFuncSGIS);
	GET_PROC_ADDRESS(PFNGLTEXFILTERFUNCSGISPROC, glTexFilterFuncSGIS);
	return true;
#endif //GL_SGIS_texture_filter4
	return false;
}

static bool Load_GL_SGIS_texture_lod(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_lod
	if(reg->QueryGLExtension("GL_SGIS_texture_lod") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_lod
	return false;
}

static bool Load_GL_SGIS_texture_select(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_select
	if(reg->QueryGLExtension("GL_SGIS_texture_select") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_select
	return false;
}

static bool Load_GL_SGIX_async(GLExtensionReg *reg)
{
#ifdef GL_SGIX_async
	if(reg->QueryGLExtension("GL_SGIX_async") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLASYNCMARKERSGIXPROC, glAsyncMarkerSGIX);
	GET_PROC_ADDRESS(PFNGLFINISHASYNCSGIXPROC, glFinishAsyncSGIX);
	GET_PROC_ADDRESS(PFNGLPOLLASYNCSGIXPROC, glPollAsyncSGIX);
	GET_PROC_ADDRESS(PFNGLGENASYNCMARKERSSGIXPROC, glGenAsyncMarkersSGIX);
	GET_PROC_ADDRESS(PFNGLDELETEASYNCMARKERSSGIXPROC, glDeleteAsyncMarkersSGIX);
	GET_PROC_ADDRESS(PFNGLISASYNCMARKERSGIXPROC, glIsAsyncMarkerSGIX);
	return true;
#endif //GL_SGIX_async
	return false;
}

static bool Load_GL_SGIX_async_histogram(GLExtensionReg *reg)
{
#ifdef GL_SGIX_async_histogram
	if(reg->QueryGLExtension("GL_SGIX_async_histogram") == 0)
		return false;
	return true;
#endif //GL_SGIX_async_histogram
	return false;
}

static bool Load_GL_SGIX_async_pixel(GLExtensionReg *reg)
{
#ifdef GL_SGIX_async_pixel
	if(reg->QueryGLExtension("GL_SGIX_async_pixel") == 0)
		return false;
	return true;
#endif //GL_SGIX_async_pixel
	return false;
}

static bool Load_GL_SGIX_blend_alpha_minmax(GLExtensionReg *reg)
{
#ifdef GL_SGIX_blend_alpha_minmax
	if(reg->QueryGLExtension("GL_SGIX_blend_alpha_minmax") == 0)
		return false;
	return true;
#endif //GL_SGIX_blend_alpha_minmax
	return false;
}

static bool Load_GL_SGIX_calligraphic_fragment(GLExtensionReg *reg)
{
#ifdef GL_SGIX_calligraphic_fragment
	if(reg->QueryGLExtension("GL_SGIX_calligraphic_fragment") == 0)
		return false;
	return true;
#endif //GL_SGIX_calligraphic_fragment
	return false;
}

static bool Load_GL_SGIX_clipmap(GLExtensionReg *reg)
{
#ifdef GL_SGIX_clipmap
	if(reg->QueryGLExtension("GL_SGIX_clipmap") == 0)
		return false;
	return true;
#endif //GL_SGIX_clipmap
	return false;
}

static bool Load_GL_SGIX_convolution_accuracy(GLExtensionReg *reg)
{
#ifdef GL_SGIX_convolution_accuracy
	if(reg->QueryGLExtension("GL_SGIX_convolution_accuracy") == 0)
		return false;
	return true;
#endif //GL_SGIX_convolution_accuracy
	return false;
}

static bool Load_GL_SGIX_depth_pass_instrument(GLExtensionReg *reg)
{
#ifdef GL_SGIX_depth_pass_instrument
	if(reg->QueryGLExtension("GL_SGIX_depth_pass_instrument") == 0)
		return false;
	return true;
#endif //GL_SGIX_depth_pass_instrument
	return false;
}

static bool Load_GL_SGIX_depth_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIX_depth_texture
	if(reg->QueryGLExtension("GL_SGIX_depth_texture") == 0)
		return false;
	return true;
#endif //GL_SGIX_depth_texture
	return false;
}

static bool Load_GL_SGIX_flush_raster(GLExtensionReg *reg)
{
#ifdef GL_SGIX_flush_raster
	if(reg->QueryGLExtension("GL_SGIX_flush_raster") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFLUSHRASTERSGIXPROC, glFlushRasterSGIX);
	return true;
#endif //GL_SGIX_flush_raster
	return false;
}

static bool Load_GL_SGIX_fog_offset(GLExtensionReg *reg)
{
#ifdef GL_SGIX_fog_offset
	if(reg->QueryGLExtension("GL_SGIX_fog_offset") == 0)
		return false;
	return true;
#endif //GL_SGIX_fog_offset
	return false;
}

static bool Load_GL_SGIX_fog_scale(GLExtensionReg *reg)
{
#ifdef GL_SGIX_fog_scale
	if(reg->QueryGLExtension("GL_SGIX_fog_scale") == 0)
		return false;
	return true;
#endif //GL_SGIX_fog_scale
	return false;
}

static bool Load_GL_SGIX_fragment_lighting(GLExtensionReg *reg)
{
#ifdef GL_SGIX_fragment_lighting
	if(reg->QueryGLExtension("GL_SGIX_fragment_lighting") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFRAGMENTCOLORMATERIALSGIXPROC, glFragmentColorMaterialSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTFSGIXPROC, glFragmentLightfSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTFVSGIXPROC, glFragmentLightfvSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTISGIXPROC, glFragmentLightiSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTIVSGIXPROC, glFragmentLightivSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTMODELFSGIXPROC, glFragmentLightModelfSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTMODELFVSGIXPROC, glFragmentLightModelfvSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTMODELISGIXPROC, glFragmentLightModeliSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTLIGHTMODELIVSGIXPROC, glFragmentLightModelivSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTMATERIALFSGIXPROC, glFragmentMaterialfSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTMATERIALFVSGIXPROC, glFragmentMaterialfvSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTMATERIALISGIXPROC, glFragmentMaterialiSGIX);
	GET_PROC_ADDRESS(PFNGLFRAGMENTMATERIALIVSGIXPROC, glFragmentMaterialivSGIX);
	GET_PROC_ADDRESS(PFNGLGETFRAGMENTLIGHTFVSGIXPROC, glGetFragmentLightfvSGIX);
	GET_PROC_ADDRESS(PFNGLGETFRAGMENTLIGHTIVSGIXPROC, glGetFragmentLightivSGIX);
	GET_PROC_ADDRESS(PFNGLGETFRAGMENTMATERIALFVSGIXPROC, glGetFragmentMaterialfvSGIX);
	GET_PROC_ADDRESS(PFNGLGETFRAGMENTMATERIALIVSGIXPROC, glGetFragmentMaterialivSGIX);
	GET_PROC_ADDRESS(PFNGLLIGHTENVISGIXPROC, glLightEnviSGIX);
	return true;
#endif //GL_SGIX_fragment_lighting
	return false;
}

static bool Load_GL_SGIX_framezoom(GLExtensionReg *reg)
{
#ifdef GL_SGIX_framezoom
	if(reg->QueryGLExtension("GL_SGIX_framezoom") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFRAMEZOOMSGIXPROC, glFrameZoomSGIX);
	return true;
#endif //GL_SGIX_framezoom
	return false;
}

static bool Load_GL_SGIX_igloo_interface(GLExtensionReg *reg)
{
#ifdef GL_SGIX_igloo_interface
	if(reg->QueryGLExtension("GL_SGIX_igloo_interface") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLIGLOOINTERFACESGIXPROC, glIglooInterfaceSGIX);
	return true;
#endif //GL_SGIX_igloo_interface
	return false;
}

static bool Load_GL_SGIX_impact_pixel_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIX_impact_pixel_texture
	if(reg->QueryGLExtension("GL_SGIX_impact_pixel_texture") == 0)
		return false;
	return true;
#endif //GL_SGIX_impact_pixel_texture
	return false;
}

static bool Load_GL_SGIX_instruments(GLExtensionReg *reg)
{
#ifdef GL_SGIX_instruments
	if(reg->QueryGLExtension("GL_SGIX_instruments") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGETINSTRUMENTSSGIXPROC, glGetInstrumentsSGIX);
	GET_PROC_ADDRESS(PFNGLINSTRUMENTSBUFFERSGIXPROC, glInstrumentsBufferSGIX);
	GET_PROC_ADDRESS(PFNGLPOLLINSTRUMENTSSGIXPROC, glPollInstrumentsSGIX);
	GET_PROC_ADDRESS(PFNGLREADINSTRUMENTSSGIXPROC, glReadInstrumentsSGIX);
	GET_PROC_ADDRESS(PFNGLSTARTINSTRUMENTSSGIXPROC, glStartInstrumentsSGIX);
	GET_PROC_ADDRESS(PFNGLSTOPINSTRUMENTSSGIXPROC, glStopInstrumentsSGIX);
	return true;
#endif //GL_SGIX_instruments
	return false;
}

static bool Load_GL_SGIX_interlace(GLExtensionReg *reg)
{
#ifdef GL_SGIX_interlace
	if(reg->QueryGLExtension("GL_SGIX_interlace") == 0)
		return false;
	return true;
#endif //GL_SGIX_interlace
	return false;
}

static bool Load_GL_SGIX_ir_instrument1(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ir_instrument1
	if(reg->QueryGLExtension("GL_SGIX_ir_instrument1") == 0)
		return false;
	return true;
#endif //GL_SGIX_ir_instrument1
	return false;
}

static bool Load_GL_SGIX_list_priority(GLExtensionReg *reg)
{
#ifdef GL_SGIX_list_priority
	if(reg->QueryGLExtension("GL_SGIX_list_priority") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGETLISTPARAMETERFVSGIXPROC, glGetListParameterfvSGIX);
	GET_PROC_ADDRESS(PFNGLGETLISTPARAMETERIVSGIXPROC, glGetListParameterivSGIX);
	GET_PROC_ADDRESS(PFNGLLISTPARAMETERFSGIXPROC, glListParameterfSGIX);
	GET_PROC_ADDRESS(PFNGLLISTPARAMETERFVSGIXPROC, glListParameterfvSGIX);
	GET_PROC_ADDRESS(PFNGLLISTPARAMETERISGIXPROC, glListParameteriSGIX);
	GET_PROC_ADDRESS(PFNGLLISTPARAMETERIVSGIXPROC, glListParameterivSGIX);
	return true;
#endif //GL_SGIX_list_priority
	return false;
}

static bool Load_GL_SGIX_pixel_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIX_pixel_texture
	if(reg->QueryGLExtension("GL_SGIX_pixel_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPIXELTEXGENSGIXPROC, glPixelTexGenSGIX);
	return true;
#endif //GL_SGIX_pixel_texture
	return false;
}

static bool Load_GL_SGIX_pixel_tiles(GLExtensionReg *reg)
{
#ifdef GL_SGIX_pixel_tiles
	if(reg->QueryGLExtension("GL_SGIX_pixel_tiles") == 0)
		return false;
	return true;
#endif //GL_SGIX_pixel_tiles
	return false;
}

static bool Load_GL_SGIX_polynomial_ffd(GLExtensionReg *reg)
{
#ifdef GL_SGIX_polynomial_ffd
	if(reg->QueryGLExtension("GL_SGIX_polynomial_ffd") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDEFORMATIONMAP3DSGIXPROC, glDeformationMap3dSGIX);
	GET_PROC_ADDRESS(PFNGLDEFORMATIONMAP3FSGIXPROC, glDeformationMap3fSGIX);
	GET_PROC_ADDRESS(PFNGLDEFORMSGIXPROC, glDeformSGIX);
	GET_PROC_ADDRESS(PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC, glLoadIdentityDeformationMapSGIX);
	return true;
#endif //GL_SGIX_polynomial_ffd
	return false;
}

static bool Load_GL_SGIX_reference_plane(GLExtensionReg *reg)
{
#ifdef GL_SGIX_reference_plane
	if(reg->QueryGLExtension("GL_SGIX_reference_plane") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLREFERENCEPLANESGIXPROC, glReferencePlaneSGIX);
	return true;
#endif //GL_SGIX_reference_plane
	return false;
}

static bool Load_GL_SGIX_resample(GLExtensionReg *reg)
{
#ifdef GL_SGIX_resample
	if(reg->QueryGLExtension("GL_SGIX_resample") == 0)
		return false;
	return true;
#endif //GL_SGIX_resample
	return false;
}

static bool Load_GL_SGIX_scalebias_hint(GLExtensionReg *reg)
{
#ifdef GL_SGIX_scalebias_hint
	if(reg->QueryGLExtension("GL_SGIX_scalebias_hint") == 0)
		return false;
	return true;
#endif //GL_SGIX_scalebias_hint
	return false;
}

static bool Load_GL_SGIX_shadow(GLExtensionReg *reg)
{
#ifdef GL_SGIX_shadow
	if(reg->QueryGLExtension("GL_SGIX_shadow") == 0)
		return false;
	return true;
#endif //GL_SGIX_shadow
	return false;
}

static bool Load_GL_SGIX_shadow_ambient(GLExtensionReg *reg)
{
#ifdef GL_SGIX_shadow_ambient
	if(reg->QueryGLExtension("GL_SGIX_shadow_ambient") == 0)
		return false;
	return true;
#endif //GL_SGIX_shadow_ambient
	return false;
}

static bool Load_GL_SGIX_sprite(GLExtensionReg *reg)
{
#ifdef GL_SGIX_sprite
	if(reg->QueryGLExtension("GL_SGIX_sprite") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSPRITEPARAMETERFSGIXPROC, glSpriteParameterfSGIX);
	GET_PROC_ADDRESS(PFNGLSPRITEPARAMETERFVSGIXPROC, glSpriteParameterfvSGIX);
	GET_PROC_ADDRESS(PFNGLSPRITEPARAMETERISGIXPROC, glSpriteParameteriSGIX);
	GET_PROC_ADDRESS(PFNGLSPRITEPARAMETERIVSGIXPROC, glSpriteParameterivSGIX);
	return true;
#endif //GL_SGIX_sprite
	return false;
}

static bool Load_GL_SGIX_subsample(GLExtensionReg *reg)
{
#ifdef GL_SGIX_subsample
	if(reg->QueryGLExtension("GL_SGIX_subsample") == 0)
		return false;
	return true;
#endif //GL_SGIX_subsample
	return false;
}

static bool Load_GL_SGIX_tag_sample_buffer(GLExtensionReg *reg)
{
#ifdef GL_SGIX_tag_sample_buffer
	if(reg->QueryGLExtension("GL_SGIX_tag_sample_buffer") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTAGSAMPLEBUFFERSGIXPROC, glTagSampleBufferSGIX);
	return true;
#endif //GL_SGIX_tag_sample_buffer
	return false;
}

static bool Load_GL_SGIX_texture_add_env(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_add_env
	if(reg->QueryGLExtension("GL_SGIX_texture_add_env") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_add_env
	return false;
}

static bool Load_GL_SGIX_texture_coordinate_clamp(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_coordinate_clamp
	if(reg->QueryGLExtension("GL_SGIX_texture_coordinate_clamp") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_coordinate_clamp
	return false;
}

static bool Load_GL_SGIX_texture_lod_bias(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_lod_bias
	if(reg->QueryGLExtension("GL_SGIX_texture_lod_bias") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_lod_bias
	return false;
}

static bool Load_GL_SGIX_texture_multi_buffer(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_multi_buffer
	if(reg->QueryGLExtension("GL_SGIX_texture_multi_buffer") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_multi_buffer
	return false;
}

static bool Load_GL_SGIX_texture_scale_bias(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_scale_bias
	if(reg->QueryGLExtension("GL_SGIX_texture_scale_bias") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_scale_bias
	return false;
}

static bool Load_GL_SGIX_texture_select(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_select
	if(reg->QueryGLExtension("GL_SGIX_texture_select") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_select
	return false;
}

static bool Load_GL_SGIX_vertex_preclip(GLExtensionReg *reg)
{
#ifdef GL_SGIX_vertex_preclip
	if(reg->QueryGLExtension("GL_SGIX_vertex_preclip") == 0)
		return false;
	return true;
#endif //GL_SGIX_vertex_preclip
	return false;
}

static bool Load_GL_SGIX_ycrcb(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ycrcb
	if(reg->QueryGLExtension("GL_SGIX_ycrcb") == 0)
		return false;
	return true;
#endif //GL_SGIX_ycrcb
	return false;
}

static bool Load_GL_SGIX_ycrcb_subsample(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ycrcb_subsample
	if(reg->QueryGLExtension("GL_SGIX_ycrcb_subsample") == 0)
		return false;
	return true;
#endif //GL_SGIX_ycrcb_subsample
	return false;
}

static bool Load_GL_SGIX_ycrcba(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ycrcba
	if(reg->QueryGLExtension("GL_SGIX_ycrcba") == 0)
		return false;
	return true;
#endif //GL_SGIX_ycrcba
	return false;
}

static bool Load_GL_SGI_color_matrix(GLExtensionReg *reg)
{
#ifdef GL_SGI_color_matrix
	if(reg->QueryGLExtension("GL_SGI_color_matrix") == 0)
		return false;
	return true;
#endif //GL_SGI_color_matrix
	return false;
}

static bool Load_GL_SGI_color_table(GLExtensionReg *reg)
{
#ifdef GL_SGI_color_table
	if(reg->QueryGLExtension("GL_SGI_color_table") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLORTABLESGIPROC, glColorTableSGI);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERFVSGIPROC, glColorTableParameterfvSGI);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERIVSGIPROC, glColorTableParameterivSGI);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORTABLESGIPROC, glCopyColorTableSGI);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLESGIPROC, glGetColorTableSGI);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERFVSGIPROC, glGetColorTableParameterfvSGI);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERIVSGIPROC, glGetColorTableParameterivSGI);
	return true;
#endif //GL_SGI_color_table
	return false;
}

static bool Load_GL_SGI_depth_pass_instrument(GLExtensionReg *reg)
{
#ifdef GL_SGI_depth_pass_instrument
	if(reg->QueryGLExtension("GL_SGI_depth_pass_instrument") == 0)
		return false;
	return true;
#endif //GL_SGI_depth_pass_instrument
	return false;
}

static bool Load_GL_SGI_texture_color_table(GLExtensionReg *reg)
{
#ifdef GL_SGI_texture_color_table
	if(reg->QueryGLExtension("GL_SGI_texture_color_table") == 0)
		return false;
	return true;
#endif //GL_SGI_texture_color_table
	return false;
}

static bool Load_GL_SUNX_constant_data(GLExtensionReg *reg)
{
#ifdef GL_SUNX_constant_data
	if(reg->QueryGLExtension("GL_SUNX_constant_data") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFINISHTEXTURESUNXPROC, glFinishTextureSUNX);
	return true;
#endif //GL_SUNX_constant_data
	return false;
}

static bool Load_GL_SUN_convolution_border_modes(GLExtensionReg *reg)
{
#ifdef GL_SUN_convolution_border_modes
	if(reg->QueryGLExtension("GL_SUN_convolution_border_modes") == 0)
		return false;
	return true;
#endif //GL_SUN_convolution_border_modes
	return false;
}

static bool Load_GL_SUN_global_alpha(GLExtensionReg *reg)
{
#ifdef GL_SUN_global_alpha
	if(reg->QueryGLExtension("GL_SUN_global_alpha") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORBSUNPROC, glGlobalAlphaFactorbSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORSSUNPROC, glGlobalAlphaFactorsSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORISUNPROC, glGlobalAlphaFactoriSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORFSUNPROC, glGlobalAlphaFactorfSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORDSUNPROC, glGlobalAlphaFactordSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORUBSUNPROC, glGlobalAlphaFactorubSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORUSSUNPROC, glGlobalAlphaFactorusSUN);
	GET_PROC_ADDRESS(PFNGLGLOBALALPHAFACTORUISUNPROC, glGlobalAlphaFactoruiSUN);
	return true;
#endif //GL_SUN_global_alpha
	return false;
}

static bool Load_GL_SUN_mesh_array(GLExtensionReg *reg)
{
#ifdef GL_SUN_mesh_array
	if(reg->QueryGLExtension("GL_SUN_mesh_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDRAWMESHARRAYSSUNPROC, glDrawMeshArraysSUN);
	return true;
#endif //GL_SUN_mesh_array
	return false;
}

static bool Load_GL_SUN_slice_accum(GLExtensionReg *reg)
{
#ifdef GL_SUN_slice_accum
	if(reg->QueryGLExtension("GL_SUN_slice_accum") == 0)
		return false;
	return true;
#endif //GL_SUN_slice_accum
	return false;
}

static bool Load_GL_SUN_triangle_list(GLExtensionReg *reg)
{
#ifdef GL_SUN_triangle_list
	if(reg->QueryGLExtension("GL_SUN_triangle_list") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUISUNPROC, glReplacementCodeuiSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUSSUNPROC, glReplacementCodeusSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUBSUNPROC, glReplacementCodeubSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUIVSUNPROC, glReplacementCodeuivSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUSVSUNPROC, glReplacementCodeusvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUBVSUNPROC, glReplacementCodeubvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEPOINTERSUNPROC, glReplacementCodePointerSUN);
	return true;
#endif //GL_SUN_triangle_list
	return false;
}

static bool Load_GL_SUN_vertex(GLExtensionReg *reg)
{
#ifdef GL_SUN_vertex
	if(reg->QueryGLExtension("GL_SUN_vertex") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLOR4UBVERTEX2FSUNPROC, glColor4ubVertex2fSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR4UBVERTEX2FVSUNPROC, glColor4ubVertex2fvSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR4UBVERTEX3FSUNPROC, glColor4ubVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR4UBVERTEX3FVSUNPROC, glColor4ubVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR3FVERTEX3FSUNPROC, glColor3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR3FVERTEX3FVSUNPROC, glColor3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLNORMAL3FVERTEX3FSUNPROC, glNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLNORMAL3FVERTEX3FVSUNPROC, glNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC, glColor4fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC, glColor4fNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FVERTEX3FSUNPROC, glTexCoord2fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FVERTEX3FVSUNPROC, glTexCoord2fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4FVERTEX4FSUNPROC, glTexCoord4fVertex4fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4FVERTEX4FVSUNPROC, glTexCoord4fVertex4fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC, glTexCoord2fColor4ubVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC, glTexCoord2fColor4ubVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC, glTexCoord2fColor3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC, glTexCoord2fColor3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC, glTexCoord2fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC, glTexCoord2fNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC, glTexCoord2fColor4fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC, glTexCoord2fColor4fNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC, glTexCoord4fColor4fNormal3fVertex4fSUN);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC, glTexCoord4fColor4fNormal3fVertex4fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC, glReplacementCodeuiVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC, glReplacementCodeuiVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC, glReplacementCodeuiColor4ubVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC, glReplacementCodeuiColor4ubVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC, glReplacementCodeuiColor3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC, glReplacementCodeuiColor3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC, glReplacementCodeuiNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC, glReplacementCodeuiNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC, glReplacementCodeuiColor4fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC, glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC, glReplacementCodeuiTexCoord2fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC, glReplacementCodeuiTexCoord2fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
	GET_PROC_ADDRESS(PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
	return true;
#endif //GL_SUN_vertex
	return false;
}

static bool Load_GL_VERSION_1_2(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_2
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTSPROC, glDrawRangeElements);
	GET_PROC_ADDRESS(PFNGLTEXIMAGE3DPROC, glTexImage3D);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE3DPROC, glTexSubImage3D);
	GET_PROC_ADDRESS(PFNGLCOPYTEXSUBIMAGE3DPROC, glCopyTexSubImage3D);
	return true;
#endif //GL_VERSION_1_2
	return false;
}

static bool Load_GL_VERSION_1_3(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_3
	GET_PROC_ADDRESS(PFNGLACTIVETEXTUREPROC, glActiveTexture);
	GET_PROC_ADDRESS(PFNGLCLIENTACTIVETEXTUREPROC, glClientActiveTexture);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DPROC, glMultiTexCoord1d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DVPROC, glMultiTexCoord1dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FPROC, glMultiTexCoord1f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FVPROC, glMultiTexCoord1fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IPROC, glMultiTexCoord1i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IVPROC, glMultiTexCoord1iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SPROC, glMultiTexCoord1s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SVPROC, glMultiTexCoord1sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DPROC, glMultiTexCoord2d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DVPROC, glMultiTexCoord2dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FPROC, glMultiTexCoord2f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FVPROC, glMultiTexCoord2fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IPROC, glMultiTexCoord2i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IVPROC, glMultiTexCoord2iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SPROC, glMultiTexCoord2s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SVPROC, glMultiTexCoord2sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DPROC, glMultiTexCoord3d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DVPROC, glMultiTexCoord3dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FPROC, glMultiTexCoord3f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FVPROC, glMultiTexCoord3fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IPROC, glMultiTexCoord3i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IVPROC, glMultiTexCoord3iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SPROC, glMultiTexCoord3s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SVPROC, glMultiTexCoord3sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DPROC, glMultiTexCoord4d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DVPROC, glMultiTexCoord4dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FPROC, glMultiTexCoord4f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FVPROC, glMultiTexCoord4fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IPROC, glMultiTexCoord4i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IVPROC, glMultiTexCoord4iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SPROC, glMultiTexCoord4s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SVPROC, glMultiTexCoord4sv);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXFPROC, glLoadTransposeMatrixf);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXDPROC, glLoadTransposeMatrixd);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXFPROC, glMultTransposeMatrixf);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXDPROC, glMultTransposeMatrixd);
	GET_PROC_ADDRESS(PFNGLSAMPLECOVERAGEPROC, glSampleCoverage);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE3DPROC, glCompressedTexImage3D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE2DPROC, glCompressedTexImage2D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE1DPROC, glCompressedTexImage1D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC, glCompressedTexSubImage3D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC, glCompressedTexSubImage2D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC, glCompressedTexSubImage1D);
	GET_PROC_ADDRESS(PFNGLGETCOMPRESSEDTEXIMAGEPROC, glGetCompressedTexImage);
	return true;
#endif //GL_VERSION_1_3
	return false;
}

static bool Load_GL_VERSION_1_4(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_4
	return true;
#endif //GL_VERSION_1_4
	return false;
}

static bool Load_GL_WIN_phong_shading(GLExtensionReg *reg)
{
#ifdef GL_WIN_phong_shading
	if(reg->QueryGLExtension("GL_WIN_phong_shading") == 0)
		return false;
	return true;
#endif //GL_WIN_phong_shading
	return false;
}

static bool Load_GL_WIN_specular_fog(GLExtensionReg *reg)
{
#ifdef GL_WIN_specular_fog
	if(reg->QueryGLExtension("GL_WIN_specular_fog") == 0)
		return false;
	return true;
#endif //GL_WIN_specular_fog
	return false;
}

#if defined(_WIN32)
static bool Load_WGL_3DFX_multisample(GLExtensionReg *reg)
{
#ifdef WGL_3DFX_multisample
	if(reg->QueryWGLExtension("WGL_3DFX_multisample") == 0)
		return false;
	return true;
#endif //WGL_3DFX_multisample
	return false;
}

static bool Load_WGL_ARB_buffer_region(GLExtensionReg *reg)
{
#ifdef WGL_ARB_buffer_region
	if(reg->QueryWGLExtension("WGL_ARB_buffer_region") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLCREATEBUFFERREGIONARBPROC, wglCreateBufferRegionARB);
	GET_PROC_ADDRESS(PFNWGLDELETEBUFFERREGIONARBPROC, wglDeleteBufferRegionARB);
	GET_PROC_ADDRESS(PFNWGLSAVEBUFFERREGIONARBPROC, wglSaveBufferRegionARB);
	GET_PROC_ADDRESS(PFNWGLRESTOREBUFFERREGIONARBPROC, wglRestoreBufferRegionARB);
	return true;
#endif //WGL_ARB_buffer_region
	return false;
}

static bool Load_WGL_ARB_make_current_read(GLExtensionReg *reg)
{
#ifdef WGL_ARB_make_current_read
	if(reg->QueryWGLExtension("WGL_ARB_make_current_read") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLMAKECONTEXTCURRENTARBPROC, wglMakeContextCurrentARB);
	GET_PROC_ADDRESS(PFNWGLGETCURRENTREADDCARBPROC, wglGetCurrentReadDCARB);
	return true;
#endif //WGL_ARB_make_current_read
	return false;
}

static bool Load_WGL_ARB_multisample(GLExtensionReg *reg)
{
#ifdef WGL_ARB_multisample
	if(reg->QueryWGLExtension("WGL_ARB_multisample") == 0)
		return false;
	return true;
#endif //WGL_ARB_multisample
	return false;
}

static bool Load_WGL_ARB_pbuffer(GLExtensionReg *reg)
{
#ifdef WGL_ARB_pbuffer
	if(reg->QueryWGLExtension("WGL_ARB_pbuffer") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLCREATEPBUFFERARBPROC, wglCreatePbufferARB);
	GET_PROC_ADDRESS(PFNWGLGETPBUFFERDCARBPROC, wglGetPbufferDCARB);
	GET_PROC_ADDRESS(PFNWGLRELEASEPBUFFERDCARBPROC, wglReleasePbufferDCARB);
	GET_PROC_ADDRESS(PFNWGLDESTROYPBUFFERARBPROC, wglDestroyPbufferARB);
	GET_PROC_ADDRESS(PFNWGLQUERYPBUFFERARBPROC, wglQueryPbufferARB);
	return true;
#endif //WGL_ARB_pbuffer
	return false;
}

static bool Load_WGL_ARB_pixel_format(GLExtensionReg *reg)
{
#ifdef WGL_ARB_pixel_format
	if(reg->QueryWGLExtension("WGL_ARB_pixel_format") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETPIXELFORMATATTRIBIVARBPROC, wglGetPixelFormatAttribivARB);
	GET_PROC_ADDRESS(PFNWGLGETPIXELFORMATATTRIBFVARBPROC, wglGetPixelFormatAttribfvARB);
	GET_PROC_ADDRESS(PFNWGLCHOOSEPIXELFORMATARBPROC, wglChoosePixelFormatARB);
	return true;
#endif //WGL_ARB_pixel_format
	return false;
}

static bool Load_WGL_ARB_render_texture(GLExtensionReg *reg)
{
#ifdef WGL_ARB_render_texture
	if(reg->QueryWGLExtension("WGL_ARB_render_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLBINDTEXIMAGEARBPROC, wglBindTexImageARB);
	GET_PROC_ADDRESS(PFNWGLRELEASETEXIMAGEARBPROC, wglReleaseTexImageARB);
	GET_PROC_ADDRESS(PFNWGLSETPBUFFERATTRIBARBPROC, wglSetPbufferAttribARB);
	return true;
#endif //WGL_ARB_render_texture
	return false;
}

static bool Load_WGL_EXT_depth_float(GLExtensionReg *reg)
{
#ifdef WGL_EXT_depth_float
	if(reg->QueryWGLExtension("WGL_EXT_depth_float") == 0)
		return false;
	return true;
#endif //WGL_EXT_depth_float
	return false;
}

static bool Load_WGL_EXT_display_color_table(GLExtensionReg *reg)
{
#ifdef WGL_EXT_display_color_table
	if(reg->QueryWGLExtension("WGL_EXT_display_color_table") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC, wglCreateDisplayColorTableEXT);
	GET_PROC_ADDRESS(PFNWGLLOADDISPLAYCOLORTABLEEXTPROC, wglLoadDisplayColorTableEXT);
	GET_PROC_ADDRESS(PFNWGLBINDDISPLAYCOLORTABLEEXTPROC, wglBindDisplayColorTableEXT);
	GET_PROC_ADDRESS(PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC, wglDestroyDisplayColorTableEXT);
	return true;
#endif //WGL_EXT_display_color_table
	return false;
}

static bool Load_WGL_EXT_make_current_read(GLExtensionReg *reg)
{
#ifdef WGL_EXT_make_current_read
	if(reg->QueryWGLExtension("WGL_EXT_make_current_read") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLMAKECONTEXTCURRENTEXTPROC, wglMakeContextCurrentEXT);
	GET_PROC_ADDRESS(PFNWGLGETCURRENTREADDCEXTPROC, wglGetCurrentReadDCEXT);
	return true;
#endif //WGL_EXT_make_current_read
	return false;
}

static bool Load_WGL_EXT_multisample(GLExtensionReg *reg)
{
#ifdef WGL_EXT_multisample
	if(reg->QueryWGLExtension("WGL_EXT_multisample") == 0)
		return false;
	return true;
#endif //WGL_EXT_multisample
	return false;
}

static bool Load_WGL_EXT_pbuffer(GLExtensionReg *reg)
{
#ifdef WGL_EXT_pbuffer
	if(reg->QueryWGLExtension("WGL_EXT_pbuffer") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLCREATEPBUFFEREXTPROC, wglCreatePbufferEXT);
	GET_PROC_ADDRESS(PFNWGLGETPBUFFERDCEXTPROC, wglGetPbufferDCEXT);
	GET_PROC_ADDRESS(PFNWGLRELEASEPBUFFERDCEXTPROC, wglReleasePbufferDCEXT);
	GET_PROC_ADDRESS(PFNWGLDESTROYPBUFFEREXTPROC, wglDestroyPbufferEXT);
	GET_PROC_ADDRESS(PFNWGLQUERYPBUFFEREXTPROC, wglQueryPbufferEXT);
	return true;
#endif //WGL_EXT_pbuffer
	return false;
}

static bool Load_WGL_EXT_pixel_format(GLExtensionReg *reg)
{
#ifdef WGL_EXT_pixel_format
	if(reg->QueryWGLExtension("WGL_EXT_pixel_format") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETPIXELFORMATATTRIBIVEXTPROC, wglGetPixelFormatAttribivEXT);
	GET_PROC_ADDRESS(PFNWGLGETPIXELFORMATATTRIBFVEXTPROC, wglGetPixelFormatAttribfvEXT);
	GET_PROC_ADDRESS(PFNWGLCHOOSEPIXELFORMATEXTPROC, wglChoosePixelFormatEXT);
	return true;
#endif //WGL_EXT_pixel_format
	return false;
}

static bool Load_WGL_EXT_swap_control(GLExtensionReg *reg)
{
#ifdef WGL_EXT_swap_control
	if(reg->QueryWGLExtension("WGL_EXT_swap_control") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLSWAPINTERVALEXTPROC, wglSwapIntervalEXT);
	GET_PROC_ADDRESS(PFNWGLGETSWAPINTERVALEXTPROC, wglGetSwapIntervalEXT);
	return true;
#endif //WGL_EXT_swap_control
	return false;
}

static bool Load_WGL_I3D_digital_video_control(GLExtensionReg *reg)
{
#ifdef WGL_I3D_digital_video_control
	if(reg->QueryWGLExtension("WGL_I3D_digital_video_control") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC, wglGetDigitalVideoParametersI3D);
	GET_PROC_ADDRESS(PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC, wglSetDigitalVideoParametersI3D);
	return true;
#endif //WGL_I3D_digital_video_control
	return false;
}

static bool Load_WGL_I3D_gamma(GLExtensionReg *reg)
{
#ifdef WGL_I3D_gamma
	if(reg->QueryWGLExtension("WGL_I3D_gamma") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETGAMMATABLEPARAMETERSI3DPROC, wglGetGammaTableParametersI3D);
	GET_PROC_ADDRESS(PFNWGLSETGAMMATABLEPARAMETERSI3DPROC, wglSetGammaTableParametersI3D);
	GET_PROC_ADDRESS(PFNWGLGETGAMMATABLEI3DPROC, wglGetGammaTableI3D);
	GET_PROC_ADDRESS(PFNWGLSETGAMMATABLEI3DPROC, wglSetGammaTableI3D);
	return true;
#endif //WGL_I3D_gamma
	return false;
}

static bool Load_WGL_I3D_genlock(GLExtensionReg *reg)
{
#ifdef WGL_I3D_genlock
	if(reg->QueryWGLExtension("WGL_I3D_genlock") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLENABLEGENLOCKI3DPROC, wglEnableGenlockI3D);
	GET_PROC_ADDRESS(PFNWGLDISABLEGENLOCKI3DPROC, wglDisableGenlockI3D);
	GET_PROC_ADDRESS(PFNWGLISENABLEDGENLOCKI3DPROC, wglIsEnabledGenlockI3D);
	GET_PROC_ADDRESS(PFNWGLGENLOCKSOURCEI3DPROC, wglGenlockSourceI3D);
	GET_PROC_ADDRESS(PFNWGLGETGENLOCKSOURCEI3DPROC, wglGetGenlockSourceI3D);
	GET_PROC_ADDRESS(PFNWGLGENLOCKSOURCEEDGEI3DPROC, wglGenlockSourceEdgeI3D);
	GET_PROC_ADDRESS(PFNWGLGETGENLOCKSOURCEEDGEI3DPROC, wglGetGenlockSourceEdgeI3D);
	GET_PROC_ADDRESS(PFNWGLGENLOCKSAMPLERATEI3DPROC, wglGenlockSampleRateI3D);
	GET_PROC_ADDRESS(PFNWGLGETGENLOCKSAMPLERATEI3DPROC, wglGetGenlockSampleRateI3D);
	GET_PROC_ADDRESS(PFNWGLGENLOCKSOURCEDELAYI3DPROC, wglGenlockSourceDelayI3D);
	GET_PROC_ADDRESS(PFNWGLGETGENLOCKSOURCEDELAYI3DPROC, wglGetGenlockSourceDelayI3D);
	GET_PROC_ADDRESS(PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC, wglQueryGenlockMaxSourceDelayI3D);
	return true;
#endif //WGL_I3D_genlock
	return false;
}

static bool Load_WGL_I3D_image_buffer(GLExtensionReg *reg)
{
#ifdef WGL_I3D_image_buffer
	if(reg->QueryWGLExtension("WGL_I3D_image_buffer") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLCREATEIMAGEBUFFERI3DPROC, wglCreateImageBufferI3D);
	GET_PROC_ADDRESS(PFNWGLDESTROYIMAGEBUFFERI3DPROC, wglDestroyImageBufferI3D);
	GET_PROC_ADDRESS(PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC, wglAssociateImageBufferEventsI3D);
	GET_PROC_ADDRESS(PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC, wglReleaseImageBufferEventsI3D);
	return true;
#endif //WGL_I3D_image_buffer
	return false;
}

static bool Load_WGL_I3D_swap_frame_lock(GLExtensionReg *reg)
{
#ifdef WGL_I3D_swap_frame_lock
	if(reg->QueryWGLExtension("WGL_I3D_swap_frame_lock") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLENABLEFRAMELOCKI3DPROC, wglEnableFrameLockI3D);
	GET_PROC_ADDRESS(PFNWGLDISABLEFRAMELOCKI3DPROC, wglDisableFrameLockI3D);
	GET_PROC_ADDRESS(PFNWGLISENABLEDFRAMELOCKI3DPROC, wglIsEnabledFrameLockI3D);
	GET_PROC_ADDRESS(PFNWGLQUERYFRAMELOCKMASTERI3DPROC, wglQueryFrameLockMasterI3D);
	return true;
#endif //WGL_I3D_swap_frame_lock
	return false;
}

static bool Load_WGL_I3D_swap_frame_usage(GLExtensionReg *reg)
{
#ifdef WGL_I3D_swap_frame_usage
	if(reg->QueryWGLExtension("WGL_I3D_swap_frame_usage") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETFRAMEUSAGEI3DPROC, wglGetFrameUsageI3D);
	GET_PROC_ADDRESS(PFNWGLBEGINFRAMETRACKINGI3DPROC, wglBeginFrameTrackingI3D);
	GET_PROC_ADDRESS(PFNWGLENDFRAMETRACKINGI3DPROC, wglEndFrameTrackingI3D);
	GET_PROC_ADDRESS(PFNWGLQUERYFRAMETRACKINGI3DPROC, wglQueryFrameTrackingI3D);
	return true;
#endif //WGL_I3D_swap_frame_usage
	return false;
}

static bool Load_WGL_NV_vertex_array_range(GLExtensionReg *reg)
{
#ifdef WGL_NV_vertex_array_range
	if(reg->QueryGLExtension("GL_NV_vertex_array_range") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLALLOCATEMEMORYNVPROC, wglAllocateMemoryNV);
	GET_PROC_ADDRESS(PFNWGLFREEMEMORYNVPROC, wglFreeMemoryNV);
	return true;
#endif //WGL_NV_vertex_array_range
	return false;
}

static bool Load_WGL_OML_sync_control(GLExtensionReg *reg)
{
#ifdef WGL_OML_sync_control
	if(reg->QueryWGLExtension("WGL_OML_sync_control") == 0)
		return false;
	GET_PROC_ADDRESS(PFNWGLGETSYNCVALUESOMLPROC, wglGetSyncValuesOML);
	GET_PROC_ADDRESS(PFNWGLGETMSCRATEOMLPROC, wglGetMscRateOML);
	GET_PROC_ADDRESS(PFNWGLSWAPBUFFERSMSCOMLPROC, wglSwapBuffersMscOML);
	GET_PROC_ADDRESS(PFNWGLSWAPLAYERBUFFERSMSCOMLPROC, wglSwapLayerBuffersMscOML);
	GET_PROC_ADDRESS(PFNWGLWAITFORMSCOMLPROC, wglWaitForMscOML);
	GET_PROC_ADDRESS(PFNWGLWAITFORSBCOMLPROC, wglWaitForSbcOML);
	return true;
#endif //WGL_OML_sync_control
	return false;
}

#endif //_WIN32

GLExtensionReg::GLExtensionReg()
{
	memset(&mExtensions, 0, sizeof(GLExtGenExtensions));
#if defined(_WIN32)
	mHDC = NULL;
#endif //_WIN32
}

GLExtensionReg::~GLExtensionReg()
{
}

void GLExtensionReg::Init(GLExtGenFunctionPointers *funPtr, GLExtGenExtensions *ext)
{
	char *s = (char*) glGetString(GL_VERSION);

	if (!s)
		return;
	s = strstr(s, "1.");
	if (s != NULL)
	{
		if (s[2] >= '4')
			mExtensions.mGL_VERSION_1_4 = true;
		if (s[2] >= '3')
			mExtensions.mGL_VERSION_1_3 = true;
		if (s[2] >= '2')
			mExtensions.mGL_VERSION_1_2 = true;
	}

	mExtensions.mGL_3DFX_multisample = Load_GL_3DFX_multisample(this);
	mExtensions.mGL_3DFX_tbuffer = Load_GL_3DFX_tbuffer(this);
	mExtensions.mGL_3DFX_texture_compression_FXT1 = Load_GL_3DFX_texture_compression_FXT1(this);
	mExtensions.mGL_APPLE_specular_vector = Load_GL_APPLE_specular_vector(this);
	mExtensions.mGL_APPLE_transform_hint = Load_GL_APPLE_transform_hint(this);
	mExtensions.mGL_ARB_depth_texture = Load_GL_ARB_depth_texture(this);
	mExtensions.mGL_ARB_fragment_program = Load_GL_ARB_fragment_program(this);
	mExtensions.mGL_ARB_imaging = Load_GL_ARB_imaging(this);
	mExtensions.mGL_ARB_matrix_palette = Load_GL_ARB_matrix_palette(this);
	mExtensions.mGL_ARB_multisample = Load_GL_ARB_multisample(this);
	mExtensions.mGL_ARB_multitexture = Load_GL_ARB_multitexture(this);
	mExtensions.mGL_ARB_point_parameters = Load_GL_ARB_point_parameters(this);
	mExtensions.mGL_ARB_shadow = Load_GL_ARB_shadow(this);
	mExtensions.mGL_ARB_shadow_ambient = Load_GL_ARB_shadow_ambient(this);
	mExtensions.mGL_ARB_texture_border_clamp = Load_GL_ARB_texture_border_clamp(this);
	mExtensions.mGL_ARB_texture_compression = Load_GL_ARB_texture_compression(this);
	mExtensions.mGL_ARB_texture_cube_map = Load_GL_ARB_texture_cube_map(this);
	mExtensions.mGL_ARB_texture_env_add = Load_GL_ARB_texture_env_add(this);
	mExtensions.mGL_ARB_texture_env_combine = Load_GL_ARB_texture_env_combine(this);
	mExtensions.mGL_ARB_texture_env_crossbar = Load_GL_ARB_texture_env_crossbar(this);
	mExtensions.mGL_ARB_texture_env_dot3 = Load_GL_ARB_texture_env_dot3(this);
	mExtensions.mGL_ARB_texture_mirror_repeat = Load_GL_ARB_texture_mirror_repeat(this);
	mExtensions.mGL_ARB_texture_mirrored_repeat = Load_GL_ARB_texture_mirrored_repeat(this);
	mExtensions.mGL_ARB_transpose_matrix = Load_GL_ARB_transpose_matrix(this);
	mExtensions.mGL_ARB_vertex_blend = Load_GL_ARB_vertex_blend(this);
	mExtensions.mGL_ARB_vertex_program = Load_GL_ARB_vertex_program(this);
	mExtensions.mGL_ARB_window_pos = Load_GL_ARB_window_pos(this);
	mExtensions.mGL_ATI_element_array = Load_GL_ATI_element_array(this);
	mExtensions.mGL_ATI_envmap_bumpmap = Load_GL_ATI_envmap_bumpmap(this);
	mExtensions.mGL_ATI_fragment_shader = Load_GL_ATI_fragment_shader(this);
	mExtensions.mGL_ATI_pn_triangles = Load_GL_ATI_pn_triangles(this);
	mExtensions.mGL_ATI_texture_mirror_once = Load_GL_ATI_texture_mirror_once(this);
	mExtensions.mGL_ATI_vertex_array_object = Load_GL_ATI_vertex_array_object(this);
	mExtensions.mGL_ATI_vertex_streams = Load_GL_ATI_vertex_streams(this);
	mExtensions.mGL_EXT_422_pixels = Load_GL_EXT_422_pixels(this);
	mExtensions.mGL_EXT_abgr = Load_GL_EXT_abgr(this);
	mExtensions.mGL_EXT_bgra = Load_GL_EXT_bgra(this);
	mExtensions.mGL_EXT_blend_color = Load_GL_EXT_blend_color(this);
	mExtensions.mGL_EXT_blend_func_separate = Load_GL_EXT_blend_func_separate(this);
	mExtensions.mGL_EXT_blend_logic_op = Load_GL_EXT_blend_logic_op(this);
	mExtensions.mGL_EXT_blend_minmax = Load_GL_EXT_blend_minmax(this);
	mExtensions.mGL_EXT_blend_subtract = Load_GL_EXT_blend_subtract(this);
	mExtensions.mGL_EXT_clip_volume_hint = Load_GL_EXT_clip_volume_hint(this);
	mExtensions.mGL_EXT_cmyka = Load_GL_EXT_cmyka(this);
	mExtensions.mGL_EXT_color_matrix = Load_GL_EXT_color_matrix(this);
	mExtensions.mGL_EXT_color_subtable = Load_GL_EXT_color_subtable(this);
	mExtensions.mGL_EXT_compiled_vertex_array = Load_GL_EXT_compiled_vertex_array(this);
	mExtensions.mGL_EXT_convolution = Load_GL_EXT_convolution(this);
	mExtensions.mGL_EXT_coordinate_frame = Load_GL_EXT_coordinate_frame(this);
	mExtensions.mGL_EXT_copy_texture = Load_GL_EXT_copy_texture(this);
	mExtensions.mGL_EXT_cull_vertex = Load_GL_EXT_cull_vertex(this);
	mExtensions.mGL_EXT_draw_range_elements = Load_GL_EXT_draw_range_elements(this);
	mExtensions.mGL_EXT_fog_coord = Load_GL_EXT_fog_coord(this);
	mExtensions.mGL_EXT_histogram = Load_GL_EXT_histogram(this);
	mExtensions.mGL_EXT_index_array_formats = Load_GL_EXT_index_array_formats(this);
	mExtensions.mGL_EXT_index_func = Load_GL_EXT_index_func(this);
	mExtensions.mGL_EXT_index_material = Load_GL_EXT_index_material(this);
	mExtensions.mGL_EXT_index_texture = Load_GL_EXT_index_texture(this);
	mExtensions.mGL_EXT_light_texture = Load_GL_EXT_light_texture(this);
	mExtensions.mGL_EXT_misc_attribute = Load_GL_EXT_misc_attribute(this);
	mExtensions.mGL_EXT_multi_draw_arrays = Load_GL_EXT_multi_draw_arrays(this);
	mExtensions.mGL_EXT_multisample = Load_GL_EXT_multisample(this);
	mExtensions.mGL_EXT_packed_pixels = Load_GL_EXT_packed_pixels(this);
	mExtensions.mGL_EXT_paletted_texture = Load_GL_EXT_paletted_texture(this);
	mExtensions.mGL_EXT_pixel_transform = Load_GL_EXT_pixel_transform(this);
	mExtensions.mGL_EXT_pixel_transform_color_table = Load_GL_EXT_pixel_transform_color_table(this);
	mExtensions.mGL_EXT_point_parameters = Load_GL_EXT_point_parameters(this);
	mExtensions.mGL_EXT_polygon_offset = Load_GL_EXT_polygon_offset(this);
	mExtensions.mGL_EXT_rescale_normal = Load_GL_EXT_rescale_normal(this);
	mExtensions.mGL_EXT_secondary_color = Load_GL_EXT_secondary_color(this);
	mExtensions.mGL_EXT_separate_specular_color = Load_GL_EXT_separate_specular_color(this);
	mExtensions.mGL_EXT_shadow_funcs = Load_GL_EXT_shadow_funcs(this);
	mExtensions.mGL_EXT_shared_texture_palette = Load_GL_EXT_shared_texture_palette(this);
	mExtensions.mGL_EXT_stencil_two_side = Load_GL_EXT_stencil_two_side(this);
	mExtensions.mGL_EXT_stencil_wrap = Load_GL_EXT_stencil_wrap(this);
	mExtensions.mGL_EXT_subtexture = Load_GL_EXT_subtexture(this);
	mExtensions.mGL_EXT_texture = Load_GL_EXT_texture(this);
	mExtensions.mGL_EXT_texture3D = Load_GL_EXT_texture3D(this);
	mExtensions.mGL_EXT_texture_compression_s3tc = Load_GL_EXT_texture_compression_s3tc(this);
	mExtensions.mGL_EXT_texture_cube_map = Load_GL_EXT_texture_cube_map(this);
	mExtensions.mGL_EXT_texture_env_add = Load_GL_EXT_texture_env_add(this);
	mExtensions.mGL_EXT_texture_env_combine = Load_GL_EXT_texture_env_combine(this);
	mExtensions.mGL_EXT_texture_env_dot3 = Load_GL_EXT_texture_env_dot3(this);
	mExtensions.mGL_EXT_texture_filter_anisotropic = Load_GL_EXT_texture_filter_anisotropic(this);
	mExtensions.mGL_EXT_texture_lod_bias = Load_GL_EXT_texture_lod_bias(this);
	mExtensions.mGL_EXT_texture_object = Load_GL_EXT_texture_object(this);
	mExtensions.mGL_EXT_texture_perturb_normal = Load_GL_EXT_texture_perturb_normal(this);
	mExtensions.mGL_EXT_vertex_array = Load_GL_EXT_vertex_array(this);
	mExtensions.mGL_EXT_vertex_shader = Load_GL_EXT_vertex_shader(this);
	mExtensions.mGL_EXT_vertex_weighting = Load_GL_EXT_vertex_weighting(this);
	mExtensions.mGL_FfdMaskSGIX = Load_GL_FfdMaskSGIX(this);
	mExtensions.mGL_HP_convolution_border_modes = Load_GL_HP_convolution_border_modes(this);
	mExtensions.mGL_HP_image_transform = Load_GL_HP_image_transform(this);
	mExtensions.mGL_HP_occlusion_test = Load_GL_HP_occlusion_test(this);
	mExtensions.mGL_HP_texture_lighting = Load_GL_HP_texture_lighting(this);
	mExtensions.mGL_IBM_cull_vertex = Load_GL_IBM_cull_vertex(this);
	mExtensions.mGL_IBM_multimode_draw_arrays = Load_GL_IBM_multimode_draw_arrays(this);
	mExtensions.mGL_IBM_rasterpos_clip = Load_GL_IBM_rasterpos_clip(this);
	mExtensions.mGL_IBM_texture_mirrored_repeat = Load_GL_IBM_texture_mirrored_repeat(this);
	mExtensions.mGL_IBM_vertex_array_lists = Load_GL_IBM_vertex_array_lists(this);
	mExtensions.mGL_INGR_color_clamp = Load_GL_INGR_color_clamp(this);
	mExtensions.mGL_INGR_interlace_read = Load_GL_INGR_interlace_read(this);
	mExtensions.mGL_INGR_palette_buffer = Load_GL_INGR_palette_buffer(this);
	mExtensions.mGL_INTEL_parallel_arrays = Load_GL_INTEL_parallel_arrays(this);
	mExtensions.mGL_INTEL_texture_scissor = Load_GL_INTEL_texture_scissor(this);
	mExtensions.mGL_MESA_resize_buffers = Load_GL_MESA_resize_buffers(this);
	mExtensions.mGL_MESA_window_pos = Load_GL_MESA_window_pos(this);
	mExtensions.mGL_NV_blend_square = Load_GL_NV_blend_square(this);
	mExtensions.mGL_NV_copy_depth_to_color = Load_GL_NV_copy_depth_to_color(this);
	mExtensions.mGL_NV_depth_clamp = Load_GL_NV_depth_clamp(this);
	mExtensions.mGL_NV_evaluators = Load_GL_NV_evaluators(this);
	mExtensions.mGL_NV_fence = Load_GL_NV_fence(this);
	mExtensions.mGL_NV_fog_distance = Load_GL_NV_fog_distance(this);
	mExtensions.mGL_NV_light_max_exponent = Load_GL_NV_light_max_exponent(this);
	mExtensions.mGL_NV_multisample_filter_hint = Load_GL_NV_multisample_filter_hint(this);
	mExtensions.mGL_NV_occlusion_query = Load_GL_NV_occlusion_query(this);
	mExtensions.mGL_NV_packed_depth_stencil = Load_GL_NV_packed_depth_stencil(this);
	mExtensions.mGL_NV_point_sprite = Load_GL_NV_point_sprite(this);
	mExtensions.mGL_NV_register_combiners = Load_GL_NV_register_combiners(this);
	mExtensions.mGL_NV_register_combiners2 = Load_GL_NV_register_combiners2(this);
	mExtensions.mGL_NV_texgen_emboss = Load_GL_NV_texgen_emboss(this);
	mExtensions.mGL_NV_texgen_reflection = Load_GL_NV_texgen_reflection(this);
	mExtensions.mGL_NV_texture_compression_vtc = Load_GL_NV_texture_compression_vtc(this);
	mExtensions.mGL_NV_texture_env_combine4 = Load_GL_NV_texture_env_combine4(this);
	mExtensions.mGL_NV_texture_rectangle = Load_GL_NV_texture_rectangle(this);
	mExtensions.mGL_NV_texture_shader = Load_GL_NV_texture_shader(this);
	mExtensions.mGL_NV_texture_shader2 = Load_GL_NV_texture_shader2(this);
	mExtensions.mGL_NV_texture_shader3 = Load_GL_NV_texture_shader3(this);
	mExtensions.mGL_NV_vertex_array_range = Load_GL_NV_vertex_array_range(this);
	mExtensions.mGL_NV_vertex_array_range2 = Load_GL_NV_vertex_array_range2(this);
	mExtensions.mGL_NV_vertex_program = Load_GL_NV_vertex_program(this);
	mExtensions.mGL_NV_vertex_program1_1 = Load_GL_NV_vertex_program1_1(this);
	mExtensions.mGL_OML_interlace = Load_GL_OML_interlace(this);
	mExtensions.mGL_OML_resample = Load_GL_OML_resample(this);
	mExtensions.mGL_OML_subsample = Load_GL_OML_subsample(this);
	mExtensions.mGL_PGI_misc_hints = Load_GL_PGI_misc_hints(this);
	mExtensions.mGL_PGI_vertex_hints = Load_GL_PGI_vertex_hints(this);
	mExtensions.mGL_REND_screen_coordinates = Load_GL_REND_screen_coordinates(this);
	mExtensions.mGL_SGIS_detail_texture = Load_GL_SGIS_detail_texture(this);
	mExtensions.mGL_SGIS_fog_function = Load_GL_SGIS_fog_function(this);
	mExtensions.mGL_SGIS_generate_mipmap = Load_GL_SGIS_generate_mipmap(this);
	mExtensions.mGL_SGIS_multisample = Load_GL_SGIS_multisample(this);
	mExtensions.mGL_SGIS_pixel_texture = Load_GL_SGIS_pixel_texture(this);
	mExtensions.mGL_SGIS_point_line_texgen = Load_GL_SGIS_point_line_texgen(this);
	mExtensions.mGL_SGIS_point_parameters = Load_GL_SGIS_point_parameters(this);
	mExtensions.mGL_SGIS_sharpen_texture = Load_GL_SGIS_sharpen_texture(this);
	mExtensions.mGL_SGIS_texture4D = Load_GL_SGIS_texture4D(this);
	mExtensions.mGL_SGIS_texture_border_clamp = Load_GL_SGIS_texture_border_clamp(this);
	mExtensions.mGL_SGIS_texture_color_mask = Load_GL_SGIS_texture_color_mask(this);
	mExtensions.mGL_SGIS_texture_edge_clamp = Load_GL_SGIS_texture_edge_clamp(this);
	mExtensions.mGL_SGIS_texture_filter4 = Load_GL_SGIS_texture_filter4(this);
	mExtensions.mGL_SGIS_texture_lod = Load_GL_SGIS_texture_lod(this);
	mExtensions.mGL_SGIS_texture_select = Load_GL_SGIS_texture_select(this);
	mExtensions.mGL_SGIX_async = Load_GL_SGIX_async(this);
	mExtensions.mGL_SGIX_async_histogram = Load_GL_SGIX_async_histogram(this);
	mExtensions.mGL_SGIX_async_pixel = Load_GL_SGIX_async_pixel(this);
	mExtensions.mGL_SGIX_blend_alpha_minmax = Load_GL_SGIX_blend_alpha_minmax(this);
	mExtensions.mGL_SGIX_calligraphic_fragment = Load_GL_SGIX_calligraphic_fragment(this);
	mExtensions.mGL_SGIX_clipmap = Load_GL_SGIX_clipmap(this);
	mExtensions.mGL_SGIX_convolution_accuracy = Load_GL_SGIX_convolution_accuracy(this);
	mExtensions.mGL_SGIX_depth_pass_instrument = Load_GL_SGIX_depth_pass_instrument(this);
	mExtensions.mGL_SGIX_depth_texture = Load_GL_SGIX_depth_texture(this);
	mExtensions.mGL_SGIX_flush_raster = Load_GL_SGIX_flush_raster(this);
	mExtensions.mGL_SGIX_fog_offset = Load_GL_SGIX_fog_offset(this);
	mExtensions.mGL_SGIX_fog_scale = Load_GL_SGIX_fog_scale(this);
	mExtensions.mGL_SGIX_fragment_lighting = Load_GL_SGIX_fragment_lighting(this);
	mExtensions.mGL_SGIX_framezoom = Load_GL_SGIX_framezoom(this);
	mExtensions.mGL_SGIX_igloo_interface = Load_GL_SGIX_igloo_interface(this);
	mExtensions.mGL_SGIX_impact_pixel_texture = Load_GL_SGIX_impact_pixel_texture(this);
	mExtensions.mGL_SGIX_instruments = Load_GL_SGIX_instruments(this);
	mExtensions.mGL_SGIX_interlace = Load_GL_SGIX_interlace(this);
	mExtensions.mGL_SGIX_ir_instrument1 = Load_GL_SGIX_ir_instrument1(this);
	mExtensions.mGL_SGIX_list_priority = Load_GL_SGIX_list_priority(this);
	mExtensions.mGL_SGIX_pixel_texture = Load_GL_SGIX_pixel_texture(this);
	mExtensions.mGL_SGIX_pixel_tiles = Load_GL_SGIX_pixel_tiles(this);
	mExtensions.mGL_SGIX_polynomial_ffd = Load_GL_SGIX_polynomial_ffd(this);
	mExtensions.mGL_SGIX_reference_plane = Load_GL_SGIX_reference_plane(this);
	mExtensions.mGL_SGIX_resample = Load_GL_SGIX_resample(this);
	mExtensions.mGL_SGIX_scalebias_hint = Load_GL_SGIX_scalebias_hint(this);
	mExtensions.mGL_SGIX_shadow = Load_GL_SGIX_shadow(this);
	mExtensions.mGL_SGIX_shadow_ambient = Load_GL_SGIX_shadow_ambient(this);
	mExtensions.mGL_SGIX_sprite = Load_GL_SGIX_sprite(this);
	mExtensions.mGL_SGIX_subsample = Load_GL_SGIX_subsample(this);
	mExtensions.mGL_SGIX_tag_sample_buffer = Load_GL_SGIX_tag_sample_buffer(this);
	mExtensions.mGL_SGIX_texture_add_env = Load_GL_SGIX_texture_add_env(this);
	mExtensions.mGL_SGIX_texture_coordinate_clamp = Load_GL_SGIX_texture_coordinate_clamp(this);
	mExtensions.mGL_SGIX_texture_lod_bias = Load_GL_SGIX_texture_lod_bias(this);
	mExtensions.mGL_SGIX_texture_multi_buffer = Load_GL_SGIX_texture_multi_buffer(this);
	mExtensions.mGL_SGIX_texture_scale_bias = Load_GL_SGIX_texture_scale_bias(this);
	mExtensions.mGL_SGIX_texture_select = Load_GL_SGIX_texture_select(this);
	mExtensions.mGL_SGIX_vertex_preclip = Load_GL_SGIX_vertex_preclip(this);
	mExtensions.mGL_SGIX_ycrcb = Load_GL_SGIX_ycrcb(this);
	mExtensions.mGL_SGIX_ycrcb_subsample = Load_GL_SGIX_ycrcb_subsample(this);
	mExtensions.mGL_SGIX_ycrcba = Load_GL_SGIX_ycrcba(this);
	mExtensions.mGL_SGI_color_matrix = Load_GL_SGI_color_matrix(this);
	mExtensions.mGL_SGI_color_table = Load_GL_SGI_color_table(this);
	mExtensions.mGL_SGI_depth_pass_instrument = Load_GL_SGI_depth_pass_instrument(this);
	mExtensions.mGL_SGI_texture_color_table = Load_GL_SGI_texture_color_table(this);
	mExtensions.mGL_SUNX_constant_data = Load_GL_SUNX_constant_data(this);
	mExtensions.mGL_SUN_convolution_border_modes = Load_GL_SUN_convolution_border_modes(this);
	mExtensions.mGL_SUN_global_alpha = Load_GL_SUN_global_alpha(this);
	mExtensions.mGL_SUN_mesh_array = Load_GL_SUN_mesh_array(this);
	mExtensions.mGL_SUN_slice_accum = Load_GL_SUN_slice_accum(this);
	mExtensions.mGL_SUN_triangle_list = Load_GL_SUN_triangle_list(this);
	mExtensions.mGL_SUN_vertex = Load_GL_SUN_vertex(this);
	if (mExtensions.mGL_VERSION_1_2) Load_GL_VERSION_1_2(this);
	if (mExtensions.mGL_VERSION_1_3) Load_GL_VERSION_1_3(this);
	if (mExtensions.mGL_VERSION_1_4) Load_GL_VERSION_1_4(this);
	mExtensions.mGL_WIN_phong_shading = Load_GL_WIN_phong_shading(this);
	mExtensions.mGL_WIN_specular_fog = Load_GL_WIN_specular_fog(this);
#if defined(_WIN32)
    wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) GetProcedure("wglGetExtensionsStringARB");
    wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) GetProcedure("wglGetExtensionsStringEXT");
    mExtensions.mWGL_ARB_extensions_string = wglGetExtensionsStringARB != NULL;
    mExtensions.mWGL_EXT_extensions_string = wglGetExtensionsStringEXT != NULL;

	mExtensions.mWGL_3DFX_multisample = Load_WGL_3DFX_multisample(this);
	mExtensions.mWGL_ARB_buffer_region = Load_WGL_ARB_buffer_region(this);
	mExtensions.mWGL_ARB_make_current_read = Load_WGL_ARB_make_current_read(this);
	mExtensions.mWGL_ARB_multisample = Load_WGL_ARB_multisample(this);
	mExtensions.mWGL_ARB_pbuffer = Load_WGL_ARB_pbuffer(this);
	mExtensions.mWGL_ARB_pixel_format = Load_WGL_ARB_pixel_format(this);
	mExtensions.mWGL_ARB_render_texture = Load_WGL_ARB_render_texture(this);
	mExtensions.mWGL_EXT_depth_float = Load_WGL_EXT_depth_float(this);
	mExtensions.mWGL_EXT_display_color_table = Load_WGL_EXT_display_color_table(this);
	mExtensions.mWGL_EXT_make_current_read = Load_WGL_EXT_make_current_read(this);
	mExtensions.mWGL_EXT_multisample = Load_WGL_EXT_multisample(this);
	mExtensions.mWGL_EXT_pbuffer = Load_WGL_EXT_pbuffer(this);
	mExtensions.mWGL_EXT_pixel_format = Load_WGL_EXT_pixel_format(this);
	mExtensions.mWGL_EXT_swap_control = Load_WGL_EXT_swap_control(this);
	mExtensions.mWGL_I3D_digital_video_control = Load_WGL_I3D_digital_video_control(this);
	mExtensions.mWGL_I3D_gamma = Load_WGL_I3D_gamma(this);
	mExtensions.mWGL_I3D_genlock = Load_WGL_I3D_genlock(this);
	mExtensions.mWGL_I3D_image_buffer = Load_WGL_I3D_image_buffer(this);
	mExtensions.mWGL_I3D_swap_frame_lock = Load_WGL_I3D_swap_frame_lock(this);
	mExtensions.mWGL_I3D_swap_frame_usage = Load_WGL_I3D_swap_frame_usage(this);
	mExtensions.mWGL_NV_vertex_array_range = Load_WGL_NV_vertex_array_range(this);
	mExtensions.mWGL_OML_sync_control = Load_WGL_OML_sync_control(this);
#endif //_WIN32

	if (ext)
		memcpy(ext, &mExtensions, sizeof(GLExtGenExtensions));

	if (funPtr)
	{
#ifdef GL_3DFX_tbuffer
		funPtr->glTbufferMask3DFX = glTbufferMask3DFX;
#endif //GL_3DFX_tbuffer

#ifdef GL_ARB_imaging
		funPtr->glBlendColor = glBlendColor;
		funPtr->glBlendEquation = glBlendEquation;
		funPtr->glColorTable = glColorTable;
		funPtr->glColorTableParameterfv = glColorTableParameterfv;
		funPtr->glColorTableParameteriv = glColorTableParameteriv;
		funPtr->glCopyColorTable = glCopyColorTable;
		funPtr->glGetColorTable = glGetColorTable;
		funPtr->glGetColorTableParameterfv = glGetColorTableParameterfv;
		funPtr->glGetColorTableParameteriv = glGetColorTableParameteriv;
		funPtr->glColorSubTable = glColorSubTable;
		funPtr->glCopyColorSubTable = glCopyColorSubTable;
		funPtr->glConvolutionFilter1D = glConvolutionFilter1D;
		funPtr->glConvolutionFilter2D = glConvolutionFilter2D;
		funPtr->glConvolutionParameterf = glConvolutionParameterf;
		funPtr->glConvolutionParameterfv = glConvolutionParameterfv;
		funPtr->glConvolutionParameteri = glConvolutionParameteri;
		funPtr->glConvolutionParameteriv = glConvolutionParameteriv;
		funPtr->glCopyConvolutionFilter1D = glCopyConvolutionFilter1D;
		funPtr->glCopyConvolutionFilter2D = glCopyConvolutionFilter2D;
		funPtr->glGetConvolutionFilter = glGetConvolutionFilter;
		funPtr->glGetConvolutionParameterfv = glGetConvolutionParameterfv;
		funPtr->glGetConvolutionParameteriv = glGetConvolutionParameteriv;
		funPtr->glGetSeparableFilter = glGetSeparableFilter;
		funPtr->glSeparableFilter2D = glSeparableFilter2D;
		funPtr->glGetHistogram = glGetHistogram;
		funPtr->glGetHistogramParameterfv = glGetHistogramParameterfv;
		funPtr->glGetHistogramParameteriv = glGetHistogramParameteriv;
		funPtr->glGetMinmax = glGetMinmax;
		funPtr->glGetMinmaxParameterfv = glGetMinmaxParameterfv;
		funPtr->glGetMinmaxParameteriv = glGetMinmaxParameteriv;
		funPtr->glHistogram = glHistogram;
		funPtr->glMinmax = glMinmax;
		funPtr->glResetHistogram = glResetHistogram;
		funPtr->glResetMinmax = glResetMinmax;
#endif //GL_ARB_imaging

#ifdef GL_ARB_matrix_palette
		funPtr->glCurrentPaletteMatrixARB = glCurrentPaletteMatrixARB;
		funPtr->glMatrixIndexubvARB = glMatrixIndexubvARB;
		funPtr->glMatrixIndexusvARB = glMatrixIndexusvARB;
		funPtr->glMatrixIndexuivARB = glMatrixIndexuivARB;
		funPtr->glMatrixIndexPointerARB = glMatrixIndexPointerARB;
#endif //GL_ARB_matrix_palette

#ifdef GL_ARB_multisample
		funPtr->glSampleCoverageARB = glSampleCoverageARB;
#endif //GL_ARB_multisample

#ifdef GL_ARB_multitexture
		funPtr->glActiveTextureARB = glActiveTextureARB;
		funPtr->glClientActiveTextureARB = glClientActiveTextureARB;
		funPtr->glMultiTexCoord1dARB = glMultiTexCoord1dARB;
		funPtr->glMultiTexCoord1dvARB = glMultiTexCoord1dvARB;
		funPtr->glMultiTexCoord1fARB = glMultiTexCoord1fARB;
		funPtr->glMultiTexCoord1fvARB = glMultiTexCoord1fvARB;
		funPtr->glMultiTexCoord1iARB = glMultiTexCoord1iARB;
		funPtr->glMultiTexCoord1ivARB = glMultiTexCoord1ivARB;
		funPtr->glMultiTexCoord1sARB = glMultiTexCoord1sARB;
		funPtr->glMultiTexCoord1svARB = glMultiTexCoord1svARB;
		funPtr->glMultiTexCoord2dARB = glMultiTexCoord2dARB;
		funPtr->glMultiTexCoord2dvARB = glMultiTexCoord2dvARB;
		funPtr->glMultiTexCoord2fARB = glMultiTexCoord2fARB;
		funPtr->glMultiTexCoord2fvARB = glMultiTexCoord2fvARB;
		funPtr->glMultiTexCoord2iARB = glMultiTexCoord2iARB;
		funPtr->glMultiTexCoord2ivARB = glMultiTexCoord2ivARB;
		funPtr->glMultiTexCoord2sARB = glMultiTexCoord2sARB;
		funPtr->glMultiTexCoord2svARB = glMultiTexCoord2svARB;
		funPtr->glMultiTexCoord3dARB = glMultiTexCoord3dARB;
		funPtr->glMultiTexCoord3dvARB = glMultiTexCoord3dvARB;
		funPtr->glMultiTexCoord3fARB = glMultiTexCoord3fARB;
		funPtr->glMultiTexCoord3fvARB = glMultiTexCoord3fvARB;
		funPtr->glMultiTexCoord3iARB = glMultiTexCoord3iARB;
		funPtr->glMultiTexCoord3ivARB = glMultiTexCoord3ivARB;
		funPtr->glMultiTexCoord3sARB = glMultiTexCoord3sARB;
		funPtr->glMultiTexCoord3svARB = glMultiTexCoord3svARB;
		funPtr->glMultiTexCoord4dARB = glMultiTexCoord4dARB;
		funPtr->glMultiTexCoord4dvARB = glMultiTexCoord4dvARB;
		funPtr->glMultiTexCoord4fARB = glMultiTexCoord4fARB;
		funPtr->glMultiTexCoord4fvARB = glMultiTexCoord4fvARB;
		funPtr->glMultiTexCoord4iARB = glMultiTexCoord4iARB;
		funPtr->glMultiTexCoord4ivARB = glMultiTexCoord4ivARB;
		funPtr->glMultiTexCoord4sARB = glMultiTexCoord4sARB;
		funPtr->glMultiTexCoord4svARB = glMultiTexCoord4svARB;
#endif //GL_ARB_multitexture

#ifdef GL_ARB_point_parameters
		funPtr->glPointParameterfARB = glPointParameterfARB;
		funPtr->glPointParameterfvARB = glPointParameterfvARB;
#endif //GL_ARB_point_parameters

#ifdef GL_ARB_texture_compression
		funPtr->glCompressedTexImage3DARB = glCompressedTexImage3DARB;
		funPtr->glCompressedTexImage2DARB = glCompressedTexImage2DARB;
		funPtr->glCompressedTexImage1DARB = glCompressedTexImage1DARB;
		funPtr->glCompressedTexSubImage3DARB = glCompressedTexSubImage3DARB;
		funPtr->glCompressedTexSubImage2DARB = glCompressedTexSubImage2DARB;
		funPtr->glCompressedTexSubImage1DARB = glCompressedTexSubImage1DARB;
		funPtr->glGetCompressedTexImageARB = glGetCompressedTexImageARB;
#endif //GL_ARB_texture_compression

#ifdef GL_ARB_transpose_matrix
		funPtr->glLoadTransposeMatrixfARB = glLoadTransposeMatrixfARB;
		funPtr->glLoadTransposeMatrixdARB = glLoadTransposeMatrixdARB;
		funPtr->glMultTransposeMatrixfARB = glMultTransposeMatrixfARB;
		funPtr->glMultTransposeMatrixdARB = glMultTransposeMatrixdARB;
#endif //GL_ARB_transpose_matrix

#ifdef GL_ARB_vertex_blend
		funPtr->glWeightbvARB = glWeightbvARB;
		funPtr->glWeightsvARB = glWeightsvARB;
		funPtr->glWeightivARB = glWeightivARB;
		funPtr->glWeightfvARB = glWeightfvARB;
		funPtr->glWeightdvARB = glWeightdvARB;
		funPtr->glWeightubvARB = glWeightubvARB;
		funPtr->glWeightusvARB = glWeightusvARB;
		funPtr->glWeightuivARB = glWeightuivARB;
		funPtr->glWeightPointerARB = glWeightPointerARB;
		funPtr->glVertexBlendARB = glVertexBlendARB;
#endif //GL_ARB_vertex_blend

#ifdef GL_ARB_vertex_program
		funPtr->glVertexAttrib1sARB = glVertexAttrib1sARB;
		funPtr->glVertexAttrib1fARB = glVertexAttrib1fARB;
		funPtr->glVertexAttrib1dARB = glVertexAttrib1dARB;
		funPtr->glVertexAttrib2sARB = glVertexAttrib2sARB;
		funPtr->glVertexAttrib2fARB = glVertexAttrib2fARB;
		funPtr->glVertexAttrib2dARB = glVertexAttrib2dARB;
		funPtr->glVertexAttrib3sARB = glVertexAttrib3sARB;
		funPtr->glVertexAttrib3fARB = glVertexAttrib3fARB;
		funPtr->glVertexAttrib3dARB = glVertexAttrib3dARB;
		funPtr->glVertexAttrib4sARB = glVertexAttrib4sARB;
		funPtr->glVertexAttrib4fARB = glVertexAttrib4fARB;
		funPtr->glVertexAttrib4dARB = glVertexAttrib4dARB;
		funPtr->glVertexAttrib4NubARB = glVertexAttrib4NubARB;
		funPtr->glVertexAttrib1svARB = glVertexAttrib1svARB;
		funPtr->glVertexAttrib1fvARB = glVertexAttrib1fvARB;
		funPtr->glVertexAttrib1dvARB = glVertexAttrib1dvARB;
		funPtr->glVertexAttrib2svARB = glVertexAttrib2svARB;
		funPtr->glVertexAttrib2fvARB = glVertexAttrib2fvARB;
		funPtr->glVertexAttrib2dvARB = glVertexAttrib2dvARB;
		funPtr->glVertexAttrib3svARB = glVertexAttrib3svARB;
		funPtr->glVertexAttrib3fvARB = glVertexAttrib3fvARB;
		funPtr->glVertexAttrib3dvARB = glVertexAttrib3dvARB;
		funPtr->glVertexAttrib4bvARB = glVertexAttrib4bvARB;
		funPtr->glVertexAttrib4svARB = glVertexAttrib4svARB;
		funPtr->glVertexAttrib4ivARB = glVertexAttrib4ivARB;
		funPtr->glVertexAttrib4ubvARB = glVertexAttrib4ubvARB;
		funPtr->glVertexAttrib4usvARB = glVertexAttrib4usvARB;
		funPtr->glVertexAttrib4uivARB = glVertexAttrib4uivARB;
		funPtr->glVertexAttrib4fvARB = glVertexAttrib4fvARB;
		funPtr->glVertexAttrib4dvARB = glVertexAttrib4dvARB;
		funPtr->glVertexAttrib4NbvARB = glVertexAttrib4NbvARB;
		funPtr->glVertexAttrib4NsvARB = glVertexAttrib4NsvARB;
		funPtr->glVertexAttrib4NivARB = glVertexAttrib4NivARB;
		funPtr->glVertexAttrib4NubvARB = glVertexAttrib4NubvARB;
		funPtr->glVertexAttrib4NusvARB = glVertexAttrib4NusvARB;
		funPtr->glVertexAttrib4NuivARB = glVertexAttrib4NuivARB;
		funPtr->glVertexAttribPointerARB = glVertexAttribPointerARB;
		funPtr->glEnableVertexAttribArrayARB = glEnableVertexAttribArrayARB;
		funPtr->glDisableVertexAttribArrayARB = glDisableVertexAttribArrayARB;
		funPtr->glProgramStringARB = glProgramStringARB;
		funPtr->glBindProgramARB = glBindProgramARB;
		funPtr->glDeleteProgramsARB = glDeleteProgramsARB;
		funPtr->glGenProgramsARB = glGenProgramsARB;
		funPtr->glProgramEnvParameter4fARB = glProgramEnvParameter4fARB;
		funPtr->glProgramEnvParameter4dARB = glProgramEnvParameter4dARB;
		funPtr->glProgramEnvParameter4fvARB = glProgramEnvParameter4fvARB;
		funPtr->glProgramEnvParameter4dvARB = glProgramEnvParameter4dvARB;
		funPtr->glProgramLocalParameter4fARB = glProgramLocalParameter4fARB;
		funPtr->glProgramLocalParameter4dARB = glProgramLocalParameter4dARB;
		funPtr->glProgramLocalParameter4fvARB = glProgramLocalParameter4fvARB;
		funPtr->glProgramLocalParameter4dvARB = glProgramLocalParameter4dvARB;
		funPtr->glGetProgramEnvParameterfvARB = glGetProgramEnvParameterfvARB;
		funPtr->glGetProgramEnvParameterdvARB = glGetProgramEnvParameterdvARB;
		funPtr->glGetProgramLocalParameterfvARB = glGetProgramLocalParameterfvARB;
		funPtr->glGetProgramLocalParameterdvARB = glGetProgramLocalParameterdvARB;
		funPtr->glGetProgramivARB = glGetProgramivARB;
		funPtr->glGetProgramStringARB = glGetProgramStringARB;
		funPtr->glGetVertexAttribdvARB = glGetVertexAttribdvARB;
		funPtr->glGetVertexAttribfvARB = glGetVertexAttribfvARB;
		funPtr->glGetVertexAttribivARB = glGetVertexAttribivARB;
		funPtr->glGetVertexAttribPointervARB = glGetVertexAttribPointervARB;
		funPtr->glIsProgramARB = glIsProgramARB;
#endif //GL_ARB_vertex_program

#ifdef GL_ARB_window_pos
		funPtr->glWindowPos2dARB = glWindowPos2dARB;
		funPtr->glWindowPos2dvARB = glWindowPos2dvARB;
		funPtr->glWindowPos2fARB = glWindowPos2fARB;
		funPtr->glWindowPos2fvARB = glWindowPos2fvARB;
		funPtr->glWindowPos2iARB = glWindowPos2iARB;
		funPtr->glWindowPos2ivARB = glWindowPos2ivARB;
		funPtr->glWindowPos2sARB = glWindowPos2sARB;
		funPtr->glWindowPos2svARB = glWindowPos2svARB;
		funPtr->glWindowPos3dARB = glWindowPos3dARB;
		funPtr->glWindowPos3dvARB = glWindowPos3dvARB;
		funPtr->glWindowPos3fARB = glWindowPos3fARB;
		funPtr->glWindowPos3fvARB = glWindowPos3fvARB;
		funPtr->glWindowPos3iARB = glWindowPos3iARB;
		funPtr->glWindowPos3ivARB = glWindowPos3ivARB;
		funPtr->glWindowPos3sARB = glWindowPos3sARB;
		funPtr->glWindowPos3svARB = glWindowPos3svARB;
#endif //GL_ARB_window_pos

#ifdef GL_ATI_element_array
		funPtr->glElementPointerATI = glElementPointerATI;
		funPtr->glDrawElementArrayATI = glDrawElementArrayATI;
		funPtr->glDrawRangeElementArrayATI = glDrawRangeElementArrayATI;
#endif //GL_ATI_element_array

#ifdef GL_ATI_envmap_bumpmap
		funPtr->glTexBumpParameterivATI = glTexBumpParameterivATI;
		funPtr->glTexBumpParameterfvATI = glTexBumpParameterfvATI;
		funPtr->glGetTexBumpParameterivATI = glGetTexBumpParameterivATI;
		funPtr->glGetTexBumpParameterfvATI = glGetTexBumpParameterfvATI;
#endif //GL_ATI_envmap_bumpmap

#ifdef GL_ATI_fragment_shader
		funPtr->glGenFragmentShadersATI = glGenFragmentShadersATI;
		funPtr->glBindFragmentShaderATI = glBindFragmentShaderATI;
		funPtr->glDeleteFragmentShaderATI = glDeleteFragmentShaderATI;
		funPtr->glBeginFragmentShaderATI = glBeginFragmentShaderATI;
		funPtr->glEndFragmentShaderATI = glEndFragmentShaderATI;
		funPtr->glPassTexCoordATI = glPassTexCoordATI;
		funPtr->glSampleMapATI = glSampleMapATI;
		funPtr->glColorFragmentOp1ATI = glColorFragmentOp1ATI;
		funPtr->glColorFragmentOp2ATI = glColorFragmentOp2ATI;
		funPtr->glColorFragmentOp3ATI = glColorFragmentOp3ATI;
		funPtr->glAlphaFragmentOp1ATI = glAlphaFragmentOp1ATI;
		funPtr->glAlphaFragmentOp2ATI = glAlphaFragmentOp2ATI;
		funPtr->glAlphaFragmentOp3ATI = glAlphaFragmentOp3ATI;
		funPtr->glSetFragmentShaderConstantATI = glSetFragmentShaderConstantATI;
#endif //GL_ATI_fragment_shader

#ifdef GL_ATI_pn_triangles
		funPtr->glPNTrianglesiATI = glPNTrianglesiATI;
		funPtr->glPNTrianglesfATI = glPNTrianglesfATI;
#endif //GL_ATI_pn_triangles

#ifdef GL_ATI_vertex_array_object
		funPtr->glNewObjectBufferATI = glNewObjectBufferATI;
		funPtr->glIsObjectBufferATI = glIsObjectBufferATI;
		funPtr->glUpdateObjectBufferATI = glUpdateObjectBufferATI;
		funPtr->glGetObjectBufferfvATI = glGetObjectBufferfvATI;
		funPtr->glGetObjectBufferivATI = glGetObjectBufferivATI;
		funPtr->glDeleteObjectBufferATI = glDeleteObjectBufferATI;
		funPtr->glArrayObjectATI = glArrayObjectATI;
		funPtr->glGetArrayObjectfvATI = glGetArrayObjectfvATI;
		funPtr->glGetArrayObjectivATI = glGetArrayObjectivATI;
		funPtr->glVariantArrayObjectATI = glVariantArrayObjectATI;
		funPtr->glGetVariantArrayObjectfvATI = glGetVariantArrayObjectfvATI;
		funPtr->glGetVariantArrayObjectivATI = glGetVariantArrayObjectivATI;
#endif //GL_ATI_vertex_array_object

#ifdef GL_ATI_vertex_streams
		funPtr->glVertexStream1sATI = glVertexStream1sATI;
		funPtr->glVertexStream1svATI = glVertexStream1svATI;
		funPtr->glVertexStream1iATI = glVertexStream1iATI;
		funPtr->glVertexStream1ivATI = glVertexStream1ivATI;
		funPtr->glVertexStream1fATI = glVertexStream1fATI;
		funPtr->glVertexStream1fvATI = glVertexStream1fvATI;
		funPtr->glVertexStream1dATI = glVertexStream1dATI;
		funPtr->glVertexStream1dvATI = glVertexStream1dvATI;
		funPtr->glVertexStream2sATI = glVertexStream2sATI;
		funPtr->glVertexStream2svATI = glVertexStream2svATI;
		funPtr->glVertexStream2iATI = glVertexStream2iATI;
		funPtr->glVertexStream2ivATI = glVertexStream2ivATI;
		funPtr->glVertexStream2fATI = glVertexStream2fATI;
		funPtr->glVertexStream2fvATI = glVertexStream2fvATI;
		funPtr->glVertexStream2dATI = glVertexStream2dATI;
		funPtr->glVertexStream2dvATI = glVertexStream2dvATI;
		funPtr->glVertexStream3sATI = glVertexStream3sATI;
		funPtr->glVertexStream3svATI = glVertexStream3svATI;
		funPtr->glVertexStream3iATI = glVertexStream3iATI;
		funPtr->glVertexStream3ivATI = glVertexStream3ivATI;
		funPtr->glVertexStream3fATI = glVertexStream3fATI;
		funPtr->glVertexStream3fvATI = glVertexStream3fvATI;
		funPtr->glVertexStream3dATI = glVertexStream3dATI;
		funPtr->glVertexStream3dvATI = glVertexStream3dvATI;
		funPtr->glVertexStream4sATI = glVertexStream4sATI;
		funPtr->glVertexStream4svATI = glVertexStream4svATI;
		funPtr->glVertexStream4iATI = glVertexStream4iATI;
		funPtr->glVertexStream4ivATI = glVertexStream4ivATI;
		funPtr->glVertexStream4fATI = glVertexStream4fATI;
		funPtr->glVertexStream4fvATI = glVertexStream4fvATI;
		funPtr->glVertexStream4dATI = glVertexStream4dATI;
		funPtr->glVertexStream4dvATI = glVertexStream4dvATI;
		funPtr->glNormalStream3bATI = glNormalStream3bATI;
		funPtr->glNormalStream3bvATI = glNormalStream3bvATI;
		funPtr->glNormalStream3sATI = glNormalStream3sATI;
		funPtr->glNormalStream3svATI = glNormalStream3svATI;
		funPtr->glNormalStream3iATI = glNormalStream3iATI;
		funPtr->glNormalStream3ivATI = glNormalStream3ivATI;
		funPtr->glNormalStream3fATI = glNormalStream3fATI;
		funPtr->glNormalStream3fvATI = glNormalStream3fvATI;
		funPtr->glNormalStream3dATI = glNormalStream3dATI;
		funPtr->glNormalStream3dvATI = glNormalStream3dvATI;
		funPtr->glClientActiveVertexStreamATI = glClientActiveVertexStreamATI;
		funPtr->glVertexBlendEnviATI = glVertexBlendEnviATI;
		funPtr->glVertexBlendEnvfATI = glVertexBlendEnvfATI;
#endif //GL_ATI_vertex_streams

#ifdef GL_EXT_blend_color
		funPtr->glBlendColorEXT = glBlendColorEXT;
#endif //GL_EXT_blend_color

#ifdef GL_EXT_blend_func_separate
		funPtr->glBlendFuncSeparateEXT = glBlendFuncSeparateEXT;
		funPtr->glBlendFuncSeparateINGR = glBlendFuncSeparateINGR;
#endif //GL_EXT_blend_func_separate

#ifdef GL_EXT_blend_minmax
		funPtr->glBlendEquationEXT = glBlendEquationEXT;
#endif //GL_EXT_blend_minmax

#ifdef GL_EXT_color_subtable
		funPtr->glColorSubTableEXT = glColorSubTableEXT;
		funPtr->glCopyColorSubTableEXT = glCopyColorSubTableEXT;
#endif //GL_EXT_color_subtable

#ifdef GL_EXT_compiled_vertex_array
		funPtr->glLockArraysEXT = glLockArraysEXT;
		funPtr->glUnlockArraysEXT = glUnlockArraysEXT;
#endif //GL_EXT_compiled_vertex_array

#ifdef GL_EXT_convolution
		funPtr->glConvolutionFilter1DEXT = glConvolutionFilter1DEXT;
		funPtr->glConvolutionFilter2DEXT = glConvolutionFilter2DEXT;
		funPtr->glConvolutionParameterfEXT = glConvolutionParameterfEXT;
		funPtr->glConvolutionParameterfvEXT = glConvolutionParameterfvEXT;
		funPtr->glConvolutionParameteriEXT = glConvolutionParameteriEXT;
		funPtr->glConvolutionParameterivEXT = glConvolutionParameterivEXT;
		funPtr->glCopyConvolutionFilter1DEXT = glCopyConvolutionFilter1DEXT;
		funPtr->glCopyConvolutionFilter2DEXT = glCopyConvolutionFilter2DEXT;
		funPtr->glGetConvolutionFilterEXT = glGetConvolutionFilterEXT;
		funPtr->glGetConvolutionParameterfvEXT = glGetConvolutionParameterfvEXT;
		funPtr->glGetConvolutionParameterivEXT = glGetConvolutionParameterivEXT;
		funPtr->glGetSeparableFilterEXT = glGetSeparableFilterEXT;
		funPtr->glSeparableFilter2DEXT = glSeparableFilter2DEXT;
#endif //GL_EXT_convolution

#ifdef GL_EXT_coordinate_frame
		funPtr->glTangent3bEXT = glTangent3bEXT;
		funPtr->glTangent3bvEXT = glTangent3bvEXT;
		funPtr->glTangent3dEXT = glTangent3dEXT;
		funPtr->glTangent3dvEXT = glTangent3dvEXT;
		funPtr->glTangent3fEXT = glTangent3fEXT;
		funPtr->glTangent3fvEXT = glTangent3fvEXT;
		funPtr->glTangent3iEXT = glTangent3iEXT;
		funPtr->glTangent3ivEXT = glTangent3ivEXT;
		funPtr->glTangent3sEXT = glTangent3sEXT;
		funPtr->glTangent3svEXT = glTangent3svEXT;
		funPtr->glBinormal3bEXT = glBinormal3bEXT;
		funPtr->glBinormal3bvEXT = glBinormal3bvEXT;
		funPtr->glBinormal3dEXT = glBinormal3dEXT;
		funPtr->glBinormal3dvEXT = glBinormal3dvEXT;
		funPtr->glBinormal3fEXT = glBinormal3fEXT;
		funPtr->glBinormal3fvEXT = glBinormal3fvEXT;
		funPtr->glBinormal3iEXT = glBinormal3iEXT;
		funPtr->glBinormal3ivEXT = glBinormal3ivEXT;
		funPtr->glBinormal3sEXT = glBinormal3sEXT;
		funPtr->glBinormal3svEXT = glBinormal3svEXT;
		funPtr->glTangentPointerEXT = glTangentPointerEXT;
		funPtr->glBinormalPointerEXT = glBinormalPointerEXT;
#endif //GL_EXT_coordinate_frame

#ifdef GL_EXT_copy_texture
		funPtr->glCopyTexImage1DEXT = glCopyTexImage1DEXT;
		funPtr->glCopyTexImage2DEXT = glCopyTexImage2DEXT;
		funPtr->glCopyTexSubImage1DEXT = glCopyTexSubImage1DEXT;
		funPtr->glCopyTexSubImage2DEXT = glCopyTexSubImage2DEXT;
		funPtr->glCopyTexSubImage3DEXT = glCopyTexSubImage3DEXT;
#endif //GL_EXT_copy_texture

#ifdef GL_EXT_cull_vertex
		funPtr->glCullParameterdvEXT = glCullParameterdvEXT;
		funPtr->glCullParameterfvEXT = glCullParameterfvEXT;
#endif //GL_EXT_cull_vertex

#ifdef GL_EXT_draw_range_elements
		funPtr->glDrawRangeElementsEXT = glDrawRangeElementsEXT;
#endif //GL_EXT_draw_range_elements

#ifdef GL_EXT_fog_coord
		funPtr->glFogCoordfEXT = glFogCoordfEXT;
		funPtr->glFogCoordfvEXT = glFogCoordfvEXT;
		funPtr->glFogCoorddEXT = glFogCoorddEXT;
		funPtr->glFogCoorddvEXT = glFogCoorddvEXT;
		funPtr->glFogCoordPointerEXT = glFogCoordPointerEXT;
#endif //GL_EXT_fog_coord

#ifdef GL_EXT_histogram
		funPtr->glGetHistogramEXT = glGetHistogramEXT;
		funPtr->glGetHistogramParameterfvEXT = glGetHistogramParameterfvEXT;
		funPtr->glGetHistogramParameterivEXT = glGetHistogramParameterivEXT;
		funPtr->glGetMinmaxEXT = glGetMinmaxEXT;
		funPtr->glGetMinmaxParameterfvEXT = glGetMinmaxParameterfvEXT;
		funPtr->glGetMinmaxParameterivEXT = glGetMinmaxParameterivEXT;
		funPtr->glHistogramEXT = glHistogramEXT;
		funPtr->glMinmaxEXT = glMinmaxEXT;
		funPtr->glResetHistogramEXT = glResetHistogramEXT;
		funPtr->glResetMinmaxEXT = glResetMinmaxEXT;
#endif //GL_EXT_histogram

#ifdef GL_EXT_index_func
		funPtr->glIndexFuncEXT = glIndexFuncEXT;
#endif //GL_EXT_index_func

#ifdef GL_EXT_index_material
		funPtr->glIndexMaterialEXT = glIndexMaterialEXT;
#endif //GL_EXT_index_material

#ifdef GL_EXT_light_texture
		funPtr->glApplyTextureEXT = glApplyTextureEXT;
		funPtr->glTextureLightEXT = glTextureLightEXT;
		funPtr->glTextureMaterialEXT = glTextureMaterialEXT;
#endif //GL_EXT_light_texture

#ifdef GL_EXT_multi_draw_arrays
		funPtr->glMultiDrawArraysEXT = glMultiDrawArraysEXT;
		funPtr->glMultiDrawElementsEXT = glMultiDrawElementsEXT;
#endif //GL_EXT_multi_draw_arrays

#ifdef GL_EXT_multisample
		funPtr->glSampleMaskEXT = glSampleMaskEXT;
		funPtr->glSamplePatternEXT = glSamplePatternEXT;
#endif //GL_EXT_multisample

#ifdef GL_EXT_paletted_texture
		funPtr->glColorTableEXT = glColorTableEXT;
		funPtr->glGetColorTableEXT = glGetColorTableEXT;
		funPtr->glGetColorTableParameterivEXT = glGetColorTableParameterivEXT;
		funPtr->glGetColorTableParameterfvEXT = glGetColorTableParameterfvEXT;
#endif //GL_EXT_paletted_texture

#ifdef GL_EXT_pixel_transform
		funPtr->glPixelTransformParameteriEXT = glPixelTransformParameteriEXT;
		funPtr->glPixelTransformParameterfEXT = glPixelTransformParameterfEXT;
		funPtr->glPixelTransformParameterivEXT = glPixelTransformParameterivEXT;
		funPtr->glPixelTransformParameterfvEXT = glPixelTransformParameterfvEXT;
#endif //GL_EXT_pixel_transform

#ifdef GL_EXT_point_parameters
		funPtr->glPointParameterfEXT = glPointParameterfEXT;
		funPtr->glPointParameterfvEXT = glPointParameterfvEXT;
#endif //GL_EXT_point_parameters

#ifdef GL_EXT_polygon_offset
		funPtr->glPolygonOffsetEXT = glPolygonOffsetEXT;
#endif //GL_EXT_polygon_offset

#ifdef GL_EXT_secondary_color
		funPtr->glSecondaryColor3bEXT = glSecondaryColor3bEXT;
		funPtr->glSecondaryColor3bvEXT = glSecondaryColor3bvEXT;
		funPtr->glSecondaryColor3dEXT = glSecondaryColor3dEXT;
		funPtr->glSecondaryColor3dvEXT = glSecondaryColor3dvEXT;
		funPtr->glSecondaryColor3fEXT = glSecondaryColor3fEXT;
		funPtr->glSecondaryColor3fvEXT = glSecondaryColor3fvEXT;
		funPtr->glSecondaryColor3iEXT = glSecondaryColor3iEXT;
		funPtr->glSecondaryColor3ivEXT = glSecondaryColor3ivEXT;
		funPtr->glSecondaryColor3sEXT = glSecondaryColor3sEXT;
		funPtr->glSecondaryColor3svEXT = glSecondaryColor3svEXT;
		funPtr->glSecondaryColor3ubEXT = glSecondaryColor3ubEXT;
		funPtr->glSecondaryColor3ubvEXT = glSecondaryColor3ubvEXT;
		funPtr->glSecondaryColor3uiEXT = glSecondaryColor3uiEXT;
		funPtr->glSecondaryColor3uivEXT = glSecondaryColor3uivEXT;
		funPtr->glSecondaryColor3usEXT = glSecondaryColor3usEXT;
		funPtr->glSecondaryColor3usvEXT = glSecondaryColor3usvEXT;
		funPtr->glSecondaryColorPointerEXT = glSecondaryColorPointerEXT;
#endif //GL_EXT_secondary_color

#ifdef GL_EXT_stencil_two_side
		funPtr->glActiveStencilFaceEXT = glActiveStencilFaceEXT;
#endif //GL_EXT_stencil_two_side

#ifdef GL_EXT_subtexture
		funPtr->glTexSubImage1DEXT = glTexSubImage1DEXT;
		funPtr->glTexSubImage2DEXT = glTexSubImage2DEXT;
#endif //GL_EXT_subtexture

#ifdef GL_EXT_texture3D
		funPtr->glTexImage3DEXT = glTexImage3DEXT;
		funPtr->glTexSubImage3DEXT = glTexSubImage3DEXT;
#endif //GL_EXT_texture3D

#ifdef GL_EXT_texture_object
		funPtr->glAreTexturesResidentEXT = glAreTexturesResidentEXT;
		funPtr->glBindTextureEXT = glBindTextureEXT;
		funPtr->glDeleteTexturesEXT = glDeleteTexturesEXT;
		funPtr->glGenTexturesEXT = glGenTexturesEXT;
		funPtr->glIsTextureEXT = glIsTextureEXT;
		funPtr->glPrioritizeTexturesEXT = glPrioritizeTexturesEXT;
#endif //GL_EXT_texture_object

#ifdef GL_EXT_texture_perturb_normal
		funPtr->glTextureNormalEXT = glTextureNormalEXT;
#endif //GL_EXT_texture_perturb_normal

#ifdef GL_EXT_vertex_array
		funPtr->glArrayElementEXT = glArrayElementEXT;
		funPtr->glColorPointerEXT = glColorPointerEXT;
		funPtr->glDrawArraysEXT = glDrawArraysEXT;
		funPtr->glEdgeFlagPointerEXT = glEdgeFlagPointerEXT;
		funPtr->glGetPointervEXT = glGetPointervEXT;
		funPtr->glIndexPointerEXT = glIndexPointerEXT;
		funPtr->glNormalPointerEXT = glNormalPointerEXT;
		funPtr->glTexCoordPointerEXT = glTexCoordPointerEXT;
		funPtr->glVertexPointerEXT = glVertexPointerEXT;
#endif //GL_EXT_vertex_array

#ifdef GL_EXT_vertex_shader
		funPtr->glBeginVertexShaderEXT = glBeginVertexShaderEXT;
		funPtr->glEndVertexShaderEXT = glEndVertexShaderEXT;
		funPtr->glBindVertexShaderEXT = glBindVertexShaderEXT;
		funPtr->glGenVertexShadersEXT = glGenVertexShadersEXT;
		funPtr->glDeleteVertexShaderEXT = glDeleteVertexShaderEXT;
		funPtr->glShaderOp1EXT = glShaderOp1EXT;
		funPtr->glShaderOp2EXT = glShaderOp2EXT;
		funPtr->glShaderOp3EXT = glShaderOp3EXT;
		funPtr->glSwizzleEXT = glSwizzleEXT;
		funPtr->glWriteMaskEXT = glWriteMaskEXT;
		funPtr->glInsertComponentEXT = glInsertComponentEXT;
		funPtr->glExtractComponentEXT = glExtractComponentEXT;
		funPtr->glGenSymbolsEXT = glGenSymbolsEXT;
		funPtr->glSetInvariantEXT = glSetInvariantEXT;
		funPtr->glSetLocalConstantEXT = glSetLocalConstantEXT;
		funPtr->glVariantbvEXT = glVariantbvEXT;
		funPtr->glVariantsvEXT = glVariantsvEXT;
		funPtr->glVariantivEXT = glVariantivEXT;
		funPtr->glVariantfvEXT = glVariantfvEXT;
		funPtr->glVariantdvEXT = glVariantdvEXT;
		funPtr->glVariantubvEXT = glVariantubvEXT;
		funPtr->glVariantusvEXT = glVariantusvEXT;
		funPtr->glVariantuivEXT = glVariantuivEXT;
		funPtr->glVariantPointerEXT = glVariantPointerEXT;
		funPtr->glEnableVariantClientStateEXT = glEnableVariantClientStateEXT;
		funPtr->glDisableVariantClientStateEXT = glDisableVariantClientStateEXT;
		funPtr->glBindLightParameterEXT = glBindLightParameterEXT;
		funPtr->glBindMaterialParameterEXT = glBindMaterialParameterEXT;
		funPtr->glBindTexGenParameterEXT = glBindTexGenParameterEXT;
		funPtr->glBindTextureUnitParameterEXT = glBindTextureUnitParameterEXT;
		funPtr->glBindParameterEXT = glBindParameterEXT;
		funPtr->glIsVariantEnabledEXT = glIsVariantEnabledEXT;
		funPtr->glGetVariantBooleanvEXT = glGetVariantBooleanvEXT;
		funPtr->glGetVariantIntegervEXT = glGetVariantIntegervEXT;
		funPtr->glGetVariantFloatvEXT = glGetVariantFloatvEXT;
		funPtr->glGetVariantPointervEXT = glGetVariantPointervEXT;
		funPtr->glGetInvariantBooleanvEXT = glGetInvariantBooleanvEXT;
		funPtr->glGetInvariantIntegervEXT = glGetInvariantIntegervEXT;
		funPtr->glGetInvariantFloatvEXT = glGetInvariantFloatvEXT;
		funPtr->glGetLocalConstantBooleanvEXT = glGetLocalConstantBooleanvEXT;
		funPtr->glGetLocalConstantIntegervEXT = glGetLocalConstantIntegervEXT;
		funPtr->glGetLocalConstantFloatvEXT = glGetLocalConstantFloatvEXT;
#endif //GL_EXT_vertex_shader

#ifdef GL_EXT_vertex_weighting
		funPtr->glVertexWeightfEXT = glVertexWeightfEXT;
		funPtr->glVertexWeightfvEXT = glVertexWeightfvEXT;
		funPtr->glVertexWeightPointerEXT = glVertexWeightPointerEXT;
#endif //GL_EXT_vertex_weighting

#ifdef GL_HP_image_transform
		funPtr->glImageTransformParameteriHP = glImageTransformParameteriHP;
		funPtr->glImageTransformParameterfHP = glImageTransformParameterfHP;
		funPtr->glImageTransformParameterivHP = glImageTransformParameterivHP;
		funPtr->glImageTransformParameterfvHP = glImageTransformParameterfvHP;
		funPtr->glGetImageTransformParameterivHP = glGetImageTransformParameterivHP;
		funPtr->glGetImageTransformParameterfvHP = glGetImageTransformParameterfvHP;
#endif //GL_HP_image_transform

#ifdef GL_IBM_multimode_draw_arrays
		funPtr->glMultiModeDrawArraysIBM = glMultiModeDrawArraysIBM;
		funPtr->glMultiModeDrawElementsIBM = glMultiModeDrawElementsIBM;
#endif //GL_IBM_multimode_draw_arrays

#ifdef GL_IBM_vertex_array_lists
		funPtr->glColorPointerListIBM = glColorPointerListIBM;
		funPtr->glSecondaryColorPointerListIBM = glSecondaryColorPointerListIBM;
		funPtr->glEdgeFlagPointerListIBM = glEdgeFlagPointerListIBM;
		funPtr->glFogCoordPointerListIBM = glFogCoordPointerListIBM;
		funPtr->glIndexPointerListIBM = glIndexPointerListIBM;
		funPtr->glNormalPointerListIBM = glNormalPointerListIBM;
		funPtr->glTexCoordPointerListIBM = glTexCoordPointerListIBM;
		funPtr->glVertexPointerListIBM = glVertexPointerListIBM;
#endif //GL_IBM_vertex_array_lists

#ifdef GL_INTEL_parallel_arrays
		funPtr->glVertexPointervINTEL = glVertexPointervINTEL;
		funPtr->glNormalPointervINTEL = glNormalPointervINTEL;
		funPtr->glColorPointervINTEL = glColorPointervINTEL;
		funPtr->glTexCoordPointervINTEL = glTexCoordPointervINTEL;
#endif //GL_INTEL_parallel_arrays

#ifdef GL_MESA_resize_buffers
		funPtr->glResizeBuffersMESA = glResizeBuffersMESA;
#endif //GL_MESA_resize_buffers

#ifdef GL_MESA_window_pos
		funPtr->glWindowPos2dMESA = glWindowPos2dMESA;
		funPtr->glWindowPos2dvMESA = glWindowPos2dvMESA;
		funPtr->glWindowPos2fMESA = glWindowPos2fMESA;
		funPtr->glWindowPos2fvMESA = glWindowPos2fvMESA;
		funPtr->glWindowPos2iMESA = glWindowPos2iMESA;
		funPtr->glWindowPos2ivMESA = glWindowPos2ivMESA;
		funPtr->glWindowPos2sMESA = glWindowPos2sMESA;
		funPtr->glWindowPos2svMESA = glWindowPos2svMESA;
		funPtr->glWindowPos3dMESA = glWindowPos3dMESA;
		funPtr->glWindowPos3dvMESA = glWindowPos3dvMESA;
		funPtr->glWindowPos3fMESA = glWindowPos3fMESA;
		funPtr->glWindowPos3fvMESA = glWindowPos3fvMESA;
		funPtr->glWindowPos3iMESA = glWindowPos3iMESA;
		funPtr->glWindowPos3ivMESA = glWindowPos3ivMESA;
		funPtr->glWindowPos3sMESA = glWindowPos3sMESA;
		funPtr->glWindowPos3svMESA = glWindowPos3svMESA;
		funPtr->glWindowPos4dMESA = glWindowPos4dMESA;
		funPtr->glWindowPos4dvMESA = glWindowPos4dvMESA;
		funPtr->glWindowPos4fMESA = glWindowPos4fMESA;
		funPtr->glWindowPos4fvMESA = glWindowPos4fvMESA;
		funPtr->glWindowPos4iMESA = glWindowPos4iMESA;
		funPtr->glWindowPos4ivMESA = glWindowPos4ivMESA;
		funPtr->glWindowPos4sMESA = glWindowPos4sMESA;
		funPtr->glWindowPos4svMESA = glWindowPos4svMESA;
#endif //GL_MESA_window_pos

#ifdef GL_NV_evaluators
		funPtr->glMapControlPointsNV = glMapControlPointsNV;
		funPtr->glMapParameterivNV = glMapParameterivNV;
		funPtr->glMapParameterfvNV = glMapParameterfvNV;
		funPtr->glGetMapControlPointsNV = glGetMapControlPointsNV;
		funPtr->glGetMapParameterivNV = glGetMapParameterivNV;
		funPtr->glGetMapParameterfvNV = glGetMapParameterfvNV;
		funPtr->glGetMapAttribParameterivNV = glGetMapAttribParameterivNV;
		funPtr->glGetMapAttribParameterfvNV = glGetMapAttribParameterfvNV;
		funPtr->glEvalMapsNV = glEvalMapsNV;
#endif //GL_NV_evaluators

#ifdef GL_NV_fence
		funPtr->glDeleteFencesNV = glDeleteFencesNV;
		funPtr->glGenFencesNV = glGenFencesNV;
		funPtr->glIsFenceNV = glIsFenceNV;
		funPtr->glTestFenceNV = glTestFenceNV;
		funPtr->glGetFenceivNV = glGetFenceivNV;
		funPtr->glFinishFenceNV = glFinishFenceNV;
		funPtr->glSetFenceNV = glSetFenceNV;
#endif //GL_NV_fence

#ifdef GL_NV_occlusion_query
		funPtr->glGenOcclusionQueriesNV = glGenOcclusionQueriesNV;
		funPtr->glDeleteOcclusionQueriesNV = glDeleteOcclusionQueriesNV;
		funPtr->glIsOcclusionQueryNV = glIsOcclusionQueryNV;
		funPtr->glBeginOcclusionQueryNV = glBeginOcclusionQueryNV;
		funPtr->glEndOcclusionQueryNV = glEndOcclusionQueryNV;
		funPtr->glGetOcclusionQueryivNV = glGetOcclusionQueryivNV;
		funPtr->glGetOcclusionQueryuivNV = glGetOcclusionQueryuivNV;
#endif //GL_NV_occlusion_query

#ifdef GL_NV_point_sprite
		funPtr->glPointParameteriNV = glPointParameteriNV;
		funPtr->glPointParameterivNV = glPointParameterivNV;
#endif //GL_NV_point_sprite

#ifdef GL_NV_register_combiners
		funPtr->glCombinerParameterfvNV = glCombinerParameterfvNV;
		funPtr->glCombinerParameterfNV = glCombinerParameterfNV;
		funPtr->glCombinerParameterivNV = glCombinerParameterivNV;
		funPtr->glCombinerParameteriNV = glCombinerParameteriNV;
		funPtr->glCombinerInputNV = glCombinerInputNV;
		funPtr->glCombinerOutputNV = glCombinerOutputNV;
		funPtr->glFinalCombinerInputNV = glFinalCombinerInputNV;
		funPtr->glGetCombinerInputParameterfvNV = glGetCombinerInputParameterfvNV;
		funPtr->glGetCombinerInputParameterivNV = glGetCombinerInputParameterivNV;
		funPtr->glGetCombinerOutputParameterfvNV = glGetCombinerOutputParameterfvNV;
		funPtr->glGetCombinerOutputParameterivNV = glGetCombinerOutputParameterivNV;
		funPtr->glGetFinalCombinerInputParameterfvNV = glGetFinalCombinerInputParameterfvNV;
		funPtr->glGetFinalCombinerInputParameterivNV = glGetFinalCombinerInputParameterivNV;
#endif //GL_NV_register_combiners

#ifdef GL_NV_register_combiners2
		funPtr->glCombinerStageParameterfvNV = glCombinerStageParameterfvNV;
		funPtr->glGetCombinerStageParameterfvNV = glGetCombinerStageParameterfvNV;
#endif //GL_NV_register_combiners2

#ifdef GL_NV_vertex_array_range
		funPtr->glFlushVertexArrayRangeNV = glFlushVertexArrayRangeNV;
		funPtr->glVertexArrayRangeNV = glVertexArrayRangeNV;
#endif //GL_NV_vertex_array_range

#ifdef GL_NV_vertex_program
		funPtr->glAreProgramsResidentNV = glAreProgramsResidentNV;
		funPtr->glBindProgramNV = glBindProgramNV;
		funPtr->glDeleteProgramsNV = glDeleteProgramsNV;
		funPtr->glExecuteProgramNV = glExecuteProgramNV;
		funPtr->glGenProgramsNV = glGenProgramsNV;
		funPtr->glGetProgramParameterdvNV = glGetProgramParameterdvNV;
		funPtr->glGetProgramParameterfvNV = glGetProgramParameterfvNV;
		funPtr->glGetProgramivNV = glGetProgramivNV;
		funPtr->glGetProgramStringNV = glGetProgramStringNV;
		funPtr->glGetTrackMatrixivNV = glGetTrackMatrixivNV;
		funPtr->glGetVertexAttribdvNV = glGetVertexAttribdvNV;
		funPtr->glGetVertexAttribfvNV = glGetVertexAttribfvNV;
		funPtr->glGetVertexAttribivNV = glGetVertexAttribivNV;
		funPtr->glGetVertexAttribPointervNV = glGetVertexAttribPointervNV;
		funPtr->glIsProgramNV = glIsProgramNV;
		funPtr->glLoadProgramNV = glLoadProgramNV;
		funPtr->glProgramParameter4dNV = glProgramParameter4dNV;
		funPtr->glProgramParameter4dvNV = glProgramParameter4dvNV;
		funPtr->glProgramParameter4fNV = glProgramParameter4fNV;
		funPtr->glProgramParameter4fvNV = glProgramParameter4fvNV;
		funPtr->glProgramParameters4dvNV = glProgramParameters4dvNV;
		funPtr->glProgramParameters4fvNV = glProgramParameters4fvNV;
		funPtr->glRequestResidentProgramsNV = glRequestResidentProgramsNV;
		funPtr->glTrackMatrixNV = glTrackMatrixNV;
		funPtr->glVertexAttribPointerNV = glVertexAttribPointerNV;
		funPtr->glVertexAttrib1dNV = glVertexAttrib1dNV;
		funPtr->glVertexAttrib1dvNV = glVertexAttrib1dvNV;
		funPtr->glVertexAttrib1fNV = glVertexAttrib1fNV;
		funPtr->glVertexAttrib1fvNV = glVertexAttrib1fvNV;
		funPtr->glVertexAttrib1sNV = glVertexAttrib1sNV;
		funPtr->glVertexAttrib1svNV = glVertexAttrib1svNV;
		funPtr->glVertexAttrib2dNV = glVertexAttrib2dNV;
		funPtr->glVertexAttrib2dvNV = glVertexAttrib2dvNV;
		funPtr->glVertexAttrib2fNV = glVertexAttrib2fNV;
		funPtr->glVertexAttrib2fvNV = glVertexAttrib2fvNV;
		funPtr->glVertexAttrib2sNV = glVertexAttrib2sNV;
		funPtr->glVertexAttrib2svNV = glVertexAttrib2svNV;
		funPtr->glVertexAttrib3dNV = glVertexAttrib3dNV;
		funPtr->glVertexAttrib3dvNV = glVertexAttrib3dvNV;
		funPtr->glVertexAttrib3fNV = glVertexAttrib3fNV;
		funPtr->glVertexAttrib3fvNV = glVertexAttrib3fvNV;
		funPtr->glVertexAttrib3sNV = glVertexAttrib3sNV;
		funPtr->glVertexAttrib3svNV = glVertexAttrib3svNV;
		funPtr->glVertexAttrib4dNV = glVertexAttrib4dNV;
		funPtr->glVertexAttrib4dvNV = glVertexAttrib4dvNV;
		funPtr->glVertexAttrib4fNV = glVertexAttrib4fNV;
		funPtr->glVertexAttrib4fvNV = glVertexAttrib4fvNV;
		funPtr->glVertexAttrib4sNV = glVertexAttrib4sNV;
		funPtr->glVertexAttrib4svNV = glVertexAttrib4svNV;
		funPtr->glVertexAttrib4ubNV = glVertexAttrib4ubNV;
		funPtr->glVertexAttrib4ubvNV = glVertexAttrib4ubvNV;
		funPtr->glVertexAttribs1dvNV = glVertexAttribs1dvNV;
		funPtr->glVertexAttribs1fvNV = glVertexAttribs1fvNV;
		funPtr->glVertexAttribs1svNV = glVertexAttribs1svNV;
		funPtr->glVertexAttribs2dvNV = glVertexAttribs2dvNV;
		funPtr->glVertexAttribs2fvNV = glVertexAttribs2fvNV;
		funPtr->glVertexAttribs2svNV = glVertexAttribs2svNV;
		funPtr->glVertexAttribs3dvNV = glVertexAttribs3dvNV;
		funPtr->glVertexAttribs3fvNV = glVertexAttribs3fvNV;
		funPtr->glVertexAttribs3svNV = glVertexAttribs3svNV;
		funPtr->glVertexAttribs4dvNV = glVertexAttribs4dvNV;
		funPtr->glVertexAttribs4fvNV = glVertexAttribs4fvNV;
		funPtr->glVertexAttribs4svNV = glVertexAttribs4svNV;
		funPtr->glVertexAttribs4ubvNV = glVertexAttribs4ubvNV;
#endif //GL_NV_vertex_program

#ifdef GL_PGI_misc_hints
		funPtr->glHintPGI = glHintPGI;
#endif //GL_PGI_misc_hints

#ifdef GL_SGIS_detail_texture
		funPtr->glDetailTexFuncSGIS = glDetailTexFuncSGIS;
		funPtr->glGetDetailTexFuncSGIS = glGetDetailTexFuncSGIS;
#endif //GL_SGIS_detail_texture

#ifdef GL_SGIS_fog_function
		funPtr->glFogFuncSGIS = glFogFuncSGIS;
		funPtr->glGetFogFuncSGIS = glGetFogFuncSGIS;
#endif //GL_SGIS_fog_function

#ifdef GL_SGIS_multisample
		funPtr->glSampleMaskSGIS = glSampleMaskSGIS;
		funPtr->glSamplePatternSGIS = glSamplePatternSGIS;
#endif //GL_SGIS_multisample

#ifdef GL_SGIS_pixel_texture
		funPtr->glPixelTexGenParameteriSGIS = glPixelTexGenParameteriSGIS;
		funPtr->glPixelTexGenParameterivSGIS = glPixelTexGenParameterivSGIS;
		funPtr->glPixelTexGenParameterfSGIS = glPixelTexGenParameterfSGIS;
		funPtr->glPixelTexGenParameterfvSGIS = glPixelTexGenParameterfvSGIS;
		funPtr->glGetPixelTexGenParameterivSGIS = glGetPixelTexGenParameterivSGIS;
		funPtr->glGetPixelTexGenParameterfvSGIS = glGetPixelTexGenParameterfvSGIS;
#endif //GL_SGIS_pixel_texture

#ifdef GL_SGIS_point_parameters
		funPtr->glPointParameterfSGIS = glPointParameterfSGIS;
		funPtr->glPointParameterfvSGIS = glPointParameterfvSGIS;
#endif //GL_SGIS_point_parameters

#ifdef GL_SGIS_sharpen_texture
		funPtr->glSharpenTexFuncSGIS = glSharpenTexFuncSGIS;
		funPtr->glGetSharpenTexFuncSGIS = glGetSharpenTexFuncSGIS;
#endif //GL_SGIS_sharpen_texture

#ifdef GL_SGIS_texture4D
		funPtr->glTexImage4DSGIS = glTexImage4DSGIS;
		funPtr->glTexSubImage4DSGIS = glTexSubImage4DSGIS;
#endif //GL_SGIS_texture4D

#ifdef GL_SGIS_texture_color_mask
		funPtr->glTextureColorMaskSGIS = glTextureColorMaskSGIS;
#endif //GL_SGIS_texture_color_mask

#ifdef GL_SGIS_texture_filter4
		funPtr->glGetTexFilterFuncSGIS = glGetTexFilterFuncSGIS;
		funPtr->glTexFilterFuncSGIS = glTexFilterFuncSGIS;
#endif //GL_SGIS_texture_filter4

#ifdef GL_SGIX_async
		funPtr->glAsyncMarkerSGIX = glAsyncMarkerSGIX;
		funPtr->glFinishAsyncSGIX = glFinishAsyncSGIX;
		funPtr->glPollAsyncSGIX = glPollAsyncSGIX;
		funPtr->glGenAsyncMarkersSGIX = glGenAsyncMarkersSGIX;
		funPtr->glDeleteAsyncMarkersSGIX = glDeleteAsyncMarkersSGIX;
		funPtr->glIsAsyncMarkerSGIX = glIsAsyncMarkerSGIX;
#endif //GL_SGIX_async

#ifdef GL_SGIX_flush_raster
		funPtr->glFlushRasterSGIX = glFlushRasterSGIX;
#endif //GL_SGIX_flush_raster

#ifdef GL_SGIX_fragment_lighting
		funPtr->glFragmentColorMaterialSGIX = glFragmentColorMaterialSGIX;
		funPtr->glFragmentLightfSGIX = glFragmentLightfSGIX;
		funPtr->glFragmentLightfvSGIX = glFragmentLightfvSGIX;
		funPtr->glFragmentLightiSGIX = glFragmentLightiSGIX;
		funPtr->glFragmentLightivSGIX = glFragmentLightivSGIX;
		funPtr->glFragmentLightModelfSGIX = glFragmentLightModelfSGIX;
		funPtr->glFragmentLightModelfvSGIX = glFragmentLightModelfvSGIX;
		funPtr->glFragmentLightModeliSGIX = glFragmentLightModeliSGIX;
		funPtr->glFragmentLightModelivSGIX = glFragmentLightModelivSGIX;
		funPtr->glFragmentMaterialfSGIX = glFragmentMaterialfSGIX;
		funPtr->glFragmentMaterialfvSGIX = glFragmentMaterialfvSGIX;
		funPtr->glFragmentMaterialiSGIX = glFragmentMaterialiSGIX;
		funPtr->glFragmentMaterialivSGIX = glFragmentMaterialivSGIX;
		funPtr->glGetFragmentLightfvSGIX = glGetFragmentLightfvSGIX;
		funPtr->glGetFragmentLightivSGIX = glGetFragmentLightivSGIX;
		funPtr->glGetFragmentMaterialfvSGIX = glGetFragmentMaterialfvSGIX;
		funPtr->glGetFragmentMaterialivSGIX = glGetFragmentMaterialivSGIX;
		funPtr->glLightEnviSGIX = glLightEnviSGIX;
#endif //GL_SGIX_fragment_lighting

#ifdef GL_SGIX_framezoom
		funPtr->glFrameZoomSGIX = glFrameZoomSGIX;
#endif //GL_SGIX_framezoom

#ifdef GL_SGIX_igloo_interface
		funPtr->glIglooInterfaceSGIX = glIglooInterfaceSGIX;
#endif //GL_SGIX_igloo_interface

#ifdef GL_SGIX_instruments
		funPtr->glGetInstrumentsSGIX = glGetInstrumentsSGIX;
		funPtr->glInstrumentsBufferSGIX = glInstrumentsBufferSGIX;
		funPtr->glPollInstrumentsSGIX = glPollInstrumentsSGIX;
		funPtr->glReadInstrumentsSGIX = glReadInstrumentsSGIX;
		funPtr->glStartInstrumentsSGIX = glStartInstrumentsSGIX;
		funPtr->glStopInstrumentsSGIX = glStopInstrumentsSGIX;
#endif //GL_SGIX_instruments

#ifdef GL_SGIX_list_priority
		funPtr->glGetListParameterfvSGIX = glGetListParameterfvSGIX;
		funPtr->glGetListParameterivSGIX = glGetListParameterivSGIX;
		funPtr->glListParameterfSGIX = glListParameterfSGIX;
		funPtr->glListParameterfvSGIX = glListParameterfvSGIX;
		funPtr->glListParameteriSGIX = glListParameteriSGIX;
		funPtr->glListParameterivSGIX = glListParameterivSGIX;
#endif //GL_SGIX_list_priority

#ifdef GL_SGIX_pixel_texture
		funPtr->glPixelTexGenSGIX = glPixelTexGenSGIX;
#endif //GL_SGIX_pixel_texture

#ifdef GL_SGIX_polynomial_ffd
		funPtr->glDeformationMap3dSGIX = glDeformationMap3dSGIX;
		funPtr->glDeformationMap3fSGIX = glDeformationMap3fSGIX;
		funPtr->glDeformSGIX = glDeformSGIX;
		funPtr->glLoadIdentityDeformationMapSGIX = glLoadIdentityDeformationMapSGIX;
#endif //GL_SGIX_polynomial_ffd

#ifdef GL_SGIX_reference_plane
		funPtr->glReferencePlaneSGIX = glReferencePlaneSGIX;
#endif //GL_SGIX_reference_plane

#ifdef GL_SGIX_sprite
		funPtr->glSpriteParameterfSGIX = glSpriteParameterfSGIX;
		funPtr->glSpriteParameterfvSGIX = glSpriteParameterfvSGIX;
		funPtr->glSpriteParameteriSGIX = glSpriteParameteriSGIX;
		funPtr->glSpriteParameterivSGIX = glSpriteParameterivSGIX;
#endif //GL_SGIX_sprite

#ifdef GL_SGIX_tag_sample_buffer
		funPtr->glTagSampleBufferSGIX = glTagSampleBufferSGIX;
#endif //GL_SGIX_tag_sample_buffer

#ifdef GL_SGI_color_table
		funPtr->glColorTableSGI = glColorTableSGI;
		funPtr->glColorTableParameterfvSGI = glColorTableParameterfvSGI;
		funPtr->glColorTableParameterivSGI = glColorTableParameterivSGI;
		funPtr->glCopyColorTableSGI = glCopyColorTableSGI;
		funPtr->glGetColorTableSGI = glGetColorTableSGI;
		funPtr->glGetColorTableParameterfvSGI = glGetColorTableParameterfvSGI;
		funPtr->glGetColorTableParameterivSGI = glGetColorTableParameterivSGI;
#endif //GL_SGI_color_table

#ifdef GL_SUNX_constant_data
		funPtr->glFinishTextureSUNX = glFinishTextureSUNX;
#endif //GL_SUNX_constant_data

#ifdef GL_SUN_global_alpha
		funPtr->glGlobalAlphaFactorbSUN = glGlobalAlphaFactorbSUN;
		funPtr->glGlobalAlphaFactorsSUN = glGlobalAlphaFactorsSUN;
		funPtr->glGlobalAlphaFactoriSUN = glGlobalAlphaFactoriSUN;
		funPtr->glGlobalAlphaFactorfSUN = glGlobalAlphaFactorfSUN;
		funPtr->glGlobalAlphaFactordSUN = glGlobalAlphaFactordSUN;
		funPtr->glGlobalAlphaFactorubSUN = glGlobalAlphaFactorubSUN;
		funPtr->glGlobalAlphaFactorusSUN = glGlobalAlphaFactorusSUN;
		funPtr->glGlobalAlphaFactoruiSUN = glGlobalAlphaFactoruiSUN;
#endif //GL_SUN_global_alpha

#ifdef GL_SUN_mesh_array
		funPtr->glDrawMeshArraysSUN = glDrawMeshArraysSUN;
#endif //GL_SUN_mesh_array

#ifdef GL_SUN_triangle_list
		funPtr->glReplacementCodeuiSUN = glReplacementCodeuiSUN;
		funPtr->glReplacementCodeusSUN = glReplacementCodeusSUN;
		funPtr->glReplacementCodeubSUN = glReplacementCodeubSUN;
		funPtr->glReplacementCodeuivSUN = glReplacementCodeuivSUN;
		funPtr->glReplacementCodeusvSUN = glReplacementCodeusvSUN;
		funPtr->glReplacementCodeubvSUN = glReplacementCodeubvSUN;
		funPtr->glReplacementCodePointerSUN = glReplacementCodePointerSUN;
#endif //GL_SUN_triangle_list

#ifdef GL_SUN_vertex
		funPtr->glColor4ubVertex2fSUN = glColor4ubVertex2fSUN;
		funPtr->glColor4ubVertex2fvSUN = glColor4ubVertex2fvSUN;
		funPtr->glColor4ubVertex3fSUN = glColor4ubVertex3fSUN;
		funPtr->glColor4ubVertex3fvSUN = glColor4ubVertex3fvSUN;
		funPtr->glColor3fVertex3fSUN = glColor3fVertex3fSUN;
		funPtr->glColor3fVertex3fvSUN = glColor3fVertex3fvSUN;
		funPtr->glNormal3fVertex3fSUN = glNormal3fVertex3fSUN;
		funPtr->glNormal3fVertex3fvSUN = glNormal3fVertex3fvSUN;
		funPtr->glColor4fNormal3fVertex3fSUN = glColor4fNormal3fVertex3fSUN;
		funPtr->glColor4fNormal3fVertex3fvSUN = glColor4fNormal3fVertex3fvSUN;
		funPtr->glTexCoord2fVertex3fSUN = glTexCoord2fVertex3fSUN;
		funPtr->glTexCoord2fVertex3fvSUN = glTexCoord2fVertex3fvSUN;
		funPtr->glTexCoord4fVertex4fSUN = glTexCoord4fVertex4fSUN;
		funPtr->glTexCoord4fVertex4fvSUN = glTexCoord4fVertex4fvSUN;
		funPtr->glTexCoord2fColor4ubVertex3fSUN = glTexCoord2fColor4ubVertex3fSUN;
		funPtr->glTexCoord2fColor4ubVertex3fvSUN = glTexCoord2fColor4ubVertex3fvSUN;
		funPtr->glTexCoord2fColor3fVertex3fSUN = glTexCoord2fColor3fVertex3fSUN;
		funPtr->glTexCoord2fColor3fVertex3fvSUN = glTexCoord2fColor3fVertex3fvSUN;
		funPtr->glTexCoord2fNormal3fVertex3fSUN = glTexCoord2fNormal3fVertex3fSUN;
		funPtr->glTexCoord2fNormal3fVertex3fvSUN = glTexCoord2fNormal3fVertex3fvSUN;
		funPtr->glTexCoord2fColor4fNormal3fVertex3fSUN = glTexCoord2fColor4fNormal3fVertex3fSUN;
		funPtr->glTexCoord2fColor4fNormal3fVertex3fvSUN = glTexCoord2fColor4fNormal3fVertex3fvSUN;
		funPtr->glTexCoord4fColor4fNormal3fVertex4fSUN = glTexCoord4fColor4fNormal3fVertex4fSUN;
		funPtr->glTexCoord4fColor4fNormal3fVertex4fvSUN = glTexCoord4fColor4fNormal3fVertex4fvSUN;
		funPtr->glReplacementCodeuiVertex3fSUN = glReplacementCodeuiVertex3fSUN;
		funPtr->glReplacementCodeuiVertex3fvSUN = glReplacementCodeuiVertex3fvSUN;
		funPtr->glReplacementCodeuiColor4ubVertex3fSUN = glReplacementCodeuiColor4ubVertex3fSUN;
		funPtr->glReplacementCodeuiColor4ubVertex3fvSUN = glReplacementCodeuiColor4ubVertex3fvSUN;
		funPtr->glReplacementCodeuiColor3fVertex3fSUN = glReplacementCodeuiColor3fVertex3fSUN;
		funPtr->glReplacementCodeuiColor3fVertex3fvSUN = glReplacementCodeuiColor3fVertex3fvSUN;
		funPtr->glReplacementCodeuiNormal3fVertex3fSUN = glReplacementCodeuiNormal3fVertex3fSUN;
		funPtr->glReplacementCodeuiNormal3fVertex3fvSUN = glReplacementCodeuiNormal3fVertex3fvSUN;
		funPtr->glReplacementCodeuiColor4fNormal3fVertex3fSUN = glReplacementCodeuiColor4fNormal3fVertex3fSUN;
		funPtr->glReplacementCodeuiColor4fNormal3fVertex3fvSUN = glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
		funPtr->glReplacementCodeuiTexCoord2fVertex3fSUN = glReplacementCodeuiTexCoord2fVertex3fSUN;
		funPtr->glReplacementCodeuiTexCoord2fVertex3fvSUN = glReplacementCodeuiTexCoord2fVertex3fvSUN;
		funPtr->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
		funPtr->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
		funPtr->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
		funPtr->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#endif //GL_SUN_vertex

#ifdef GL_VERSION_1_2
		funPtr->glDrawRangeElements = glDrawRangeElements;
		funPtr->glTexImage3D = glTexImage3D;
		funPtr->glTexSubImage3D = glTexSubImage3D;
		funPtr->glCopyTexSubImage3D = glCopyTexSubImage3D;
#endif //GL_VERSION_1_2

#ifdef GL_VERSION_1_3
		funPtr->glActiveTexture = glActiveTexture;
		funPtr->glClientActiveTexture = glClientActiveTexture;
		funPtr->glMultiTexCoord1d = glMultiTexCoord1d;
		funPtr->glMultiTexCoord1dv = glMultiTexCoord1dv;
		funPtr->glMultiTexCoord1f = glMultiTexCoord1f;
		funPtr->glMultiTexCoord1fv = glMultiTexCoord1fv;
		funPtr->glMultiTexCoord1i = glMultiTexCoord1i;
		funPtr->glMultiTexCoord1iv = glMultiTexCoord1iv;
		funPtr->glMultiTexCoord1s = glMultiTexCoord1s;
		funPtr->glMultiTexCoord1sv = glMultiTexCoord1sv;
		funPtr->glMultiTexCoord2d = glMultiTexCoord2d;
		funPtr->glMultiTexCoord2dv = glMultiTexCoord2dv;
		funPtr->glMultiTexCoord2f = glMultiTexCoord2f;
		funPtr->glMultiTexCoord2fv = glMultiTexCoord2fv;
		funPtr->glMultiTexCoord2i = glMultiTexCoord2i;
		funPtr->glMultiTexCoord2iv = glMultiTexCoord2iv;
		funPtr->glMultiTexCoord2s = glMultiTexCoord2s;
		funPtr->glMultiTexCoord2sv = glMultiTexCoord2sv;
		funPtr->glMultiTexCoord3d = glMultiTexCoord3d;
		funPtr->glMultiTexCoord3dv = glMultiTexCoord3dv;
		funPtr->glMultiTexCoord3f = glMultiTexCoord3f;
		funPtr->glMultiTexCoord3fv = glMultiTexCoord3fv;
		funPtr->glMultiTexCoord3i = glMultiTexCoord3i;
		funPtr->glMultiTexCoord3iv = glMultiTexCoord3iv;
		funPtr->glMultiTexCoord3s = glMultiTexCoord3s;
		funPtr->glMultiTexCoord3sv = glMultiTexCoord3sv;
		funPtr->glMultiTexCoord4d = glMultiTexCoord4d;
		funPtr->glMultiTexCoord4dv = glMultiTexCoord4dv;
		funPtr->glMultiTexCoord4f = glMultiTexCoord4f;
		funPtr->glMultiTexCoord4fv = glMultiTexCoord4fv;
		funPtr->glMultiTexCoord4i = glMultiTexCoord4i;
		funPtr->glMultiTexCoord4iv = glMultiTexCoord4iv;
		funPtr->glMultiTexCoord4s = glMultiTexCoord4s;
		funPtr->glMultiTexCoord4sv = glMultiTexCoord4sv;
		funPtr->glLoadTransposeMatrixf = glLoadTransposeMatrixf;
		funPtr->glLoadTransposeMatrixd = glLoadTransposeMatrixd;
		funPtr->glMultTransposeMatrixf = glMultTransposeMatrixf;
		funPtr->glMultTransposeMatrixd = glMultTransposeMatrixd;
		funPtr->glSampleCoverage = glSampleCoverage;
		funPtr->glCompressedTexImage3D = glCompressedTexImage3D;
		funPtr->glCompressedTexImage2D = glCompressedTexImage2D;
		funPtr->glCompressedTexImage1D = glCompressedTexImage1D;
		funPtr->glCompressedTexSubImage3D = glCompressedTexSubImage3D;
		funPtr->glCompressedTexSubImage2D = glCompressedTexSubImage2D;
		funPtr->glCompressedTexSubImage1D = glCompressedTexSubImage1D;
		funPtr->glGetCompressedTexImage = glGetCompressedTexImage;
#endif //GL_VERSION_1_3

#if defined(_WIN32)
#ifdef WGL_ARB_buffer_region
		funPtr->wglCreateBufferRegionARB = wglCreateBufferRegionARB;
		funPtr->wglDeleteBufferRegionARB = wglDeleteBufferRegionARB;
		funPtr->wglSaveBufferRegionARB = wglSaveBufferRegionARB;
		funPtr->wglRestoreBufferRegionARB = wglRestoreBufferRegionARB;
#endif //WGL_ARB_buffer_region

#ifdef WGL_ARB_extensions_string
		funPtr->wglGetExtensionsStringARB = wglGetExtensionsStringARB;
#endif //WGL_ARB_extensions_string

#ifdef WGL_ARB_make_current_read
		funPtr->wglMakeContextCurrentARB = wglMakeContextCurrentARB;
		funPtr->wglGetCurrentReadDCARB = wglGetCurrentReadDCARB;
#endif //WGL_ARB_make_current_read

#ifdef WGL_ARB_pbuffer
		funPtr->wglCreatePbufferARB = wglCreatePbufferARB;
		funPtr->wglGetPbufferDCARB = wglGetPbufferDCARB;
		funPtr->wglReleasePbufferDCARB = wglReleasePbufferDCARB;
		funPtr->wglDestroyPbufferARB = wglDestroyPbufferARB;
		funPtr->wglQueryPbufferARB = wglQueryPbufferARB;
#endif //WGL_ARB_pbuffer

#ifdef WGL_ARB_pixel_format
		funPtr->wglGetPixelFormatAttribivARB = wglGetPixelFormatAttribivARB;
		funPtr->wglGetPixelFormatAttribfvARB = wglGetPixelFormatAttribfvARB;
		funPtr->wglChoosePixelFormatARB = wglChoosePixelFormatARB;
#endif //WGL_ARB_pixel_format

#ifdef WGL_ARB_render_texture
		funPtr->wglBindTexImageARB = wglBindTexImageARB;
		funPtr->wglReleaseTexImageARB = wglReleaseTexImageARB;
		funPtr->wglSetPbufferAttribARB = wglSetPbufferAttribARB;
#endif //WGL_ARB_render_texture

#ifdef WGL_EXT_display_color_table
		funPtr->wglCreateDisplayColorTableEXT = wglCreateDisplayColorTableEXT;
		funPtr->wglLoadDisplayColorTableEXT = wglLoadDisplayColorTableEXT;
		funPtr->wglBindDisplayColorTableEXT = wglBindDisplayColorTableEXT;
		funPtr->wglDestroyDisplayColorTableEXT = wglDestroyDisplayColorTableEXT;
#endif //WGL_EXT_display_color_table

#ifdef WGL_EXT_extensions_string
		funPtr->wglGetExtensionsStringEXT = wglGetExtensionsStringEXT;
#endif //WGL_EXT_extensions_string

#ifdef WGL_EXT_make_current_read
		funPtr->wglMakeContextCurrentEXT = wglMakeContextCurrentEXT;
		funPtr->wglGetCurrentReadDCEXT = wglGetCurrentReadDCEXT;
#endif //WGL_EXT_make_current_read

#ifdef WGL_EXT_pbuffer
		funPtr->wglCreatePbufferEXT = wglCreatePbufferEXT;
		funPtr->wglGetPbufferDCEXT = wglGetPbufferDCEXT;
		funPtr->wglReleasePbufferDCEXT = wglReleasePbufferDCEXT;
		funPtr->wglDestroyPbufferEXT = wglDestroyPbufferEXT;
		funPtr->wglQueryPbufferEXT = wglQueryPbufferEXT;
#endif //WGL_EXT_pbuffer

#ifdef WGL_EXT_pixel_format
		funPtr->wglGetPixelFormatAttribivEXT = wglGetPixelFormatAttribivEXT;
		funPtr->wglGetPixelFormatAttribfvEXT = wglGetPixelFormatAttribfvEXT;
		funPtr->wglChoosePixelFormatEXT = wglChoosePixelFormatEXT;
#endif //WGL_EXT_pixel_format

#ifdef WGL_EXT_swap_control
		funPtr->wglSwapIntervalEXT = wglSwapIntervalEXT;
		funPtr->wglGetSwapIntervalEXT = wglGetSwapIntervalEXT;
#endif //WGL_EXT_swap_control

#ifdef WGL_I3D_digital_video_control
		funPtr->wglGetDigitalVideoParametersI3D = wglGetDigitalVideoParametersI3D;
		funPtr->wglSetDigitalVideoParametersI3D = wglSetDigitalVideoParametersI3D;
#endif //WGL_I3D_digital_video_control

#ifdef WGL_I3D_gamma
		funPtr->wglGetGammaTableParametersI3D = wglGetGammaTableParametersI3D;
		funPtr->wglSetGammaTableParametersI3D = wglSetGammaTableParametersI3D;
		funPtr->wglGetGammaTableI3D = wglGetGammaTableI3D;
		funPtr->wglSetGammaTableI3D = wglSetGammaTableI3D;
#endif //WGL_I3D_gamma

#ifdef WGL_I3D_genlock
		funPtr->wglEnableGenlockI3D = wglEnableGenlockI3D;
		funPtr->wglDisableGenlockI3D = wglDisableGenlockI3D;
		funPtr->wglIsEnabledGenlockI3D = wglIsEnabledGenlockI3D;
		funPtr->wglGenlockSourceI3D = wglGenlockSourceI3D;
		funPtr->wglGetGenlockSourceI3D = wglGetGenlockSourceI3D;
		funPtr->wglGenlockSourceEdgeI3D = wglGenlockSourceEdgeI3D;
		funPtr->wglGetGenlockSourceEdgeI3D = wglGetGenlockSourceEdgeI3D;
		funPtr->wglGenlockSampleRateI3D = wglGenlockSampleRateI3D;
		funPtr->wglGetGenlockSampleRateI3D = wglGetGenlockSampleRateI3D;
		funPtr->wglGenlockSourceDelayI3D = wglGenlockSourceDelayI3D;
		funPtr->wglGetGenlockSourceDelayI3D = wglGetGenlockSourceDelayI3D;
		funPtr->wglQueryGenlockMaxSourceDelayI3D = wglQueryGenlockMaxSourceDelayI3D;
#endif //WGL_I3D_genlock

#ifdef WGL_I3D_image_buffer
		funPtr->wglCreateImageBufferI3D = wglCreateImageBufferI3D;
		funPtr->wglDestroyImageBufferI3D = wglDestroyImageBufferI3D;
		funPtr->wglAssociateImageBufferEventsI3D = wglAssociateImageBufferEventsI3D;
		funPtr->wglReleaseImageBufferEventsI3D = wglReleaseImageBufferEventsI3D;
#endif //WGL_I3D_image_buffer

#ifdef WGL_I3D_swap_frame_lock
		funPtr->wglEnableFrameLockI3D = wglEnableFrameLockI3D;
		funPtr->wglDisableFrameLockI3D = wglDisableFrameLockI3D;
		funPtr->wglIsEnabledFrameLockI3D = wglIsEnabledFrameLockI3D;
		funPtr->wglQueryFrameLockMasterI3D = wglQueryFrameLockMasterI3D;
#endif //WGL_I3D_swap_frame_lock

#ifdef WGL_I3D_swap_frame_usage
		funPtr->wglGetFrameUsageI3D = wglGetFrameUsageI3D;
		funPtr->wglBeginFrameTrackingI3D = wglBeginFrameTrackingI3D;
		funPtr->wglEndFrameTrackingI3D = wglEndFrameTrackingI3D;
		funPtr->wglQueryFrameTrackingI3D = wglQueryFrameTrackingI3D;
#endif //WGL_I3D_swap_frame_usage

#ifdef WGL_NV_vertex_array_range
		funPtr->wglAllocateMemoryNV = wglAllocateMemoryNV;
		funPtr->wglFreeMemoryNV = wglFreeMemoryNV;
#endif //WGL_NV_vertex_array_range

#ifdef WGL_OML_sync_control
		funPtr->wglGetSyncValuesOML = wglGetSyncValuesOML;
		funPtr->wglGetMscRateOML = wglGetMscRateOML;
		funPtr->wglSwapBuffersMscOML = wglSwapBuffersMscOML;
		funPtr->wglSwapLayerBuffersMscOML = wglSwapLayerBuffersMscOML;
		funPtr->wglWaitForMscOML = wglWaitForMscOML;
		funPtr->wglWaitForSbcOML = wglWaitForSbcOML;
#endif //WGL_OML_sync_control

#endif //_WIN32

	}
}

