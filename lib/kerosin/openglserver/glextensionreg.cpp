#include "glextensionreg.h"
#include <string.h>

#define GET_PROC_ADDRESS(ptr, function) function = (ptr)GetProcedure( #function ); if (function == NULL) return false;

void* GetProcedure(const char *name)
{
#if defined(_WIN32)
    void *t = wglGetProcAddress(name);
#else
    void *t = glXGetProcAddressARB((unsigned char*)name);
#endif //_WIN32
    return t;
}

static bool TestExtensionString(const char *name, const char *extensions)
{
    /*
    	It takes a bit of care to be fool-proof about parsing the
    	OpenGL extensions string. Don't be fooled by sub-strings,
		etc.
	*/
    const char *start = extensions;
    char *where, *terminator;
    
    where = strchr(name, ' ');
    if (where || *name == '\0')
        return false;
        
    for (;;)
    {
        where = strstr((const char *) start, name);
        if (!where)
            break;
        terminator = where + strlen(name);
        if (where == start || *(where - 1) == ' ')
            if (*terminator == ' ' || *terminator == '\0')
                return true;
        start = terminator;
    }
    return false;
}

// returns true if the extension is available
bool GLExtensionReg::QueryGLExtension(const char *name)
{
    const char *extensions = NULL;
	/*	extension names should not have spaces.	*/
    extensions = (const char*)glGetString(GL_EXTENSIONS);

	return TestExtensionString(name, extensions);
}

#if defined(_WIN32)
// returns true if the extension is available
bool GLExtensionReg::QueryWGLExtension(const char *name)
{
    const char *extensions = NULL;

    if ((wglGetExtensionsStringARB == NULL) || (mHDC == 0))
        if (wglGetExtensionsStringEXT == NULL)
            return false;
        else
            extensions = (const char*) wglGetExtensionsStringEXT();
    else
        extensions = (const char*) wglGetExtensionsStringARB(mHDC);
        
 	return TestExtensionString(name, extensions);
}
#endif //_WIN32

#ifdef GL_ARB_multisample
PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB = NULL;
#endif //GL_ARB_multisample

#ifdef GL_ARB_multitexture
PFNGLACTIVETEXTUREARBPROC glActiveTextureARB = NULL;
PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB = NULL;
PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB = NULL;
PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB = NULL;
PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB = NULL;
PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB = NULL;
PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB = NULL;
PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB = NULL;
PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB = NULL;
PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB = NULL;
PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB = NULL;
PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB = NULL;
PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB = NULL;
PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB = NULL;
PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB = NULL;
PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB = NULL;
PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB = NULL;
PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB = NULL;
PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB = NULL;
PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB = NULL;
PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB = NULL;
PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB = NULL;
PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB = NULL;
PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB = NULL;
PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB = NULL;
PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB = NULL;
PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB = NULL;
PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB = NULL;
PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB = NULL;
PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB = NULL;
PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB = NULL;
PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB = NULL;
PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB = NULL;
PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB = NULL;
#endif //GL_ARB_multitexture

#ifdef GL_ARB_point_parameters
PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB = NULL;
PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB = NULL;
#endif //GL_ARB_point_parameters

#ifdef GL_ARB_texture_compression
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB = NULL;
#endif //GL_ARB_texture_compression

#ifdef GL_ARB_transpose_matrix
PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB = NULL;
PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB = NULL;
PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB = NULL;
PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB = NULL;
#endif //GL_ARB_transpose_matrix

#ifdef GL_ARB_vertex_buffer_object
PFNGLBINDBUFFERARBPROC glBindBufferARB = NULL;
PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB = NULL;
PFNGLGENBUFFERSARBPROC glGenBuffersARB = NULL;
PFNGLISBUFFERARBPROC glIsBufferARB = NULL;
PFNGLBUFFERDATAARBPROC glBufferDataARB = NULL;
PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB = NULL;
PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB = NULL;
PFNGLMAPBUFFERARBPROC glMapBufferARB = NULL;
PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB = NULL;
PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB = NULL;
PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB = NULL;
#endif //GL_ARB_vertex_buffer_object

#ifdef GL_ARB_vertex_program
PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB = NULL;
PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB = NULL;
PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB = NULL;
PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB = NULL;
PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB = NULL;
PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB = NULL;
PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB = NULL;
PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB = NULL;
PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB = NULL;
PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB = NULL;
PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB = NULL;
PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB = NULL;
PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB = NULL;
PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB = NULL;
PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB = NULL;
PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB = NULL;
PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB = NULL;
PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB = NULL;
PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB = NULL;
PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB = NULL;
PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB = NULL;
PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB = NULL;
PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB = NULL;
PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB = NULL;
PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB = NULL;
PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB = NULL;
PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB = NULL;
PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB = NULL;
PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB = NULL;
PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB = NULL;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB = NULL;
PFNGLPROGRAMSTRINGARBPROC glProgramStringARB = NULL;
PFNGLBINDPROGRAMARBPROC glBindProgramARB = NULL;
PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB = NULL;
PFNGLGENPROGRAMSARBPROC glGenProgramsARB = NULL;
PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB = NULL;
PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB = NULL;
PFNGLGETPROGRAMIVARBPROC glGetProgramivARB = NULL;
PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB = NULL;
PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB = NULL;
PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB = NULL;
PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB = NULL;
PFNGLISPROGRAMARBPROC glIsProgramARB = NULL;
#endif //GL_ARB_vertex_program

#ifdef GL_ARB_window_pos
PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB = NULL;
PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB = NULL;
PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB = NULL;
PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB = NULL;
PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB = NULL;
PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB = NULL;
PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB = NULL;
PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB = NULL;
PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB = NULL;
PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB = NULL;
PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB = NULL;
PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB = NULL;
PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB = NULL;
PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB = NULL;
PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB = NULL;
PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB = NULL;
#endif //GL_ARB_window_pos

#ifdef GL_EXT_blend_color
PFNGLBLENDCOLOREXTPROC glBlendColorEXT = NULL;
#endif //GL_EXT_blend_color

#ifdef GL_EXT_blend_func_separate
PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT = NULL;
#endif //GL_EXT_blend_func_separate

#ifdef GL_EXT_blend_minmax
PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT = NULL;
#endif //GL_EXT_blend_minmax

#ifdef GL_EXT_compiled_vertex_array
PFNGLLOCKARRAYSEXTPROC glLockArraysEXT = NULL;
PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT = NULL;
#endif //GL_EXT_compiled_vertex_array

#ifdef GL_EXT_draw_range_elements
PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT = NULL;
#endif //GL_EXT_draw_range_elements

#ifdef GL_EXT_fog_coord
PFNGLFOGCOORDFEXTPROC glFogCoordfEXT = NULL;
PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT = NULL;
PFNGLFOGCOORDDEXTPROC glFogCoorddEXT = NULL;
PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT = NULL;
PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT = NULL;
#endif //GL_EXT_fog_coord

#ifdef GL_EXT_multi_draw_arrays
PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT = NULL;
PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT = NULL;
#endif //GL_EXT_multi_draw_arrays

#ifdef GL_EXT_paletted_texture
PFNGLCOLORTABLEEXTPROC glColorTableEXT = NULL;
PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT = NULL;
PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT = NULL;
#endif //GL_EXT_paletted_texture

#ifdef GL_EXT_point_parameters
PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT = NULL;
PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT = NULL;
PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS = NULL;
PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS = NULL;
#endif //GL_EXT_point_parameters

#ifdef GL_EXT_secondary_color
PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT = NULL;
PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT = NULL;
PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT = NULL;
PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT = NULL;
PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT = NULL;
PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT = NULL;
PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT = NULL;
PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT = NULL;
PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT = NULL;
PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT = NULL;
PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT = NULL;
PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT = NULL;
PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT = NULL;
PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT = NULL;
PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT = NULL;
PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT = NULL;
PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT = NULL;
#endif //GL_EXT_secondary_color

#ifdef GL_EXT_stencil_two_side
PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT = NULL;
#endif //GL_EXT_stencil_two_side

#ifdef GL_EXT_texture3D
PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT = NULL;
PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT = NULL;
#endif //GL_EXT_texture3D

#ifdef GL_EXT_texture_object
PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT = NULL;
PFNGLBINDTEXTUREEXTPROC glBindTextureEXT = NULL;
PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT = NULL;
PFNGLGENTEXTURESEXTPROC glGenTexturesEXT = NULL;
PFNGLISTEXTUREEXTPROC glIsTextureEXT = NULL;
PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT = NULL;
#endif //GL_EXT_texture_object

#ifdef GL_EXT_vertex_array
PFNGLARRAYELEMENTEXTPROC glArrayElementEXT = NULL;
PFNGLCOLORPOINTEREXTPROC glColorPointerEXT = NULL;
PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT = NULL;
PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT = NULL;
PFNGLGETPOINTERVEXTPROC glGetPointervEXT = NULL;
PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT = NULL;
PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT = NULL;
PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT = NULL;
PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT = NULL;
#endif //GL_EXT_vertex_array

#ifdef GL_EXT_vertex_weighting
PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT = NULL;
PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT = NULL;
PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT = NULL;
#endif //GL_EXT_vertex_weighting

#ifdef GL_NV_element_array
PFNGLELEMENTPOINTERNVPROC glElementPointerNV = NULL;
PFNGLDRAWELEMENTARRAYNVPROC glDrawElementArrayNV = NULL;
PFNGLDRAWRANGEELEMENTARRAYNVPROC glDrawRangeElementArrayNV = NULL;
PFNGLMULTIDRAWELEMENTARRAYNVPROC glMultiDrawElementArrayNV = NULL;
PFNGLMULTIDRAWRANGEELEMENTARRAYNVPROC glMultiDrawRangeElementArrayNV = NULL;
#endif //GL_NV_element_array

#ifdef GL_NV_fence
PFNGLDELETEFENCESNVPROC glDeleteFencesNV = NULL;
PFNGLGENFENCESNVPROC glGenFencesNV = NULL;
PFNGLISFENCENVPROC glIsFenceNV = NULL;
PFNGLTESTFENCENVPROC glTestFenceNV = NULL;
PFNGLGETFENCEIVNVPROC glGetFenceivNV = NULL;
PFNGLFINISHFENCENVPROC glFinishFenceNV = NULL;
PFNGLSETFENCENVPROC glSetFenceNV = NULL;
#endif //GL_NV_fence

#ifdef GL_NV_fragment_program
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV = NULL;
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV = NULL;
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV = NULL;
#endif //GL_NV_fragment_program

#ifdef GL_NV_half_float
PFNGLVERTEX2HNVPROC glVertex2hNV = NULL;
PFNGLVERTEX2HVNVPROC glVertex2hvNV = NULL;
PFNGLVERTEX3HNVPROC glVertex3hNV = NULL;
PFNGLVERTEX3HVNVPROC glVertex3hvNV = NULL;
PFNGLVERTEX4HNVPROC glVertex4hNV = NULL;
PFNGLVERTEX4HVNVPROC glVertex4hvNV = NULL;
PFNGLNORMAL3HNVPROC glNormal3hNV = NULL;
PFNGLNORMAL3HVNVPROC glNormal3hvNV = NULL;
PFNGLCOLOR3HNVPROC glColor3hNV = NULL;
PFNGLCOLOR3HVNVPROC glColor3hvNV = NULL;
PFNGLCOLOR4HNVPROC glColor4hNV = NULL;
PFNGLCOLOR4HVNVPROC glColor4hvNV = NULL;
PFNGLTEXCOORD1HNVPROC glTexCoord1hNV = NULL;
PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV = NULL;
PFNGLTEXCOORD2HNVPROC glTexCoord2hNV = NULL;
PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV = NULL;
PFNGLTEXCOORD3HNVPROC glTexCoord3hNV = NULL;
PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV = NULL;
PFNGLTEXCOORD4HNVPROC glTexCoord4hNV = NULL;
PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV = NULL;
PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV = NULL;
PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV = NULL;
PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV = NULL;
PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV = NULL;
PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV = NULL;
PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV = NULL;
PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV = NULL;
PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV = NULL;
PFNGLFOGCOORDHNVPROC glFogCoordhNV = NULL;
PFNGLFOGCOORDHVNVPROC glFogCoordhvNV = NULL;
PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV = NULL;
PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV = NULL;
PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV = NULL;
PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV = NULL;
PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV = NULL;
PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV = NULL;
PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV = NULL;
PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV = NULL;
PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV = NULL;
PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV = NULL;
PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV = NULL;
PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV = NULL;
PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV = NULL;
PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV = NULL;
PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV = NULL;
PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV = NULL;
#endif //GL_NV_half_float

#ifdef GL_NV_occlusion_query
PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV = NULL;
PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV = NULL;
PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV = NULL;
PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV = NULL;
PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV = NULL;
PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV = NULL;
PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV = NULL;
#endif //GL_NV_occlusion_query

#ifdef GL_NV_pixel_data_range
PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV = NULL;
PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV = NULL;
#endif //GL_NV_pixel_data_range

#ifdef GL_NV_point_sprite
PFNGLPOINTPARAMETERINVPROC glPointParameteriNV = NULL;
PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV = NULL;
#endif //GL_NV_point_sprite

#ifdef GL_NV_primitive_restart
PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV = NULL;
PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV = NULL;
#endif //GL_NV_primitive_restart

#ifdef GL_NV_register_combiners
PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV = NULL;
PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV = NULL;
PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV = NULL;
PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV = NULL;
PFNGLCOMBINERINPUTNVPROC glCombinerInputNV = NULL;
PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV = NULL;
PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV = NULL;
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV = NULL;
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV = NULL;
#endif //GL_NV_register_combiners

#ifdef GL_NV_register_combiners2
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV = NULL;
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV = NULL;
#endif //GL_NV_register_combiners2

#ifdef GL_NV_stencil_two_side
PFNGLACTIVESTENCILFACENVPROC glActiveStencilFaceNV = NULL;
#endif //GL_NV_stencil_two_side

#ifdef GL_NV_vertex_array_range
PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV = NULL;
PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV = NULL;
#endif //GL_NV_vertex_array_range

#ifdef GL_NV_vertex_program
PFNGLBINDPROGRAMNVPROC glBindProgramNV = NULL;
PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV = NULL;
PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV = NULL;
PFNGLGENPROGRAMSNVPROC glGenProgramsNV = NULL;
PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV = NULL;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV = NULL;
PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV = NULL;
PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV = NULL;
PFNGLGETPROGRAMIVNVPROC glGetProgramivNV = NULL;
PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV = NULL;
PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV = NULL;
PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV = NULL;
PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV = NULL;
PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV = NULL;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV = NULL;
PFNGLISPROGRAMNVPROC glIsProgramNV = NULL;
PFNGLLOADPROGRAMNVPROC glLoadProgramNV = NULL;
PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV = NULL;
PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV = NULL;
PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV = NULL;
PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV = NULL;
PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV = NULL;
PFNGLTRACKMATRIXNVPROC glTrackMatrixNV = NULL;
PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV = NULL;
PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV = NULL;
PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV = NULL;
PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV = NULL;
PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV = NULL;
PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV = NULL;
PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV = NULL;
PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV = NULL;
PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV = NULL;
PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV = NULL;
PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV = NULL;
PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV = NULL;
PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV = NULL;
PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV = NULL;
PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV = NULL;
PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV = NULL;
PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV = NULL;
PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV = NULL;
PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV = NULL;
PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV = NULL;
PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV = NULL;
PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV = NULL;
PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV = NULL;
PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV = NULL;
PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV = NULL;
PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV = NULL;
PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV = NULL;
PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV = NULL;
PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV = NULL;
PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV = NULL;
PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV = NULL;
PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV = NULL;
PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV = NULL;
PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV = NULL;
PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV = NULL;
PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV = NULL;
PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV = NULL;
PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV = NULL;
PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV = NULL;
PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV = NULL;
#endif //GL_NV_vertex_program

#ifdef GL_VERSION_1_2
PFNGLBLENDCOLORPROC glBlendColor = NULL;
PFNGLBLENDEQUATIONPROC glBlendEquation = NULL;
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements = NULL;
PFNGLCOLORTABLEPROC glColorTable = NULL;
PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv = NULL;
PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv = NULL;
PFNGLCOPYCOLORTABLEPROC glCopyColorTable = NULL;
PFNGLGETCOLORTABLEPROC glGetColorTable = NULL;
PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv = NULL;
PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv = NULL;
PFNGLCOLORSUBTABLEPROC glColorSubTable = NULL;
PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable = NULL;
PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D = NULL;
PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D = NULL;
PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf = NULL;
PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv = NULL;
PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri = NULL;
PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D = NULL;
PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv = NULL;
PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter = NULL;
PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D = NULL;
PFNGLGETHISTOGRAMPROC glGetHistogram = NULL;
PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv = NULL;
PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv = NULL;
PFNGLGETMINMAXPROC glGetMinmax = NULL;
PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv = NULL;
PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv = NULL;
PFNGLHISTOGRAMPROC glHistogram = NULL;
PFNGLMINMAXPROC glMinmax = NULL;
PFNGLRESETHISTOGRAMPROC glResetHistogram = NULL;
PFNGLRESETMINMAXPROC glResetMinmax = NULL;
PFNGLTEXIMAGE3DPROC glTexImage3D = NULL;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D = NULL;
PFNGLACTIVETEXTUREPROC glActiveTexture = NULL;
PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture = NULL;
PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d = NULL;
PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv = NULL;
PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f = NULL;
PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv = NULL;
PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i = NULL;
PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv = NULL;
PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s = NULL;
PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv = NULL;
PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d = NULL;
PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv = NULL;
PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f = NULL;
PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv = NULL;
PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i = NULL;
PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv = NULL;
PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s = NULL;
PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv = NULL;
PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d = NULL;
PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv = NULL;
PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f = NULL;
PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv = NULL;
PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i = NULL;
PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv = NULL;
PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s = NULL;
PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv = NULL;
PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d = NULL;
PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv = NULL;
PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f = NULL;
PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv = NULL;
PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i = NULL;
PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv = NULL;
PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s = NULL;
PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv = NULL;
#endif //GL_VERSION_1_2

#ifdef GL_VERSION_1_3
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage = NULL;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage = NULL;
PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf = NULL;
PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd = NULL;
PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf = NULL;
PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd = NULL;
#endif //GL_VERSION_1_3

#ifdef GL_VERSION_1_4
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays = NULL;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements = NULL;
PFNGLPOINTPARAMETERFPROC glPointParameterf = NULL;
PFNGLPOINTPARAMETERFVPROC glPointParameterfv = NULL;
PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b = NULL;
PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv = NULL;
PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d = NULL;
PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv = NULL;
PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f = NULL;
PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv = NULL;
PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i = NULL;
PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv = NULL;
PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s = NULL;
PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv = NULL;
PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub = NULL;
PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv = NULL;
PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui = NULL;
PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv = NULL;
PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us = NULL;
PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv = NULL;
PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer = NULL;
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate = NULL;
PFNGLWINDOWPOS2DPROC glWindowPos2d = NULL;
PFNGLWINDOWPOS2FPROC glWindowPos2f = NULL;
PFNGLWINDOWPOS2IPROC glWindowPos2i = NULL;
PFNGLWINDOWPOS2SPROC glWindowPos2s = NULL;
PFNGLWINDOWPOS2DVPROC glWindowPos2dv = NULL;
PFNGLWINDOWPOS2FVPROC glWindowPos2fv = NULL;
PFNGLWINDOWPOS2IVPROC glWindowPos2iv = NULL;
PFNGLWINDOWPOS2SVPROC glWindowPos2sv = NULL;
PFNGLWINDOWPOS3DPROC glWindowPos3d = NULL;
PFNGLWINDOWPOS3FPROC glWindowPos3f = NULL;
PFNGLWINDOWPOS3IPROC glWindowPos3i = NULL;
PFNGLWINDOWPOS3SPROC glWindowPos3s = NULL;
PFNGLWINDOWPOS3DVPROC glWindowPos3dv = NULL;
PFNGLWINDOWPOS3FVPROC glWindowPos3fv = NULL;
PFNGLWINDOWPOS3IVPROC glWindowPos3iv = NULL;
PFNGLWINDOWPOS3SVPROC glWindowPos3sv = NULL;
#endif //GL_VERSION_1_4

#if defined(_WIN32)
#endif //_WIN32
static bool Load_GL_APPLE_specular_vector(GLExtensionReg *reg)
{
#ifdef GL_APPLE_specular_vector
	if(reg->QueryGLExtension("GL_APPLE_specular_vector") == 0)
		return false;
	return true;
#endif //GL_APPLE_specular_vector
	return false;
}

static bool Load_GL_APPLE_transform_hint(GLExtensionReg *reg)
{
#ifdef GL_APPLE_transform_hint
	if(reg->QueryGLExtension("GL_APPLE_transform_hint") == 0)
		return false;
	return true;
#endif //GL_APPLE_transform_hint
	return false;
}

static bool Load_GL_ARB_depth_texture(GLExtensionReg *reg)
{
#ifdef GL_ARB_depth_texture
	if(reg->QueryGLExtension("GL_ARB_depth_texture") == 0)
		return false;
	return true;
#endif //GL_ARB_depth_texture
	return false;
}

static bool Load_GL_ARB_fragment_program(GLExtensionReg *reg)
{
#ifdef GL_ARB_fragment_program
	if(reg->QueryGLExtension("GL_ARB_fragment_program") == 0)
		return false;
	return true;
#endif //GL_ARB_fragment_program
	return false;
}

static bool Load_GL_ARB_multisample(GLExtensionReg *reg)
{
#ifdef GL_ARB_multisample
	if(reg->QueryGLExtension("GL_ARB_multisample") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSAMPLECOVERAGEARBPROC, glSampleCoverageARB);
	return true;
#endif //GL_ARB_multisample
	return false;
}

static bool Load_GL_ARB_multitexture(GLExtensionReg *reg)
{
#ifdef GL_ARB_multitexture
	if(reg->QueryGLExtension("GL_ARB_multitexture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLACTIVETEXTUREARBPROC, glActiveTextureARB);
	GET_PROC_ADDRESS(PFNGLCLIENTACTIVETEXTUREARBPROC, glClientActiveTextureARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DARBPROC, glMultiTexCoord1dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DVARBPROC, glMultiTexCoord1dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FARBPROC, glMultiTexCoord1fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FVARBPROC, glMultiTexCoord1fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IARBPROC, glMultiTexCoord1iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IVARBPROC, glMultiTexCoord1ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SARBPROC, glMultiTexCoord1sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SVARBPROC, glMultiTexCoord1svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DARBPROC, glMultiTexCoord2dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DVARBPROC, glMultiTexCoord2dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FARBPROC, glMultiTexCoord2fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FVARBPROC, glMultiTexCoord2fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IARBPROC, glMultiTexCoord2iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IVARBPROC, glMultiTexCoord2ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SARBPROC, glMultiTexCoord2sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SVARBPROC, glMultiTexCoord2svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DARBPROC, glMultiTexCoord3dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DVARBPROC, glMultiTexCoord3dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FARBPROC, glMultiTexCoord3fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FVARBPROC, glMultiTexCoord3fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IARBPROC, glMultiTexCoord3iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IVARBPROC, glMultiTexCoord3ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SARBPROC, glMultiTexCoord3sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SVARBPROC, glMultiTexCoord3svARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DARBPROC, glMultiTexCoord4dARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DVARBPROC, glMultiTexCoord4dvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FARBPROC, glMultiTexCoord4fARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FVARBPROC, glMultiTexCoord4fvARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IARBPROC, glMultiTexCoord4iARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IVARBPROC, glMultiTexCoord4ivARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SARBPROC, glMultiTexCoord4sARB);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SVARBPROC, glMultiTexCoord4svARB);
	return true;
#endif //GL_ARB_multitexture
	return false;
}

static bool Load_GL_ARB_point_parameters(GLExtensionReg *reg)
{
#ifdef GL_ARB_point_parameters
	if(reg->QueryGLExtension("GL_ARB_point_parameters") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFARBPROC, glPointParameterfARB);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVARBPROC, glPointParameterfvARB);
	return true;
#endif //GL_ARB_point_parameters
	return false;
}

static bool Load_GL_ARB_shadow(GLExtensionReg *reg)
{
#ifdef GL_ARB_shadow
	if(reg->QueryGLExtension("GL_ARB_shadow") == 0)
		return false;
	return true;
#endif //GL_ARB_shadow
	return false;
}

static bool Load_GL_ARB_texture_border_clamp(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_border_clamp
	if(reg->QueryGLExtension("GL_ARB_texture_border_clamp") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_border_clamp
	return false;
}

static bool Load_GL_ARB_texture_compression(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_compression
	if(reg->QueryGLExtension("GL_ARB_texture_compression") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE3DARBPROC, glCompressedTexImage3DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE2DARBPROC, glCompressedTexImage2DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE1DARBPROC, glCompressedTexImage1DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC, glCompressedTexSubImage3DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC, glCompressedTexSubImage2DARB);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC, glCompressedTexSubImage1DARB);
	GET_PROC_ADDRESS(PFNGLGETCOMPRESSEDTEXIMAGEARBPROC, glGetCompressedTexImageARB);
	return true;
#endif //GL_ARB_texture_compression
	return false;
}

static bool Load_GL_ARB_texture_cube_map(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_cube_map
	if(reg->QueryGLExtension("GL_ARB_texture_cube_map") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_cube_map
	return false;
}

static bool Load_GL_ARB_texture_env_add(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_add
	if(reg->QueryGLExtension("GL_ARB_texture_env_add") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_add
	return false;
}

static bool Load_GL_ARB_texture_env_combine(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_combine
	if(reg->QueryGLExtension("GL_ARB_texture_env_combine") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_combine
	return false;
}

static bool Load_GL_ARB_texture_env_dot3(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_env_dot3
	if(reg->QueryGLExtension("GL_ARB_texture_env_dot3") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_env_dot3
	return false;
}

static bool Load_GL_ARB_texture_mirrored_repeat(GLExtensionReg *reg)
{
#ifdef GL_ARB_texture_mirrored_repeat
	if(reg->QueryGLExtension("GL_ARB_texture_mirrored_repeat") == 0)
		return false;
	return true;
#endif //GL_ARB_texture_mirrored_repeat
	return false;
}

static bool Load_GL_ARB_transpose_matrix(GLExtensionReg *reg)
{
#ifdef GL_ARB_transpose_matrix
	if(reg->QueryGLExtension("GL_ARB_transpose_matrix") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXFARBPROC, glLoadTransposeMatrixfARB);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXDARBPROC, glLoadTransposeMatrixdARB);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXFARBPROC, glMultTransposeMatrixfARB);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXDARBPROC, glMultTransposeMatrixdARB);
	return true;
#endif //GL_ARB_transpose_matrix
	return false;
}

static bool Load_GL_ARB_vertex_buffer_object(GLExtensionReg *reg)
{
#ifdef GL_ARB_vertex_buffer_object
	if(reg->QueryGLExtension("GL_ARB_vertex_buffer_object") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBINDBUFFERARBPROC, glBindBufferARB);
	GET_PROC_ADDRESS(PFNGLDELETEBUFFERSARBPROC, glDeleteBuffersARB);
	GET_PROC_ADDRESS(PFNGLGENBUFFERSARBPROC, glGenBuffersARB);
	GET_PROC_ADDRESS(PFNGLISBUFFERARBPROC, glIsBufferARB);
	GET_PROC_ADDRESS(PFNGLBUFFERDATAARBPROC, glBufferDataARB);
	GET_PROC_ADDRESS(PFNGLBUFFERSUBDATAARBPROC, glBufferSubDataARB);
	GET_PROC_ADDRESS(PFNGLGETBUFFERSUBDATAARBPROC, glGetBufferSubDataARB);
	GET_PROC_ADDRESS(PFNGLMAPBUFFERARBPROC, glMapBufferARB);
	GET_PROC_ADDRESS(PFNGLUNMAPBUFFERARBPROC, glUnmapBufferARB);
	GET_PROC_ADDRESS(PFNGLGETBUFFERPARAMETERIVARBPROC, glGetBufferParameterivARB);
	GET_PROC_ADDRESS(PFNGLGETBUFFERPOINTERVARBPROC, glGetBufferPointervARB);
	return true;
#endif //GL_ARB_vertex_buffer_object
	return false;
}

static bool Load_GL_ARB_vertex_program(GLExtensionReg *reg)
{
#ifdef GL_ARB_vertex_program
	if(reg->QueryGLExtension("GL_ARB_vertex_program") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SARBPROC, glVertexAttrib1sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FARBPROC, glVertexAttrib1fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DARBPROC, glVertexAttrib1dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SARBPROC, glVertexAttrib2sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FARBPROC, glVertexAttrib2fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DARBPROC, glVertexAttrib2dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SARBPROC, glVertexAttrib3sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FARBPROC, glVertexAttrib3fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DARBPROC, glVertexAttrib3dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SARBPROC, glVertexAttrib4sARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FARBPROC, glVertexAttrib4fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DARBPROC, glVertexAttrib4dARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUBARBPROC, glVertexAttrib4NubARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SVARBPROC, glVertexAttrib1svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FVARBPROC, glVertexAttrib1fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DVARBPROC, glVertexAttrib1dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SVARBPROC, glVertexAttrib2svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FVARBPROC, glVertexAttrib2fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DVARBPROC, glVertexAttrib2dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SVARBPROC, glVertexAttrib3svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FVARBPROC, glVertexAttrib3fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DVARBPROC, glVertexAttrib3dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4BVARBPROC, glVertexAttrib4bvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SVARBPROC, glVertexAttrib4svARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4IVARBPROC, glVertexAttrib4ivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBVARBPROC, glVertexAttrib4ubvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4USVARBPROC, glVertexAttrib4usvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UIVARBPROC, glVertexAttrib4uivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FVARBPROC, glVertexAttrib4fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DVARBPROC, glVertexAttrib4dvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NBVARBPROC, glVertexAttrib4NbvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NSVARBPROC, glVertexAttrib4NsvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NIVARBPROC, glVertexAttrib4NivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUBVARBPROC, glVertexAttrib4NubvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUSVARBPROC, glVertexAttrib4NusvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4NUIVARBPROC, glVertexAttrib4NuivARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBPOINTERARBPROC, glVertexAttribPointerARB);
	GET_PROC_ADDRESS(PFNGLENABLEVERTEXATTRIBARRAYARBPROC, glEnableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLDISABLEVERTEXATTRIBARRAYARBPROC, glDisableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMSTRINGARBPROC, glProgramStringARB);
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMARBPROC, glBindProgramARB);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSARBPROC, glDeleteProgramsARB);
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSARBPROC, glGenProgramsARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4DARBPROC, glProgramEnvParameter4dARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4DVARBPROC, glProgramEnvParameter4dvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FARBPROC, glProgramEnvParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FVARBPROC, glProgramEnvParameter4fvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4DARBPROC, glProgramLocalParameter4dARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4DVARBPROC, glProgramLocalParameter4dvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FARBPROC, glProgramLocalParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FVARBPROC, glProgramLocalParameter4fvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMENVPARAMETERDVARBPROC, glGetProgramEnvParameterdvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMENVPARAMETERFVARBPROC, glGetProgramEnvParameterfvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC, glGetProgramLocalParameterdvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC, glGetProgramLocalParameterfvARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMIVARBPROC, glGetProgramivARB);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMSTRINGARBPROC, glGetProgramStringARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBDVARBPROC, glGetVertexAttribdvARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBFVARBPROC, glGetVertexAttribfvARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBIVARBPROC, glGetVertexAttribivARB);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBPOINTERVARBPROC, glGetVertexAttribPointervARB);
	GET_PROC_ADDRESS(PFNGLISPROGRAMARBPROC, glIsProgramARB);
	return true;
#endif //GL_ARB_vertex_program
	return false;
}

static bool Load_GL_ARB_window_pos(GLExtensionReg *reg)
{
#ifdef GL_ARB_window_pos
	if(reg->QueryGLExtension("GL_ARB_window_pos") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DARBPROC, glWindowPos2dARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FARBPROC, glWindowPos2fARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IARBPROC, glWindowPos2iARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SARBPROC, glWindowPos2sARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DVARBPROC, glWindowPos2dvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FVARBPROC, glWindowPos2fvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IVARBPROC, glWindowPos2ivARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SVARBPROC, glWindowPos2svARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DARBPROC, glWindowPos3dARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FARBPROC, glWindowPos3fARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IARBPROC, glWindowPos3iARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SARBPROC, glWindowPos3sARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DVARBPROC, glWindowPos3dvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FVARBPROC, glWindowPos3fvARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IVARBPROC, glWindowPos3ivARB);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SVARBPROC, glWindowPos3svARB);
	return true;
#endif //GL_ARB_window_pos
	return false;
}

static bool Load_GL_EXT_422_pixels(GLExtensionReg *reg)
{
#ifdef GL_EXT_422_pixels
	if(reg->QueryGLExtension("GL_EXT_422_pixels") == 0)
		return false;
	return true;
#endif //GL_EXT_422_pixels
	return false;
}

static bool Load_GL_EXT_abgr(GLExtensionReg *reg)
{
#ifdef GL_EXT_abgr
	if(reg->QueryGLExtension("GL_EXT_abgr") == 0)
		return false;
	return true;
#endif //GL_EXT_abgr
	return false;
}

static bool Load_GL_EXT_bgra(GLExtensionReg *reg)
{
#ifdef GL_EXT_bgra
	if(reg->QueryGLExtension("GL_EXT_bgra") == 0)
		return false;
	return true;
#endif //GL_EXT_bgra
	return false;
}

static bool Load_GL_EXT_blend_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_color
	if(reg->QueryGLExtension("GL_EXT_blend_color") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDCOLOREXTPROC, glBlendColorEXT);
	return true;
#endif //GL_EXT_blend_color
	return false;
}

static bool Load_GL_EXT_blend_func_separate(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_func_separate
	if(reg->QueryGLExtension("GL_EXT_blend_func_separate") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDFUNCSEPARATEEXTPROC, glBlendFuncSeparateEXT);
	return true;
#endif //GL_EXT_blend_func_separate
	return false;
}

static bool Load_GL_EXT_blend_logic_op(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_logic_op
	if(reg->QueryGLExtension("GL_EXT_blend_logic_op") == 0)
		return false;
	return true;
#endif //GL_EXT_blend_logic_op
	return false;
}

static bool Load_GL_EXT_blend_minmax(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_minmax
	if(reg->QueryGLExtension("GL_EXT_blend_minmax") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBLENDEQUATIONEXTPROC, glBlendEquationEXT);
	return true;
#endif //GL_EXT_blend_minmax
	return false;
}

static bool Load_GL_EXT_blend_subtract(GLExtensionReg *reg)
{
#ifdef GL_EXT_blend_subtract
	if(reg->QueryGLExtension("GL_EXT_blend_subtract") == 0)
		return false;
	return true;
#endif //GL_EXT_blend_subtract
	return false;
}

static bool Load_GL_EXT_clip_volume_hint(GLExtensionReg *reg)
{
#ifdef GL_EXT_clip_volume_hint
	if(reg->QueryGLExtension("GL_EXT_clip_volume_hint") == 0)
		return false;
	return true;
#endif //GL_EXT_clip_volume_hint
	return false;
}

static bool Load_GL_EXT_cmyka(GLExtensionReg *reg)
{
#ifdef GL_EXT_cmyka
	if(reg->QueryGLExtension("GL_EXT_cmyka") == 0)
		return false;
	return true;
#endif //GL_EXT_cmyka
	return false;
}

static bool Load_GL_EXT_color_subtable(GLExtensionReg *reg)
{
#ifdef GL_EXT_color_subtable
	if(reg->QueryGLExtension("GL_EXT_color_subtable") == 0)
		return false;
	return true;
#endif //GL_EXT_color_subtable
	return false;
}

static bool Load_GL_EXT_compiled_vertex_array(GLExtensionReg *reg)
{
#ifdef GL_EXT_compiled_vertex_array
	if(reg->QueryGLExtension("GL_EXT_compiled_vertex_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLLOCKARRAYSEXTPROC, glLockArraysEXT);
	GET_PROC_ADDRESS(PFNGLUNLOCKARRAYSEXTPROC, glUnlockArraysEXT);
	return true;
#endif //GL_EXT_compiled_vertex_array
	return false;
}

static bool Load_GL_EXT_convolution(GLExtensionReg *reg)
{
#ifdef GL_EXT_convolution
	if(reg->QueryGLExtension("GL_EXT_convolution") == 0)
		return false;
	return true;
#endif //GL_EXT_convolution
	return false;
}

static bool Load_GL_EXT_coordinate_frame(GLExtensionReg *reg)
{
#ifdef GL_EXT_coordinate_frame
	if(reg->QueryGLExtension("GL_EXT_coordinate_frame") == 0)
		return false;
	return true;
#endif //GL_EXT_coordinate_frame
	return false;
}

static bool Load_GL_EXT_copy_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_copy_texture
	if(reg->QueryGLExtension("GL_EXT_copy_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_copy_texture
	return false;
}

static bool Load_GL_EXT_cull_vertex(GLExtensionReg *reg)
{
#ifdef GL_EXT_cull_vertex
	if(reg->QueryGLExtension("GL_EXT_cull_vertex") == 0)
		return false;
	return true;
#endif //GL_EXT_cull_vertex
	return false;
}

static bool Load_GL_EXT_draw_range_elements(GLExtensionReg *reg)
{
#ifdef GL_EXT_draw_range_elements
	if(reg->QueryGLExtension("GL_EXT_draw_range_elements") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTSEXTPROC, glDrawRangeElementsEXT);
	return true;
#endif //GL_EXT_draw_range_elements
	return false;
}

static bool Load_GL_EXT_fog_coord(GLExtensionReg *reg)
{
#ifdef GL_EXT_fog_coord
	if(reg->QueryGLExtension("GL_EXT_fog_coord") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFOGCOORDFEXTPROC, glFogCoordfEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDFVEXTPROC, glFogCoordfvEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDDEXTPROC, glFogCoorddEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDDVEXTPROC, glFogCoorddvEXT);
	GET_PROC_ADDRESS(PFNGLFOGCOORDPOINTEREXTPROC, glFogCoordPointerEXT);
	return true;
#endif //GL_EXT_fog_coord
	return false;
}

static bool Load_GL_EXT_histogram(GLExtensionReg *reg)
{
#ifdef GL_EXT_histogram
	if(reg->QueryGLExtension("GL_EXT_histogram") == 0)
		return false;
	return true;
#endif //GL_EXT_histogram
	return false;
}

static bool Load_GL_EXT_index_array_formats(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_array_formats
	if(reg->QueryGLExtension("GL_EXT_index_array_formats") == 0)
		return false;
	return true;
#endif //GL_EXT_index_array_formats
	return false;
}

static bool Load_GL_EXT_index_func(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_func
	if(reg->QueryGLExtension("GL_EXT_index_func") == 0)
		return false;
	return true;
#endif //GL_EXT_index_func
	return false;
}

static bool Load_GL_EXT_index_material(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_material
	if(reg->QueryGLExtension("GL_EXT_index_material") == 0)
		return false;
	return true;
#endif //GL_EXT_index_material
	return false;
}

static bool Load_GL_EXT_index_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_index_texture
	if(reg->QueryGLExtension("GL_EXT_index_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_index_texture
	return false;
}

static bool Load_GL_EXT_light_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_light_texture
	if(reg->QueryGLExtension("GL_EXT_light_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_light_texture
	return false;
}

static bool Load_GL_EXT_misc_attribute(GLExtensionReg *reg)
{
#ifdef GL_EXT_misc_attribute
	if(reg->QueryGLExtension("GL_EXT_misc_attribute") == 0)
		return false;
	return true;
#endif //GL_EXT_misc_attribute
	return false;
}

static bool Load_GL_EXT_multi_draw_arrays(GLExtensionReg *reg)
{
#ifdef GL_EXT_multi_draw_arrays
	if(reg->QueryGLExtension("GL_EXT_multi_draw_arrays") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLMULTIDRAWARRAYSEXTPROC, glMultiDrawArraysEXT);
	GET_PROC_ADDRESS(PFNGLMULTIDRAWELEMENTSEXTPROC, glMultiDrawElementsEXT);
	return true;
#endif //GL_EXT_multi_draw_arrays
	return false;
}

static bool Load_GL_EXT_packed_pixels(GLExtensionReg *reg)
{
#ifdef GL_EXT_packed_pixels
	if(reg->QueryGLExtension("GL_EXT_packed_pixels") == 0)
		return false;
	return true;
#endif //GL_EXT_packed_pixels
	return false;
}

static bool Load_GL_EXT_paletted_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_paletted_texture
	if(reg->QueryGLExtension("GL_EXT_paletted_texture") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOLORTABLEEXTPROC, glColorTableEXT);
	GET_PROC_ADDRESS(PFNGLCOLORSUBTABLEEXTPROC, glColorSubTableEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEEXTPROC, glGetColorTableEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERIVEXTPROC, glGetColorTableParameterivEXT);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERFVEXTPROC, glGetColorTableParameterfvEXT);
	return true;
#endif //GL_EXT_paletted_texture
	return false;
}

static bool Load_GL_EXT_pixel_transform(GLExtensionReg *reg)
{
#ifdef GL_EXT_pixel_transform
	if(reg->QueryGLExtension("GL_EXT_pixel_transform") == 0)
		return false;
	return true;
#endif //GL_EXT_pixel_transform
	return false;
}

static bool Load_GL_EXT_pixel_transform_color_table(GLExtensionReg *reg)
{
#ifdef GL_EXT_pixel_transform_color_table
	if(reg->QueryGLExtension("GL_EXT_pixel_transform_color_table") == 0)
		return false;
	return true;
#endif //GL_EXT_pixel_transform_color_table
	return false;
}

static bool Load_GL_EXT_point_parameters(GLExtensionReg *reg)
{
#ifdef GL_EXT_point_parameters
	if(reg->QueryGLExtension("GL_EXT_point_parameters") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFEXTPROC, glPointParameterfEXT);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVEXTPROC, glPointParameterfvEXT);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFSGISPROC, glPointParameterfSGIS);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVSGISPROC, glPointParameterfvSGIS);
	return true;
#endif //GL_EXT_point_parameters
	return false;
}

static bool Load_GL_EXT_polygon_offset(GLExtensionReg *reg)
{
#ifdef GL_EXT_polygon_offset
	if(reg->QueryGLExtension("GL_EXT_polygon_offset") == 0)
		return false;
	return true;
#endif //GL_EXT_polygon_offset
	return false;
}

static bool Load_GL_EXT_rescale_normal(GLExtensionReg *reg)
{
#ifdef GL_EXT_rescale_normal
	if(reg->QueryGLExtension("GL_EXT_rescale_normal") == 0)
		return false;
	return true;
#endif //GL_EXT_rescale_normal
	return false;
}

static bool Load_GL_EXT_secondary_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_secondary_color
	if(reg->QueryGLExtension("GL_EXT_secondary_color") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BEXTPROC, glSecondaryColor3bEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BVEXTPROC, glSecondaryColor3bvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DEXTPROC, glSecondaryColor3dEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DVEXTPROC, glSecondaryColor3dvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FEXTPROC, glSecondaryColor3fEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FVEXTPROC, glSecondaryColor3fvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IEXTPROC, glSecondaryColor3iEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IVEXTPROC, glSecondaryColor3ivEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SEXTPROC, glSecondaryColor3sEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SVEXTPROC, glSecondaryColor3svEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBEXTPROC, glSecondaryColor3ubEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBVEXTPROC, glSecondaryColor3ubvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIEXTPROC, glSecondaryColor3uiEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIVEXTPROC, glSecondaryColor3uivEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USEXTPROC, glSecondaryColor3usEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USVEXTPROC, glSecondaryColor3usvEXT);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLORPOINTEREXTPROC, glSecondaryColorPointerEXT);
	return true;
#endif //GL_EXT_secondary_color
	return false;
}

static bool Load_GL_EXT_separate_specular_color(GLExtensionReg *reg)
{
#ifdef GL_EXT_separate_specular_color
	if(reg->QueryGLExtension("GL_EXT_separate_specular_color") == 0)
		return false;
	return true;
#endif //GL_EXT_separate_specular_color
	return false;
}

static bool Load_GL_EXT_shadow_funcs(GLExtensionReg *reg)
{
#ifdef GL_EXT_shadow_funcs
	if(reg->QueryGLExtension("GL_EXT_shadow_funcs") == 0)
		return false;
	return true;
#endif //GL_EXT_shadow_funcs
	return false;
}

static bool Load_GL_EXT_shared_texture_palette(GLExtensionReg *reg)
{
#ifdef GL_EXT_shared_texture_palette
	if(reg->QueryGLExtension("GL_EXT_shared_texture_palette") == 0)
		return false;
	return true;
#endif //GL_EXT_shared_texture_palette
	return false;
}

static bool Load_GL_EXT_stencil_two_side(GLExtensionReg *reg)
{
#ifdef GL_EXT_stencil_two_side
	if(reg->QueryGLExtension("GL_EXT_stencil_two_side") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLACTIVESTENCILFACEEXTPROC, glActiveStencilFaceEXT);
	return true;
#endif //GL_EXT_stencil_two_side
	return false;
}

static bool Load_GL_EXT_stencil_wrap(GLExtensionReg *reg)
{
#ifdef GL_EXT_stencil_wrap
	if(reg->QueryGLExtension("GL_EXT_stencil_wrap") == 0)
		return false;
	return true;
#endif //GL_EXT_stencil_wrap
	return false;
}

static bool Load_GL_EXT_subtexture(GLExtensionReg *reg)
{
#ifdef GL_EXT_subtexture
	if(reg->QueryGLExtension("GL_EXT_subtexture") == 0)
		return false;
	return true;
#endif //GL_EXT_subtexture
	return false;
}

static bool Load_GL_EXT_texture(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture
	if(reg->QueryGLExtension("GL_EXT_texture") == 0)
		return false;
	return true;
#endif //GL_EXT_texture
	return false;
}

static bool Load_GL_EXT_texture3D(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture3D
	if(reg->QueryGLExtension("GL_EXT_texture3D") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLTEXIMAGE3DEXTPROC, glTexImage3DEXT);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE3DEXTPROC, glTexSubImage3DEXT);
	return true;
#endif //GL_EXT_texture3D
	return false;
}

static bool Load_GL_EXT_texture_compression_s3tc(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_compression_s3tc
	if(reg->QueryGLExtension("GL_EXT_texture_compression_s3tc") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_compression_s3tc
	return false;
}

static bool Load_GL_EXT_texture_cube_map(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_cube_map
	if(reg->QueryGLExtension("GL_EXT_texture_cube_map") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_cube_map
	return false;
}

static bool Load_GL_EXT_texture_edge_clamp(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_edge_clamp
	if(reg->QueryGLExtension("GL_EXT_texture_edge_clamp") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_edge_clamp
	return false;
}

static bool Load_GL_EXT_texture_env_add(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_add
	if(reg->QueryGLExtension("GL_EXT_texture_env_add") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_add
	return false;
}

static bool Load_GL_EXT_texture_env_combine(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_combine
	if(reg->QueryGLExtension("GL_EXT_texture_env_combine") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_combine
	return false;
}

static bool Load_GL_EXT_texture_env_dot3(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_env_dot3
	if(reg->QueryGLExtension("GL_EXT_texture_env_dot3") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_env_dot3
	return false;
}

static bool Load_GL_EXT_texture_filter_anisotropic(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_filter_anisotropic
	if(reg->QueryGLExtension("GL_EXT_texture_filter_anisotropic") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_filter_anisotropic
	return false;
}

static bool Load_GL_EXT_texture_lod_bias(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_lod_bias
	if(reg->QueryGLExtension("GL_EXT_texture_lod_bias") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_lod_bias
	return false;
}

static bool Load_GL_EXT_texture_object(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_object
	if(reg->QueryGLExtension("GL_EXT_texture_object") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLARETEXTURESRESIDENTEXTPROC, glAreTexturesResidentEXT);
	GET_PROC_ADDRESS(PFNGLBINDTEXTUREEXTPROC, glBindTextureEXT);
	GET_PROC_ADDRESS(PFNGLDELETETEXTURESEXTPROC, glDeleteTexturesEXT);
	GET_PROC_ADDRESS(PFNGLGENTEXTURESEXTPROC, glGenTexturesEXT);
	GET_PROC_ADDRESS(PFNGLISTEXTUREEXTPROC, glIsTextureEXT);
	GET_PROC_ADDRESS(PFNGLPRIORITIZETEXTURESEXTPROC, glPrioritizeTexturesEXT);
	return true;
#endif //GL_EXT_texture_object
	return false;
}

static bool Load_GL_EXT_texture_perturb_normal(GLExtensionReg *reg)
{
#ifdef GL_EXT_texture_perturb_normal
	if(reg->QueryGLExtension("GL_EXT_texture_perturb_normal") == 0)
		return false;
	return true;
#endif //GL_EXT_texture_perturb_normal
	return false;
}

static bool Load_GL_EXT_vertex_array(GLExtensionReg *reg)
{
#ifdef GL_EXT_vertex_array
	if(reg->QueryGLExtension("GL_EXT_vertex_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLARRAYELEMENTEXTPROC, glArrayElementEXT);
	GET_PROC_ADDRESS(PFNGLCOLORPOINTEREXTPROC, glColorPointerEXT);
	GET_PROC_ADDRESS(PFNGLDRAWARRAYSEXTPROC, glDrawArraysEXT);
	GET_PROC_ADDRESS(PFNGLEDGEFLAGPOINTEREXTPROC, glEdgeFlagPointerEXT);
	GET_PROC_ADDRESS(PFNGLGETPOINTERVEXTPROC, glGetPointervEXT);
	GET_PROC_ADDRESS(PFNGLINDEXPOINTEREXTPROC, glIndexPointerEXT);
	GET_PROC_ADDRESS(PFNGLNORMALPOINTEREXTPROC, glNormalPointerEXT);
	GET_PROC_ADDRESS(PFNGLTEXCOORDPOINTEREXTPROC, glTexCoordPointerEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXPOINTEREXTPROC, glVertexPointerEXT);
	return true;
#endif //GL_EXT_vertex_array
	return false;
}

static bool Load_GL_EXT_vertex_weighting(GLExtensionReg *reg)
{
#ifdef GL_EXT_vertex_weighting
	if(reg->QueryGLExtension("GL_EXT_vertex_weighting") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTFEXTPROC, glVertexWeightfEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTFVEXTPROC, glVertexWeightfvEXT);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTPOINTEREXTPROC, glVertexWeightPointerEXT);
	return true;
#endif //GL_EXT_vertex_weighting
	return false;
}

static bool Load_GL_HP_convolution_border_modes(GLExtensionReg *reg)
{
#ifdef GL_HP_convolution_border_modes
	if(reg->QueryGLExtension("GL_HP_convolution_border_modes") == 0)
		return false;
	return true;
#endif //GL_HP_convolution_border_modes
	return false;
}

static bool Load_GL_HP_image_transform(GLExtensionReg *reg)
{
#ifdef GL_HP_image_transform
	if(reg->QueryGLExtension("GL_HP_image_transform") == 0)
		return false;
	return true;
#endif //GL_HP_image_transform
	return false;
}

static bool Load_GL_HP_occlusion_test(GLExtensionReg *reg)
{
#ifdef GL_HP_occlusion_test
	if(reg->QueryGLExtension("GL_HP_occlusion_test") == 0)
		return false;
	return true;
#endif //GL_HP_occlusion_test
	return false;
}

static bool Load_GL_HP_texture_lighting(GLExtensionReg *reg)
{
#ifdef GL_HP_texture_lighting
	if(reg->QueryGLExtension("GL_HP_texture_lighting") == 0)
		return false;
	return true;
#endif //GL_HP_texture_lighting
	return false;
}

static bool Load_GL_IBM_cull_vertex(GLExtensionReg *reg)
{
#ifdef GL_IBM_cull_vertex
	if(reg->QueryGLExtension("GL_IBM_cull_vertex") == 0)
		return false;
	return true;
#endif //GL_IBM_cull_vertex
	return false;
}

static bool Load_GL_IBM_multimode_draw_arrays(GLExtensionReg *reg)
{
#ifdef GL_IBM_multimode_draw_arrays
	if(reg->QueryGLExtension("GL_IBM_multimode_draw_arrays") == 0)
		return false;
	return true;
#endif //GL_IBM_multimode_draw_arrays
	return false;
}

static bool Load_GL_IBM_rasterpos_clip(GLExtensionReg *reg)
{
#ifdef GL_IBM_rasterpos_clip
	if(reg->QueryGLExtension("GL_IBM_rasterpos_clip") == 0)
		return false;
	return true;
#endif //GL_IBM_rasterpos_clip
	return false;
}

static bool Load_GL_IBM_texture_mirrored_repeat(GLExtensionReg *reg)
{
#ifdef GL_IBM_texture_mirrored_repeat
	if(reg->QueryGLExtension("GL_IBM_texture_mirrored_repeat") == 0)
		return false;
	return true;
#endif //GL_IBM_texture_mirrored_repeat
	return false;
}

static bool Load_GL_IBM_vertex_array_lists(GLExtensionReg *reg)
{
#ifdef GL_IBM_vertex_array_lists
	if(reg->QueryGLExtension("GL_IBM_vertex_array_lists") == 0)
		return false;
	return true;
#endif //GL_IBM_vertex_array_lists
	return false;
}

static bool Load_GL_INGR_color_clamp(GLExtensionReg *reg)
{
#ifdef GL_INGR_color_clamp
	if(reg->QueryGLExtension("GL_INGR_color_clamp") == 0)
		return false;
	return true;
#endif //GL_INGR_color_clamp
	return false;
}

static bool Load_GL_INGR_interlace_read(GLExtensionReg *reg)
{
#ifdef GL_INGR_interlace_read
	if(reg->QueryGLExtension("GL_INGR_interlace_read") == 0)
		return false;
	return true;
#endif //GL_INGR_interlace_read
	return false;
}

static bool Load_GL_INGR_palette_buffer(GLExtensionReg *reg)
{
#ifdef GL_INGR_palette_buffer
	if(reg->QueryGLExtension("GL_INGR_palette_buffer") == 0)
		return false;
	return true;
#endif //GL_INGR_palette_buffer
	return false;
}

static bool Load_GL_INTEL_parallel_arrays(GLExtensionReg *reg)
{
#ifdef GL_INTEL_parallel_arrays
	if(reg->QueryGLExtension("GL_INTEL_parallel_arrays") == 0)
		return false;
	return true;
#endif //GL_INTEL_parallel_arrays
	return false;
}

static bool Load_GL_INTEL_texture_scissor(GLExtensionReg *reg)
{
#ifdef GL_INTEL_texture_scissor
	if(reg->QueryGLExtension("GL_INTEL_texture_scissor") == 0)
		return false;
	return true;
#endif //GL_INTEL_texture_scissor
	return false;
}

static bool Load_GL_MESA_resize_buffers(GLExtensionReg *reg)
{
#ifdef GL_MESA_resize_buffers
	if(reg->QueryGLExtension("GL_MESA_resize_buffers") == 0)
		return false;
	return true;
#endif //GL_MESA_resize_buffers
	return false;
}

static bool Load_GL_MESA_window_pos(GLExtensionReg *reg)
{
#ifdef GL_MESA_window_pos
	if(reg->QueryGLExtension("GL_MESA_window_pos") == 0)
		return false;
	return true;
#endif //GL_MESA_window_pos
	return false;
}

static bool Load_GL_NV_blend_square(GLExtensionReg *reg)
{
#ifdef GL_NV_blend_square
	if(reg->QueryGLExtension("GL_NV_blend_square") == 0)
		return false;
	return true;
#endif //GL_NV_blend_square
	return false;
}

static bool Load_GL_NV_copy_depth_to_color(GLExtensionReg *reg)
{
#ifdef GL_NV_copy_depth_to_color
	if(reg->QueryGLExtension("GL_NV_copy_depth_to_color") == 0)
		return false;
	return true;
#endif //GL_NV_copy_depth_to_color
	return false;
}

static bool Load_GL_NV_depth_clamp(GLExtensionReg *reg)
{
#ifdef GL_NV_depth_clamp
	if(reg->QueryGLExtension("GL_NV_depth_clamp") == 0)
		return false;
	return true;
#endif //GL_NV_depth_clamp
	return false;
}

static bool Load_GL_NV_element_array(GLExtensionReg *reg)
{
#ifdef GL_NV_element_array
	if(reg->QueryGLExtension("GL_NV_element_array") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLELEMENTPOINTERNVPROC, glElementPointerNV);
	GET_PROC_ADDRESS(PFNGLDRAWELEMENTARRAYNVPROC, glDrawElementArrayNV);
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTARRAYNVPROC, glDrawRangeElementArrayNV);
	GET_PROC_ADDRESS(PFNGLMULTIDRAWELEMENTARRAYNVPROC, glMultiDrawElementArrayNV);
	GET_PROC_ADDRESS(PFNGLMULTIDRAWRANGEELEMENTARRAYNVPROC, glMultiDrawRangeElementArrayNV);
	return true;
#endif //GL_NV_element_array
	return false;
}

static bool Load_GL_NV_fence(GLExtensionReg *reg)
{
#ifdef GL_NV_fence
	if(reg->QueryGLExtension("GL_NV_fence") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLDELETEFENCESNVPROC, glDeleteFencesNV);
	GET_PROC_ADDRESS(PFNGLGENFENCESNVPROC, glGenFencesNV);
	GET_PROC_ADDRESS(PFNGLISFENCENVPROC, glIsFenceNV);
	GET_PROC_ADDRESS(PFNGLTESTFENCENVPROC, glTestFenceNV);
	GET_PROC_ADDRESS(PFNGLGETFENCEIVNVPROC, glGetFenceivNV);
	GET_PROC_ADDRESS(PFNGLFINISHFENCENVPROC, glFinishFenceNV);
	GET_PROC_ADDRESS(PFNGLSETFENCENVPROC, glSetFenceNV);
	return true;
#endif //GL_NV_fence
	return false;
}

static bool Load_GL_NV_float_buffer(GLExtensionReg *reg)
{
#ifdef GL_NV_float_buffer
	if(reg->QueryGLExtension("GL_NV_float_buffer") == 0)
		return false;
	return true;
#endif //GL_NV_float_buffer
	return false;
}

static bool Load_GL_NV_fog_distance(GLExtensionReg *reg)
{
#ifdef GL_NV_fog_distance
	if(reg->QueryGLExtension("GL_NV_fog_distance") == 0)
		return false;
	return true;
#endif //GL_NV_fog_distance
	return false;
}

static bool Load_GL_NV_fragment_program(GLExtensionReg *reg)
{
#ifdef GL_NV_fragment_program
	if(reg->QueryGLExtension("GL_NV_fragment_program") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4FNVPROC, glProgramNamedParameter4fNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4DNVPROC, glProgramNamedParameter4dNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC, glProgramNamedParameter4fvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC, glProgramNamedParameter4dvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC, glGetProgramNamedParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC, glGetProgramNamedParameterdvNV);
	return true;
#endif //GL_NV_fragment_program
	return false;
}

static bool Load_GL_NV_half_float(GLExtensionReg *reg)
{
#ifdef GL_NV_half_float
	if(reg->QueryGLExtension("GL_NV_half_float") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLVERTEX2HNVPROC, glVertex2hNV);
	GET_PROC_ADDRESS(PFNGLVERTEX2HVNVPROC, glVertex2hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEX3HNVPROC, glVertex3hNV);
	GET_PROC_ADDRESS(PFNGLVERTEX3HVNVPROC, glVertex3hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEX4HNVPROC, glVertex4hNV);
	GET_PROC_ADDRESS(PFNGLVERTEX4HVNVPROC, glVertex4hvNV);
	GET_PROC_ADDRESS(PFNGLNORMAL3HNVPROC, glNormal3hNV);
	GET_PROC_ADDRESS(PFNGLNORMAL3HVNVPROC, glNormal3hvNV);
	GET_PROC_ADDRESS(PFNGLCOLOR3HNVPROC, glColor3hNV);
	GET_PROC_ADDRESS(PFNGLCOLOR3HVNVPROC, glColor3hvNV);
	GET_PROC_ADDRESS(PFNGLCOLOR4HNVPROC, glColor4hNV);
	GET_PROC_ADDRESS(PFNGLCOLOR4HVNVPROC, glColor4hvNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD1HNVPROC, glTexCoord1hNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD1HVNVPROC, glTexCoord1hvNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2HNVPROC, glTexCoord2hNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD2HVNVPROC, glTexCoord2hvNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD3HNVPROC, glTexCoord3hNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD3HVNVPROC, glTexCoord3hvNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4HNVPROC, glTexCoord4hNV);
	GET_PROC_ADDRESS(PFNGLTEXCOORD4HVNVPROC, glTexCoord4hvNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1HNVPROC, glMultiTexCoord1hNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1HVNVPROC, glMultiTexCoord1hvNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2HNVPROC, glMultiTexCoord2hNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2HVNVPROC, glMultiTexCoord2hvNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3HNVPROC, glMultiTexCoord3hNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3HVNVPROC, glMultiTexCoord3hvNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4HNVPROC, glMultiTexCoord4hNV);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4HVNVPROC, glMultiTexCoord4hvNV);
	GET_PROC_ADDRESS(PFNGLFOGCOORDHNVPROC, glFogCoordhNV);
	GET_PROC_ADDRESS(PFNGLFOGCOORDHVNVPROC, glFogCoordhvNV);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3HNVPROC, glSecondaryColor3hNV);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3HVNVPROC, glSecondaryColor3hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTHNVPROC, glVertexWeighthNV);
	GET_PROC_ADDRESS(PFNGLVERTEXWEIGHTHVNVPROC, glVertexWeighthvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1HNVPROC, glVertexAttrib1hNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1HVNVPROC, glVertexAttrib1hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2HNVPROC, glVertexAttrib2hNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2HVNVPROC, glVertexAttrib2hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3HNVPROC, glVertexAttrib3hNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3HVNVPROC, glVertexAttrib3hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4HNVPROC, glVertexAttrib4hNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4HVNVPROC, glVertexAttrib4hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1HVNVPROC, glVertexAttribs1hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2HVNVPROC, glVertexAttribs2hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3HVNVPROC, glVertexAttribs3hvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4HVNVPROC, glVertexAttribs4hvNV);
	return true;
#endif //GL_NV_half_float
	return false;
}

static bool Load_GL_NV_light_max_exponent(GLExtensionReg *reg)
{
#ifdef GL_NV_light_max_exponent
	if(reg->QueryGLExtension("GL_NV_light_max_exponent") == 0)
		return false;
	return true;
#endif //GL_NV_light_max_exponent
	return false;
}

static bool Load_GL_NV_multisample_filter_hint(GLExtensionReg *reg)
{
#ifdef GL_NV_multisample_filter_hint
	if(reg->QueryGLExtension("GL_NV_multisample_filter_hint") == 0)
		return false;
	return true;
#endif //GL_NV_multisample_filter_hint
	return false;
}

static bool Load_GL_NV_occlusion_query(GLExtensionReg *reg)
{
#ifdef GL_NV_occlusion_query
	if(reg->QueryGLExtension("GL_NV_occlusion_query") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLGENOCCLUSIONQUERIESNVPROC, glGenOcclusionQueriesNV);
	GET_PROC_ADDRESS(PFNGLDELETEOCCLUSIONQUERIESNVPROC, glDeleteOcclusionQueriesNV);
	GET_PROC_ADDRESS(PFNGLISOCCLUSIONQUERYNVPROC, glIsOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLBEGINOCCLUSIONQUERYNVPROC, glBeginOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLENDOCCLUSIONQUERYNVPROC, glEndOcclusionQueryNV);
	GET_PROC_ADDRESS(PFNGLGETOCCLUSIONQUERYIVNVPROC, glGetOcclusionQueryivNV);
	GET_PROC_ADDRESS(PFNGLGETOCCLUSIONQUERYUIVNVPROC, glGetOcclusionQueryuivNV);
	return true;
#endif //GL_NV_occlusion_query
	return false;
}

static bool Load_GL_NV_packed_depth_stencil(GLExtensionReg *reg)
{
#ifdef GL_NV_packed_depth_stencil
	if(reg->QueryGLExtension("GL_NV_packed_depth_stencil") == 0)
		return false;
	return true;
#endif //GL_NV_packed_depth_stencil
	return false;
}

static bool Load_GL_NV_pixel_data_range(GLExtensionReg *reg)
{
#ifdef GL_NV_pixel_data_range
	if(reg->QueryGLExtension("GL_NV_pixel_data_range") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPIXELDATARANGENVPROC, glPixelDataRangeNV);
	GET_PROC_ADDRESS(PFNGLFLUSHPIXELDATARANGENVPROC, glFlushPixelDataRangeNV);
	return true;
#endif //GL_NV_pixel_data_range
	return false;
}

static bool Load_GL_NV_point_sprite(GLExtensionReg *reg)
{
#ifdef GL_NV_point_sprite
	if(reg->QueryGLExtension("GL_NV_point_sprite") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERINVPROC, glPointParameteriNV);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERIVNVPROC, glPointParameterivNV);
	return true;
#endif //GL_NV_point_sprite
	return false;
}

static bool Load_GL_NV_primitive_restart(GLExtensionReg *reg)
{
#ifdef GL_NV_primitive_restart
	if(reg->QueryGLExtension("GL_NV_primitive_restart") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLPRIMITIVERESTARTNVPROC, glPrimitiveRestartNV);
	GET_PROC_ADDRESS(PFNGLPRIMITIVERESTARTINDEXNVPROC, glPrimitiveRestartIndexNV);
	return true;
#endif //GL_NV_primitive_restart
	return false;
}

static bool Load_GL_NV_register_combiners(GLExtensionReg *reg)
{
#ifdef GL_NV_register_combiners
	if(reg->QueryGLExtension("GL_NV_register_combiners") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERFVNVPROC, glCombinerParameterfvNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERFNVPROC, glCombinerParameterfNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERIVNVPROC, glCombinerParameterivNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERPARAMETERINVPROC, glCombinerParameteriNV);
	GET_PROC_ADDRESS(PFNGLCOMBINERINPUTNVPROC, glCombinerInputNV);
	GET_PROC_ADDRESS(PFNGLCOMBINEROUTPUTNVPROC, glCombinerOutputNV);
	GET_PROC_ADDRESS(PFNGLFINALCOMBINERINPUTNVPROC, glFinalCombinerInputNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC, glGetCombinerInputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC, glGetCombinerInputParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC, glGetCombinerOutputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC, glGetCombinerOutputParameterivNV);
	GET_PROC_ADDRESS(PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC, glGetFinalCombinerInputParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC, glGetFinalCombinerInputParameterivNV);
	return true;
#endif //GL_NV_register_combiners
	return false;
}

static bool Load_GL_NV_register_combiners2(GLExtensionReg *reg)
{
#ifdef GL_NV_register_combiners2
	if(reg->QueryGLExtension("GL_NV_register_combiners2") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLCOMBINERSTAGEPARAMETERFVNVPROC, glCombinerStageParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC, glGetCombinerStageParameterfvNV);
	return true;
#endif //GL_NV_register_combiners2
	return false;
}

static bool Load_GL_NV_stencil_two_side(GLExtensionReg *reg)
{
#ifdef GL_NV_stencil_two_side
	if(reg->QueryGLExtension("GL_NV_stencil_two_side") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLACTIVESTENCILFACENVPROC, glActiveStencilFaceNV);
	return true;
#endif //GL_NV_stencil_two_side
	return false;
}

static bool Load_GL_NV_texgen_emboss(GLExtensionReg *reg)
{
#ifdef GL_NV_texgen_emboss
	if(reg->QueryGLExtension("GL_NV_texgen_emboss") == 0)
		return false;
	return true;
#endif //GL_NV_texgen_emboss
	return false;
}

static bool Load_GL_NV_texgen_reflection(GLExtensionReg *reg)
{
#ifdef GL_NV_texgen_reflection
	if(reg->QueryGLExtension("GL_NV_texgen_reflection") == 0)
		return false;
	return true;
#endif //GL_NV_texgen_reflection
	return false;
}

static bool Load_GL_NV_texture_compression_vtc(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_compression_vtc
	if(reg->QueryGLExtension("GL_NV_texture_compression_vtc") == 0)
		return false;
	return true;
#endif //GL_NV_texture_compression_vtc
	return false;
}

static bool Load_GL_NV_texture_env_combine4(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_env_combine4
	if(reg->QueryGLExtension("GL_NV_texture_env_combine4") == 0)
		return false;
	return true;
#endif //GL_NV_texture_env_combine4
	return false;
}

static bool Load_GL_NV_texture_rectangle(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_rectangle
	if(reg->QueryGLExtension("GL_NV_texture_rectangle") == 0)
		return false;
	return true;
#endif //GL_NV_texture_rectangle
	return false;
}

static bool Load_GL_NV_texture_shader(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader
	if(reg->QueryGLExtension("GL_NV_texture_shader") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader
	return false;
}

static bool Load_GL_NV_texture_shader2(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader2
	if(reg->QueryGLExtension("GL_NV_texture_shader2") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader2
	return false;
}

static bool Load_GL_NV_texture_shader3(GLExtensionReg *reg)
{
#ifdef GL_NV_texture_shader3
	if(reg->QueryGLExtension("GL_NV_texture_shader3") == 0)
		return false;
	return true;
#endif //GL_NV_texture_shader3
	return false;
}

static bool Load_GL_NV_vertex_array_range(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_array_range
	if(reg->QueryGLExtension("GL_NV_vertex_array_range") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLFLUSHVERTEXARRAYRANGENVPROC, glFlushVertexArrayRangeNV);
	GET_PROC_ADDRESS(PFNGLVERTEXARRAYRANGENVPROC, glVertexArrayRangeNV);
	return true;
#endif //GL_NV_vertex_array_range
	return false;
}

static bool Load_GL_NV_vertex_array_range2(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_array_range2
	if(reg->QueryGLExtension("GL_NV_vertex_array_range2") == 0)
		return false;
	return true;
#endif //GL_NV_vertex_array_range2
	return false;
}

static bool Load_GL_NV_vertex_program(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_program
	if(reg->QueryGLExtension("GL_NV_vertex_program") == 0)
		return false;
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMNVPROC, glBindProgramNV);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSNVPROC, glDeleteProgramsNV);
	GET_PROC_ADDRESS(PFNGLEXECUTEPROGRAMNVPROC, glExecuteProgramNV);
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSNVPROC, glGenProgramsNV);
	GET_PROC_ADDRESS(PFNGLAREPROGRAMSRESIDENTNVPROC, glAreProgramsResidentNV);
	GET_PROC_ADDRESS(PFNGLREQUESTRESIDENTPROGRAMSNVPROC, glRequestResidentProgramsNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMPARAMETERFVNVPROC, glGetProgramParameterfvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMPARAMETERDVNVPROC, glGetProgramParameterdvNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMIVNVPROC, glGetProgramivNV);
	GET_PROC_ADDRESS(PFNGLGETPROGRAMSTRINGNVPROC, glGetProgramStringNV);
	GET_PROC_ADDRESS(PFNGLGETTRACKMATRIXIVNVPROC, glGetTrackMatrixivNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBDVNVPROC, glGetVertexAttribdvNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBFVNVPROC, glGetVertexAttribfvNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBIVNVPROC, glGetVertexAttribivNV);
	GET_PROC_ADDRESS(PFNGLGETVERTEXATTRIBPOINTERVNVPROC, glGetVertexAttribPointervNV);
	GET_PROC_ADDRESS(PFNGLISPROGRAMNVPROC, glIsProgramNV);
	GET_PROC_ADDRESS(PFNGLLOADPROGRAMNVPROC, glLoadProgramNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4FNVPROC, glProgramParameter4fNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4DNVPROC, glProgramParameter4dNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4DVNVPROC, glProgramParameter4dvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETER4FVNVPROC, glProgramParameter4fvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETERS4DVNVPROC, glProgramParameters4dvNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMPARAMETERS4FVNVPROC, glProgramParameters4fvNV);
	GET_PROC_ADDRESS(PFNGLTRACKMATRIXNVPROC, glTrackMatrixNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBPOINTERNVPROC, glVertexAttribPointerNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SNVPROC, glVertexAttrib1sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FNVPROC, glVertexAttrib1fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DNVPROC, glVertexAttrib1dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SNVPROC, glVertexAttrib2sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FNVPROC, glVertexAttrib2fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DNVPROC, glVertexAttrib2dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SNVPROC, glVertexAttrib3sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FNVPROC, glVertexAttrib3fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DNVPROC, glVertexAttrib3dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SNVPROC, glVertexAttrib4sNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FNVPROC, glVertexAttrib4fNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DNVPROC, glVertexAttrib4dNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBNVPROC, glVertexAttrib4ubNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1SVNVPROC, glVertexAttrib1svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FVNVPROC, glVertexAttrib1fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1DVNVPROC, glVertexAttrib1dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2SVNVPROC, glVertexAttrib2svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FVNVPROC, glVertexAttrib2fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2DVNVPROC, glVertexAttrib2dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3SVNVPROC, glVertexAttrib3svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FVNVPROC, glVertexAttrib3fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3DVNVPROC, glVertexAttrib3dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4SVNVPROC, glVertexAttrib4svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FVNVPROC, glVertexAttrib4fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4DVNVPROC, glVertexAttrib4dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4UBVNVPROC, glVertexAttrib4ubvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1SVNVPROC, glVertexAttribs1svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1FVNVPROC, glVertexAttribs1fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS1DVNVPROC, glVertexAttribs1dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2SVNVPROC, glVertexAttribs2svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2FVNVPROC, glVertexAttribs2fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS2DVNVPROC, glVertexAttribs2dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3SVNVPROC, glVertexAttribs3svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3FVNVPROC, glVertexAttribs3fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS3DVNVPROC, glVertexAttribs3dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4SVNVPROC, glVertexAttribs4svNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4FVNVPROC, glVertexAttribs4fvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4DVNVPROC, glVertexAttribs4dvNV);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBS4UBVNVPROC, glVertexAttribs4ubvNV);
	return true;
#endif //GL_NV_vertex_program
	return false;
}

static bool Load_GL_NV_vertex_program1_1(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_program1_1
	if(reg->QueryGLExtension("GL_NV_vertex_program1_1") == 0)
		return false;
	return true;
#endif //GL_NV_vertex_program1_1
	return false;
}

static bool Load_GL_NV_vertex_program2(GLExtensionReg *reg)
{
#ifdef GL_NV_vertex_program2
	if(reg->QueryGLExtension("GL_NV_vertex_program2") == 0)
		return false;
	return true;
#endif //GL_NV_vertex_program2
	return false;
}

static bool Load_GL_PGI_misc_hints(GLExtensionReg *reg)
{
#ifdef GL_PGI_misc_hints
	if(reg->QueryGLExtension("GL_PGI_misc_hints") == 0)
		return false;
	return true;
#endif //GL_PGI_misc_hints
	return false;
}

static bool Load_GL_PGI_vertex_hints(GLExtensionReg *reg)
{
#ifdef GL_PGI_vertex_hints
	if(reg->QueryGLExtension("GL_PGI_vertex_hints") == 0)
		return false;
	return true;
#endif //GL_PGI_vertex_hints
	return false;
}

static bool Load_GL_REND_screen_coordinates(GLExtensionReg *reg)
{
#ifdef GL_REND_screen_coordinates
	if(reg->QueryGLExtension("GL_REND_screen_coordinates") == 0)
		return false;
	return true;
#endif //GL_REND_screen_coordinates
	return false;
}

static bool Load_GL_SGIS_detail_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_detail_texture
	if(reg->QueryGLExtension("GL_SGIS_detail_texture") == 0)
		return false;
	return true;
#endif //GL_SGIS_detail_texture
	return false;
}

static bool Load_GL_SGIS_fog_function(GLExtensionReg *reg)
{
#ifdef GL_SGIS_fog_function
	if(reg->QueryGLExtension("GL_SGIS_fog_function") == 0)
		return false;
	return true;
#endif //GL_SGIS_fog_function
	return false;
}

static bool Load_GL_SGIS_generate_mipmap(GLExtensionReg *reg)
{
#ifdef GL_SGIS_generate_mipmap
	if(reg->QueryGLExtension("GL_SGIS_generate_mipmap") == 0)
		return false;
	return true;
#endif //GL_SGIS_generate_mipmap
	return false;
}

static bool Load_GL_SGIS_multisample(GLExtensionReg *reg)
{
#ifdef GL_SGIS_multisample
	if(reg->QueryGLExtension("GL_SGIS_multisample") == 0)
		return false;
	return true;
#endif //GL_SGIS_multisample
	return false;
}

static bool Load_GL_SGIS_pixel_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_pixel_texture
	if(reg->QueryGLExtension("GL_SGIS_pixel_texture") == 0)
		return false;
	return true;
#endif //GL_SGIS_pixel_texture
	return false;
}

static bool Load_GL_SGIS_sharpen_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIS_sharpen_texture
	if(reg->QueryGLExtension("GL_SGIS_sharpen_texture") == 0)
		return false;
	return true;
#endif //GL_SGIS_sharpen_texture
	return false;
}

static bool Load_GL_SGIS_texture4D(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture4D
	if(reg->QueryGLExtension("GL_SGIS_texture4D") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture4D
	return false;
}

static bool Load_GL_SGIS_texture_border_clamp(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_border_clamp
	if(reg->QueryGLExtension("GL_SGIS_texture_border_clamp") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_border_clamp
	return false;
}

static bool Load_GL_SGIS_texture_color_mask(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_color_mask
	if(reg->QueryGLExtension("GL_SGIS_texture_color_mask") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_color_mask
	return false;
}

static bool Load_GL_SGIS_texture_edge_clamp(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_edge_clamp
	if(reg->QueryGLExtension("GL_SGIS_texture_edge_clamp") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_edge_clamp
	return false;
}

static bool Load_GL_SGIS_texture_filter4(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_filter4
	if(reg->QueryGLExtension("GL_SGIS_texture_filter4") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_filter4
	return false;
}

static bool Load_GL_SGIS_texture_lod(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_lod
	if(reg->QueryGLExtension("GL_SGIS_texture_lod") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_lod
	return false;
}

static bool Load_GL_SGIS_texture_select(GLExtensionReg *reg)
{
#ifdef GL_SGIS_texture_select
	if(reg->QueryGLExtension("GL_SGIS_texture_select") == 0)
		return false;
	return true;
#endif //GL_SGIS_texture_select
	return false;
}

static bool Load_GL_SGIX_blend_alpha_minmax(GLExtensionReg *reg)
{
#ifdef GL_SGIX_blend_alpha_minmax
	if(reg->QueryGLExtension("GL_SGIX_blend_alpha_minmax") == 0)
		return false;
	return true;
#endif //GL_SGIX_blend_alpha_minmax
	return false;
}

static bool Load_GL_SGIX_clipmap(GLExtensionReg *reg)
{
#ifdef GL_SGIX_clipmap
	if(reg->QueryGLExtension("GL_SGIX_clipmap") == 0)
		return false;
	return true;
#endif //GL_SGIX_clipmap
	return false;
}

static bool Load_GL_SGIX_depth_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIX_depth_texture
	if(reg->QueryGLExtension("GL_SGIX_depth_texture") == 0)
		return false;
	return true;
#endif //GL_SGIX_depth_texture
	return false;
}

static bool Load_GL_SGIX_flush_raster(GLExtensionReg *reg)
{
#ifdef GL_SGIX_flush_raster
	if(reg->QueryGLExtension("GL_SGIX_flush_raster") == 0)
		return false;
	return true;
#endif //GL_SGIX_flush_raster
	return false;
}

static bool Load_GL_SGIX_fog_offset(GLExtensionReg *reg)
{
#ifdef GL_SGIX_fog_offset
	if(reg->QueryGLExtension("GL_SGIX_fog_offset") == 0)
		return false;
	return true;
#endif //GL_SGIX_fog_offset
	return false;
}

static bool Load_GL_SGIX_framezoom(GLExtensionReg *reg)
{
#ifdef GL_SGIX_framezoom
	if(reg->QueryGLExtension("GL_SGIX_framezoom") == 0)
		return false;
	return true;
#endif //GL_SGIX_framezoom
	return false;
}

static bool Load_GL_SGIX_instruments(GLExtensionReg *reg)
{
#ifdef GL_SGIX_instruments
	if(reg->QueryGLExtension("GL_SGIX_instruments") == 0)
		return false;
	return true;
#endif //GL_SGIX_instruments
	return false;
}

static bool Load_GL_SGIX_interlace(GLExtensionReg *reg)
{
#ifdef GL_SGIX_interlace
	if(reg->QueryGLExtension("GL_SGIX_interlace") == 0)
		return false;
	return true;
#endif //GL_SGIX_interlace
	return false;
}

static bool Load_GL_SGIX_ir_instrument1(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ir_instrument1
	if(reg->QueryGLExtension("GL_SGIX_ir_instrument1") == 0)
		return false;
	return true;
#endif //GL_SGIX_ir_instrument1
	return false;
}

static bool Load_GL_SGIX_list_priority(GLExtensionReg *reg)
{
#ifdef GL_SGIX_list_priority
	if(reg->QueryGLExtension("GL_SGIX_list_priority") == 0)
		return false;
	return true;
#endif //GL_SGIX_list_priority
	return false;
}

static bool Load_GL_SGIX_pixel_texture(GLExtensionReg *reg)
{
#ifdef GL_SGIX_pixel_texture
	if(reg->QueryGLExtension("GL_SGIX_pixel_texture") == 0)
		return false;
	return true;
#endif //GL_SGIX_pixel_texture
	return false;
}

static bool Load_GL_SGIX_reference_plane(GLExtensionReg *reg)
{
#ifdef GL_SGIX_reference_plane
	if(reg->QueryGLExtension("GL_SGIX_reference_plane") == 0)
		return false;
	return true;
#endif //GL_SGIX_reference_plane
	return false;
}

static bool Load_GL_SGIX_resample(GLExtensionReg *reg)
{
#ifdef GL_SGIX_resample
	if(reg->QueryGLExtension("GL_SGIX_resample") == 0)
		return false;
	return true;
#endif //GL_SGIX_resample
	return false;
}

static bool Load_GL_SGIX_shadow(GLExtensionReg *reg)
{
#ifdef GL_SGIX_shadow
	if(reg->QueryGLExtension("GL_SGIX_shadow") == 0)
		return false;
	return true;
#endif //GL_SGIX_shadow
	return false;
}

static bool Load_GL_SGIX_shadow_ambient(GLExtensionReg *reg)
{
#ifdef GL_SGIX_shadow_ambient
	if(reg->QueryGLExtension("GL_SGIX_shadow_ambient") == 0)
		return false;
	return true;
#endif //GL_SGIX_shadow_ambient
	return false;
}

static bool Load_GL_SGIX_sprite(GLExtensionReg *reg)
{
#ifdef GL_SGIX_sprite
	if(reg->QueryGLExtension("GL_SGIX_sprite") == 0)
		return false;
	return true;
#endif //GL_SGIX_sprite
	return false;
}

static bool Load_GL_SGIX_tag_sample_buffer(GLExtensionReg *reg)
{
#ifdef GL_SGIX_tag_sample_buffer
	if(reg->QueryGLExtension("GL_SGIX_tag_sample_buffer") == 0)
		return false;
	return true;
#endif //GL_SGIX_tag_sample_buffer
	return false;
}

static bool Load_GL_SGIX_texture_add_env(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_add_env
	if(reg->QueryGLExtension("GL_SGIX_texture_add_env") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_add_env
	return false;
}

static bool Load_GL_SGIX_texture_lod_bias(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_lod_bias
	if(reg->QueryGLExtension("GL_SGIX_texture_lod_bias") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_lod_bias
	return false;
}

static bool Load_GL_SGIX_texture_multi_buffer(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_multi_buffer
	if(reg->QueryGLExtension("GL_SGIX_texture_multi_buffer") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_multi_buffer
	return false;
}

static bool Load_GL_SGIX_texture_scale_bias(GLExtensionReg *reg)
{
#ifdef GL_SGIX_texture_scale_bias
	if(reg->QueryGLExtension("GL_SGIX_texture_scale_bias") == 0)
		return false;
	return true;
#endif //GL_SGIX_texture_scale_bias
	return false;
}

static bool Load_GL_SGIX_vertex_preclip(GLExtensionReg *reg)
{
#ifdef GL_SGIX_vertex_preclip
	if(reg->QueryGLExtension("GL_SGIX_vertex_preclip") == 0)
		return false;
	return true;
#endif //GL_SGIX_vertex_preclip
	return false;
}

static bool Load_GL_SGIX_ycrcb(GLExtensionReg *reg)
{
#ifdef GL_SGIX_ycrcb
	if(reg->QueryGLExtension("GL_SGIX_ycrcb") == 0)
		return false;
	return true;
#endif //GL_SGIX_ycrcb
	return false;
}

static bool Load_GL_SGI_color_matrix(GLExtensionReg *reg)
{
#ifdef GL_SGI_color_matrix
	if(reg->QueryGLExtension("GL_SGI_color_matrix") == 0)
		return false;
	return true;
#endif //GL_SGI_color_matrix
	return false;
}

static bool Load_GL_SGI_color_table(GLExtensionReg *reg)
{
#ifdef GL_SGI_color_table
	if(reg->QueryGLExtension("GL_SGI_color_table") == 0)
		return false;
	return true;
#endif //GL_SGI_color_table
	return false;
}

static bool Load_GL_SGI_texture_color_table(GLExtensionReg *reg)
{
#ifdef GL_SGI_texture_color_table
	if(reg->QueryGLExtension("GL_SGI_texture_color_table") == 0)
		return false;
	return true;
#endif //GL_SGI_texture_color_table
	return false;
}

static bool Load_GL_SUNX_constant_data(GLExtensionReg *reg)
{
#ifdef GL_SUNX_constant_data
	if(reg->QueryGLExtension("GL_SUNX_constant_data") == 0)
		return false;
	return true;
#endif //GL_SUNX_constant_data
	return false;
}

static bool Load_GL_SUN_convolution_border_modes(GLExtensionReg *reg)
{
#ifdef GL_SUN_convolution_border_modes
	if(reg->QueryGLExtension("GL_SUN_convolution_border_modes") == 0)
		return false;
	return true;
#endif //GL_SUN_convolution_border_modes
	return false;
}

static bool Load_GL_SUN_global_alpha(GLExtensionReg *reg)
{
#ifdef GL_SUN_global_alpha
	if(reg->QueryGLExtension("GL_SUN_global_alpha") == 0)
		return false;
	return true;
#endif //GL_SUN_global_alpha
	return false;
}

static bool Load_GL_SUN_triangle_list(GLExtensionReg *reg)
{
#ifdef GL_SUN_triangle_list
	if(reg->QueryGLExtension("GL_SUN_triangle_list") == 0)
		return false;
	return true;
#endif //GL_SUN_triangle_list
	return false;
}

static bool Load_GL_SUN_vertex(GLExtensionReg *reg)
{
#ifdef GL_SUN_vertex
	if(reg->QueryGLExtension("GL_SUN_vertex") == 0)
		return false;
	return true;
#endif //GL_SUN_vertex
	return false;
}

static bool Load_GL_VERSION_1_2(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_2
	GET_PROC_ADDRESS(PFNGLBLENDCOLORPROC, glBlendColor);
	GET_PROC_ADDRESS(PFNGLBLENDEQUATIONPROC, glBlendEquation);
	GET_PROC_ADDRESS(PFNGLDRAWRANGEELEMENTSPROC, glDrawRangeElements);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPROC, glColorTable);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERFVPROC, glColorTableParameterfv);
	GET_PROC_ADDRESS(PFNGLCOLORTABLEPARAMETERIVPROC, glColorTableParameteriv);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORTABLEPROC, glCopyColorTable);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPROC, glGetColorTable);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERFVPROC, glGetColorTableParameterfv);
	GET_PROC_ADDRESS(PFNGLGETCOLORTABLEPARAMETERIVPROC, glGetColorTableParameteriv);
	GET_PROC_ADDRESS(PFNGLCOLORSUBTABLEPROC, glColorSubTable);
	GET_PROC_ADDRESS(PFNGLCOPYCOLORSUBTABLEPROC, glCopyColorSubTable);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER1DPROC, glConvolutionFilter1D);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONFILTER2DPROC, glConvolutionFilter2D);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFPROC, glConvolutionParameterf);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERFVPROC, glConvolutionParameterfv);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIPROC, glConvolutionParameteri);
	GET_PROC_ADDRESS(PFNGLCONVOLUTIONPARAMETERIVPROC, glConvolutionParameteriv);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER1DPROC, glCopyConvolutionFilter1D);
	GET_PROC_ADDRESS(PFNGLCOPYCONVOLUTIONFILTER2DPROC, glCopyConvolutionFilter2D);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONFILTERPROC, glGetConvolutionFilter);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERFVPROC, glGetConvolutionParameterfv);
	GET_PROC_ADDRESS(PFNGLGETCONVOLUTIONPARAMETERIVPROC, glGetConvolutionParameteriv);
	GET_PROC_ADDRESS(PFNGLGETSEPARABLEFILTERPROC, glGetSeparableFilter);
	GET_PROC_ADDRESS(PFNGLSEPARABLEFILTER2DPROC, glSeparableFilter2D);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPROC, glGetHistogram);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERFVPROC, glGetHistogramParameterfv);
	GET_PROC_ADDRESS(PFNGLGETHISTOGRAMPARAMETERIVPROC, glGetHistogramParameteriv);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPROC, glGetMinmax);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERFVPROC, glGetMinmaxParameterfv);
	GET_PROC_ADDRESS(PFNGLGETMINMAXPARAMETERIVPROC, glGetMinmaxParameteriv);
	GET_PROC_ADDRESS(PFNGLHISTOGRAMPROC, glHistogram);
	GET_PROC_ADDRESS(PFNGLMINMAXPROC, glMinmax);
	GET_PROC_ADDRESS(PFNGLRESETHISTOGRAMPROC, glResetHistogram);
	GET_PROC_ADDRESS(PFNGLRESETMINMAXPROC, glResetMinmax);
	GET_PROC_ADDRESS(PFNGLTEXIMAGE3DPROC, glTexImage3D);
	GET_PROC_ADDRESS(PFNGLTEXSUBIMAGE3DPROC, glTexSubImage3D);
	GET_PROC_ADDRESS(PFNGLCOPYTEXSUBIMAGE3DPROC, glCopyTexSubImage3D);
	GET_PROC_ADDRESS(PFNGLACTIVETEXTUREPROC, glActiveTexture);
	GET_PROC_ADDRESS(PFNGLCLIENTACTIVETEXTUREPROC, glClientActiveTexture);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DPROC, glMultiTexCoord1d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1DVPROC, glMultiTexCoord1dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FPROC, glMultiTexCoord1f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1FVPROC, glMultiTexCoord1fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IPROC, glMultiTexCoord1i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1IVPROC, glMultiTexCoord1iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SPROC, glMultiTexCoord1s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD1SVPROC, glMultiTexCoord1sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DPROC, glMultiTexCoord2d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2DVPROC, glMultiTexCoord2dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FPROC, glMultiTexCoord2f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2FVPROC, glMultiTexCoord2fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IPROC, glMultiTexCoord2i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2IVPROC, glMultiTexCoord2iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SPROC, glMultiTexCoord2s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD2SVPROC, glMultiTexCoord2sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DPROC, glMultiTexCoord3d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3DVPROC, glMultiTexCoord3dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FPROC, glMultiTexCoord3f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3FVPROC, glMultiTexCoord3fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IPROC, glMultiTexCoord3i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3IVPROC, glMultiTexCoord3iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SPROC, glMultiTexCoord3s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD3SVPROC, glMultiTexCoord3sv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DPROC, glMultiTexCoord4d);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4DVPROC, glMultiTexCoord4dv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FPROC, glMultiTexCoord4f);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4FVPROC, glMultiTexCoord4fv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IPROC, glMultiTexCoord4i);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4IVPROC, glMultiTexCoord4iv);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SPROC, glMultiTexCoord4s);
	GET_PROC_ADDRESS(PFNGLMULTITEXCOORD4SVPROC, glMultiTexCoord4sv);
	return true;
#endif //GL_VERSION_1_2
	return false;
}

static bool Load_GL_VERSION_1_3(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_3
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE3DPROC, glCompressedTexImage3D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE2DPROC, glCompressedTexImage2D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXIMAGE1DPROC, glCompressedTexImage1D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC, glCompressedTexSubImage3D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC, glCompressedTexSubImage2D);
	GET_PROC_ADDRESS(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC, glCompressedTexSubImage1D);
	GET_PROC_ADDRESS(PFNGLGETCOMPRESSEDTEXIMAGEPROC, glGetCompressedTexImage);
	GET_PROC_ADDRESS(PFNGLSAMPLECOVERAGEPROC, glSampleCoverage);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXFPROC, glLoadTransposeMatrixf);
	GET_PROC_ADDRESS(PFNGLLOADTRANSPOSEMATRIXDPROC, glLoadTransposeMatrixd);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXFPROC, glMultTransposeMatrixf);
	GET_PROC_ADDRESS(PFNGLMULTTRANSPOSEMATRIXDPROC, glMultTransposeMatrixd);
	return true;
#endif //GL_VERSION_1_3
	return false;
}

static bool Load_GL_VERSION_1_4(GLExtensionReg *reg)
{
#ifdef GL_VERSION_1_4
	GET_PROC_ADDRESS(PFNGLMULTIDRAWARRAYSPROC, glMultiDrawArrays);
	GET_PROC_ADDRESS(PFNGLMULTIDRAWELEMENTSPROC, glMultiDrawElements);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFPROC, glPointParameterf);
	GET_PROC_ADDRESS(PFNGLPOINTPARAMETERFVPROC, glPointParameterfv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BPROC, glSecondaryColor3b);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3BVPROC, glSecondaryColor3bv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DPROC, glSecondaryColor3d);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3DVPROC, glSecondaryColor3dv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FPROC, glSecondaryColor3f);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3FVPROC, glSecondaryColor3fv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IPROC, glSecondaryColor3i);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3IVPROC, glSecondaryColor3iv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SPROC, glSecondaryColor3s);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3SVPROC, glSecondaryColor3sv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBPROC, glSecondaryColor3ub);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UBVPROC, glSecondaryColor3ubv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIPROC, glSecondaryColor3ui);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3UIVPROC, glSecondaryColor3uiv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USPROC, glSecondaryColor3us);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLOR3USVPROC, glSecondaryColor3usv);
	GET_PROC_ADDRESS(PFNGLSECONDARYCOLORPOINTERPROC, glSecondaryColorPointer);
	GET_PROC_ADDRESS(PFNGLBLENDFUNCSEPARATEPROC, glBlendFuncSeparate);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DPROC, glWindowPos2d);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FPROC, glWindowPos2f);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IPROC, glWindowPos2i);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SPROC, glWindowPos2s);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2DVPROC, glWindowPos2dv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2FVPROC, glWindowPos2fv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2IVPROC, glWindowPos2iv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS2SVPROC, glWindowPos2sv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DPROC, glWindowPos3d);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FPROC, glWindowPos3f);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IPROC, glWindowPos3i);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SPROC, glWindowPos3s);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3DVPROC, glWindowPos3dv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3FVPROC, glWindowPos3fv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3IVPROC, glWindowPos3iv);
	GET_PROC_ADDRESS(PFNGLWINDOWPOS3SVPROC, glWindowPos3sv);
	return true;
#endif //GL_VERSION_1_4
	return false;
}

static bool Load_GL_WIN_phong_shading(GLExtensionReg *reg)
{
#ifdef GL_WIN_phong_shading
	if(reg->QueryGLExtension("GL_WIN_phong_shading") == 0)
		return false;
	return true;
#endif //GL_WIN_phong_shading
	return false;
}

static bool Load_GL_WIN_specular_fog(GLExtensionReg *reg)
{
#ifdef GL_WIN_specular_fog
	if(reg->QueryGLExtension("GL_WIN_specular_fog") == 0)
		return false;
	return true;
#endif //GL_WIN_specular_fog
	return false;
}

#if defined(_WIN32)
#endif //_WIN32

GLExtensionReg::GLExtensionReg()
{
	memset(&mExtensions, 0, sizeof(GLExtGenExtensions));
#if defined(_WIN32)
	mHDC = NULL;
#endif //_WIN32
}

GLExtensionReg::~GLExtensionReg()
{
}

void GLExtensionReg::Init(GLExtGenFunctionPointers *funPtr, GLExtGenExtensions *ext)
{
	char *s = (char*) glGetString(GL_VERSION);

	if (!s)
		return;
	s = strstr(s, "1.");
	if (s != NULL)
	{
		if (s[2] >= '4')
			mExtensions.mGL_VERSION_1_4 = true;
		if (s[2] >= '3')
			mExtensions.mGL_VERSION_1_3 = true;
		if (s[2] >= '2')
			mExtensions.mGL_VERSION_1_2 = true;
	}

	mExtensions.mGL_APPLE_specular_vector = Load_GL_APPLE_specular_vector(this);
	mExtensions.mGL_APPLE_transform_hint = Load_GL_APPLE_transform_hint(this);
	mExtensions.mGL_ARB_depth_texture = Load_GL_ARB_depth_texture(this);
	mExtensions.mGL_ARB_fragment_program = Load_GL_ARB_fragment_program(this);
	mExtensions.mGL_ARB_multisample = Load_GL_ARB_multisample(this);
	mExtensions.mGL_ARB_multitexture = Load_GL_ARB_multitexture(this);
	mExtensions.mGL_ARB_point_parameters = Load_GL_ARB_point_parameters(this);
	mExtensions.mGL_ARB_shadow = Load_GL_ARB_shadow(this);
	mExtensions.mGL_ARB_texture_border_clamp = Load_GL_ARB_texture_border_clamp(this);
	mExtensions.mGL_ARB_texture_compression = Load_GL_ARB_texture_compression(this);
	mExtensions.mGL_ARB_texture_cube_map = Load_GL_ARB_texture_cube_map(this);
	mExtensions.mGL_ARB_texture_env_add = Load_GL_ARB_texture_env_add(this);
	mExtensions.mGL_ARB_texture_env_combine = Load_GL_ARB_texture_env_combine(this);
	mExtensions.mGL_ARB_texture_env_dot3 = Load_GL_ARB_texture_env_dot3(this);
	mExtensions.mGL_ARB_texture_mirrored_repeat = Load_GL_ARB_texture_mirrored_repeat(this);
	mExtensions.mGL_ARB_transpose_matrix = Load_GL_ARB_transpose_matrix(this);
	mExtensions.mGL_ARB_vertex_buffer_object = Load_GL_ARB_vertex_buffer_object(this);
	mExtensions.mGL_ARB_vertex_program = Load_GL_ARB_vertex_program(this);
	mExtensions.mGL_ARB_window_pos = Load_GL_ARB_window_pos(this);
	mExtensions.mGL_EXT_422_pixels = Load_GL_EXT_422_pixels(this);
	mExtensions.mGL_EXT_abgr = Load_GL_EXT_abgr(this);
	mExtensions.mGL_EXT_bgra = Load_GL_EXT_bgra(this);
	mExtensions.mGL_EXT_blend_color = Load_GL_EXT_blend_color(this);
	mExtensions.mGL_EXT_blend_func_separate = Load_GL_EXT_blend_func_separate(this);
	mExtensions.mGL_EXT_blend_logic_op = Load_GL_EXT_blend_logic_op(this);
	mExtensions.mGL_EXT_blend_minmax = Load_GL_EXT_blend_minmax(this);
	mExtensions.mGL_EXT_blend_subtract = Load_GL_EXT_blend_subtract(this);
	mExtensions.mGL_EXT_clip_volume_hint = Load_GL_EXT_clip_volume_hint(this);
	mExtensions.mGL_EXT_cmyka = Load_GL_EXT_cmyka(this);
	mExtensions.mGL_EXT_color_subtable = Load_GL_EXT_color_subtable(this);
	mExtensions.mGL_EXT_compiled_vertex_array = Load_GL_EXT_compiled_vertex_array(this);
	mExtensions.mGL_EXT_convolution = Load_GL_EXT_convolution(this);
	mExtensions.mGL_EXT_coordinate_frame = Load_GL_EXT_coordinate_frame(this);
	mExtensions.mGL_EXT_copy_texture = Load_GL_EXT_copy_texture(this);
	mExtensions.mGL_EXT_cull_vertex = Load_GL_EXT_cull_vertex(this);
	mExtensions.mGL_EXT_draw_range_elements = Load_GL_EXT_draw_range_elements(this);
	mExtensions.mGL_EXT_fog_coord = Load_GL_EXT_fog_coord(this);
	mExtensions.mGL_EXT_histogram = Load_GL_EXT_histogram(this);
	mExtensions.mGL_EXT_index_array_formats = Load_GL_EXT_index_array_formats(this);
	mExtensions.mGL_EXT_index_func = Load_GL_EXT_index_func(this);
	mExtensions.mGL_EXT_index_material = Load_GL_EXT_index_material(this);
	mExtensions.mGL_EXT_index_texture = Load_GL_EXT_index_texture(this);
	mExtensions.mGL_EXT_light_texture = Load_GL_EXT_light_texture(this);
	mExtensions.mGL_EXT_misc_attribute = Load_GL_EXT_misc_attribute(this);
	mExtensions.mGL_EXT_multi_draw_arrays = Load_GL_EXT_multi_draw_arrays(this);
	mExtensions.mGL_EXT_packed_pixels = Load_GL_EXT_packed_pixels(this);
	mExtensions.mGL_EXT_paletted_texture = Load_GL_EXT_paletted_texture(this);
	mExtensions.mGL_EXT_pixel_transform = Load_GL_EXT_pixel_transform(this);
	mExtensions.mGL_EXT_pixel_transform_color_table = Load_GL_EXT_pixel_transform_color_table(this);
	mExtensions.mGL_EXT_point_parameters = Load_GL_EXT_point_parameters(this);
	mExtensions.mGL_EXT_polygon_offset = Load_GL_EXT_polygon_offset(this);
	mExtensions.mGL_EXT_rescale_normal = Load_GL_EXT_rescale_normal(this);
	mExtensions.mGL_EXT_secondary_color = Load_GL_EXT_secondary_color(this);
	mExtensions.mGL_EXT_separate_specular_color = Load_GL_EXT_separate_specular_color(this);
	mExtensions.mGL_EXT_shadow_funcs = Load_GL_EXT_shadow_funcs(this);
	mExtensions.mGL_EXT_shared_texture_palette = Load_GL_EXT_shared_texture_palette(this);
	mExtensions.mGL_EXT_stencil_two_side = Load_GL_EXT_stencil_two_side(this);
	mExtensions.mGL_EXT_stencil_wrap = Load_GL_EXT_stencil_wrap(this);
	mExtensions.mGL_EXT_subtexture = Load_GL_EXT_subtexture(this);
	mExtensions.mGL_EXT_texture = Load_GL_EXT_texture(this);
	mExtensions.mGL_EXT_texture3D = Load_GL_EXT_texture3D(this);
	mExtensions.mGL_EXT_texture_compression_s3tc = Load_GL_EXT_texture_compression_s3tc(this);
	mExtensions.mGL_EXT_texture_cube_map = Load_GL_EXT_texture_cube_map(this);
	mExtensions.mGL_EXT_texture_edge_clamp = Load_GL_EXT_texture_edge_clamp(this);
	mExtensions.mGL_EXT_texture_env_add = Load_GL_EXT_texture_env_add(this);
	mExtensions.mGL_EXT_texture_env_combine = Load_GL_EXT_texture_env_combine(this);
	mExtensions.mGL_EXT_texture_env_dot3 = Load_GL_EXT_texture_env_dot3(this);
	mExtensions.mGL_EXT_texture_filter_anisotropic = Load_GL_EXT_texture_filter_anisotropic(this);
	mExtensions.mGL_EXT_texture_lod_bias = Load_GL_EXT_texture_lod_bias(this);
	mExtensions.mGL_EXT_texture_object = Load_GL_EXT_texture_object(this);
	mExtensions.mGL_EXT_texture_perturb_normal = Load_GL_EXT_texture_perturb_normal(this);
	mExtensions.mGL_EXT_vertex_array = Load_GL_EXT_vertex_array(this);
	mExtensions.mGL_EXT_vertex_weighting = Load_GL_EXT_vertex_weighting(this);
	mExtensions.mGL_HP_convolution_border_modes = Load_GL_HP_convolution_border_modes(this);
	mExtensions.mGL_HP_image_transform = Load_GL_HP_image_transform(this);
	mExtensions.mGL_HP_occlusion_test = Load_GL_HP_occlusion_test(this);
	mExtensions.mGL_HP_texture_lighting = Load_GL_HP_texture_lighting(this);
	mExtensions.mGL_IBM_cull_vertex = Load_GL_IBM_cull_vertex(this);
	mExtensions.mGL_IBM_multimode_draw_arrays = Load_GL_IBM_multimode_draw_arrays(this);
	mExtensions.mGL_IBM_rasterpos_clip = Load_GL_IBM_rasterpos_clip(this);
	mExtensions.mGL_IBM_texture_mirrored_repeat = Load_GL_IBM_texture_mirrored_repeat(this);
	mExtensions.mGL_IBM_vertex_array_lists = Load_GL_IBM_vertex_array_lists(this);
	mExtensions.mGL_INGR_color_clamp = Load_GL_INGR_color_clamp(this);
	mExtensions.mGL_INGR_interlace_read = Load_GL_INGR_interlace_read(this);
	mExtensions.mGL_INGR_palette_buffer = Load_GL_INGR_palette_buffer(this);
	mExtensions.mGL_INTEL_parallel_arrays = Load_GL_INTEL_parallel_arrays(this);
	mExtensions.mGL_INTEL_texture_scissor = Load_GL_INTEL_texture_scissor(this);
	mExtensions.mGL_MESA_resize_buffers = Load_GL_MESA_resize_buffers(this);
	mExtensions.mGL_MESA_window_pos = Load_GL_MESA_window_pos(this);
	mExtensions.mGL_NV_blend_square = Load_GL_NV_blend_square(this);
	mExtensions.mGL_NV_copy_depth_to_color = Load_GL_NV_copy_depth_to_color(this);
	mExtensions.mGL_NV_depth_clamp = Load_GL_NV_depth_clamp(this);
	mExtensions.mGL_NV_element_array = Load_GL_NV_element_array(this);
	mExtensions.mGL_NV_fence = Load_GL_NV_fence(this);
	mExtensions.mGL_NV_float_buffer = Load_GL_NV_float_buffer(this);
	mExtensions.mGL_NV_fog_distance = Load_GL_NV_fog_distance(this);
	mExtensions.mGL_NV_fragment_program = Load_GL_NV_fragment_program(this);
	mExtensions.mGL_NV_half_float = Load_GL_NV_half_float(this);
	mExtensions.mGL_NV_light_max_exponent = Load_GL_NV_light_max_exponent(this);
	mExtensions.mGL_NV_multisample_filter_hint = Load_GL_NV_multisample_filter_hint(this);
	mExtensions.mGL_NV_occlusion_query = Load_GL_NV_occlusion_query(this);
	mExtensions.mGL_NV_packed_depth_stencil = Load_GL_NV_packed_depth_stencil(this);
	mExtensions.mGL_NV_pixel_data_range = Load_GL_NV_pixel_data_range(this);
	mExtensions.mGL_NV_point_sprite = Load_GL_NV_point_sprite(this);
	mExtensions.mGL_NV_primitive_restart = Load_GL_NV_primitive_restart(this);
	mExtensions.mGL_NV_register_combiners = Load_GL_NV_register_combiners(this);
	mExtensions.mGL_NV_register_combiners2 = Load_GL_NV_register_combiners2(this);
	mExtensions.mGL_NV_stencil_two_side = Load_GL_NV_stencil_two_side(this);
	mExtensions.mGL_NV_texgen_emboss = Load_GL_NV_texgen_emboss(this);
	mExtensions.mGL_NV_texgen_reflection = Load_GL_NV_texgen_reflection(this);
	mExtensions.mGL_NV_texture_compression_vtc = Load_GL_NV_texture_compression_vtc(this);
	mExtensions.mGL_NV_texture_env_combine4 = Load_GL_NV_texture_env_combine4(this);
	mExtensions.mGL_NV_texture_rectangle = Load_GL_NV_texture_rectangle(this);
	mExtensions.mGL_NV_texture_shader = Load_GL_NV_texture_shader(this);
	mExtensions.mGL_NV_texture_shader2 = Load_GL_NV_texture_shader2(this);
	mExtensions.mGL_NV_texture_shader3 = Load_GL_NV_texture_shader3(this);
	mExtensions.mGL_NV_vertex_array_range = Load_GL_NV_vertex_array_range(this);
	mExtensions.mGL_NV_vertex_array_range2 = Load_GL_NV_vertex_array_range2(this);
	mExtensions.mGL_NV_vertex_program = Load_GL_NV_vertex_program(this);
	mExtensions.mGL_NV_vertex_program1_1 = Load_GL_NV_vertex_program1_1(this);
	mExtensions.mGL_NV_vertex_program2 = Load_GL_NV_vertex_program2(this);
	mExtensions.mGL_PGI_misc_hints = Load_GL_PGI_misc_hints(this);
	mExtensions.mGL_PGI_vertex_hints = Load_GL_PGI_vertex_hints(this);
	mExtensions.mGL_REND_screen_coordinates = Load_GL_REND_screen_coordinates(this);
	mExtensions.mGL_SGIS_detail_texture = Load_GL_SGIS_detail_texture(this);
	mExtensions.mGL_SGIS_fog_function = Load_GL_SGIS_fog_function(this);
	mExtensions.mGL_SGIS_generate_mipmap = Load_GL_SGIS_generate_mipmap(this);
	mExtensions.mGL_SGIS_multisample = Load_GL_SGIS_multisample(this);
	mExtensions.mGL_SGIS_pixel_texture = Load_GL_SGIS_pixel_texture(this);
	mExtensions.mGL_SGIS_sharpen_texture = Load_GL_SGIS_sharpen_texture(this);
	mExtensions.mGL_SGIS_texture4D = Load_GL_SGIS_texture4D(this);
	mExtensions.mGL_SGIS_texture_border_clamp = Load_GL_SGIS_texture_border_clamp(this);
	mExtensions.mGL_SGIS_texture_color_mask = Load_GL_SGIS_texture_color_mask(this);
	mExtensions.mGL_SGIS_texture_edge_clamp = Load_GL_SGIS_texture_edge_clamp(this);
	mExtensions.mGL_SGIS_texture_filter4 = Load_GL_SGIS_texture_filter4(this);
	mExtensions.mGL_SGIS_texture_lod = Load_GL_SGIS_texture_lod(this);
	mExtensions.mGL_SGIS_texture_select = Load_GL_SGIS_texture_select(this);
	mExtensions.mGL_SGIX_blend_alpha_minmax = Load_GL_SGIX_blend_alpha_minmax(this);
	mExtensions.mGL_SGIX_clipmap = Load_GL_SGIX_clipmap(this);
	mExtensions.mGL_SGIX_depth_texture = Load_GL_SGIX_depth_texture(this);
	mExtensions.mGL_SGIX_flush_raster = Load_GL_SGIX_flush_raster(this);
	mExtensions.mGL_SGIX_fog_offset = Load_GL_SGIX_fog_offset(this);
	mExtensions.mGL_SGIX_framezoom = Load_GL_SGIX_framezoom(this);
	mExtensions.mGL_SGIX_instruments = Load_GL_SGIX_instruments(this);
	mExtensions.mGL_SGIX_interlace = Load_GL_SGIX_interlace(this);
	mExtensions.mGL_SGIX_ir_instrument1 = Load_GL_SGIX_ir_instrument1(this);
	mExtensions.mGL_SGIX_list_priority = Load_GL_SGIX_list_priority(this);
	mExtensions.mGL_SGIX_pixel_texture = Load_GL_SGIX_pixel_texture(this);
	mExtensions.mGL_SGIX_reference_plane = Load_GL_SGIX_reference_plane(this);
	mExtensions.mGL_SGIX_resample = Load_GL_SGIX_resample(this);
	mExtensions.mGL_SGIX_shadow = Load_GL_SGIX_shadow(this);
	mExtensions.mGL_SGIX_shadow_ambient = Load_GL_SGIX_shadow_ambient(this);
	mExtensions.mGL_SGIX_sprite = Load_GL_SGIX_sprite(this);
	mExtensions.mGL_SGIX_tag_sample_buffer = Load_GL_SGIX_tag_sample_buffer(this);
	mExtensions.mGL_SGIX_texture_add_env = Load_GL_SGIX_texture_add_env(this);
	mExtensions.mGL_SGIX_texture_lod_bias = Load_GL_SGIX_texture_lod_bias(this);
	mExtensions.mGL_SGIX_texture_multi_buffer = Load_GL_SGIX_texture_multi_buffer(this);
	mExtensions.mGL_SGIX_texture_scale_bias = Load_GL_SGIX_texture_scale_bias(this);
	mExtensions.mGL_SGIX_vertex_preclip = Load_GL_SGIX_vertex_preclip(this);
	mExtensions.mGL_SGIX_ycrcb = Load_GL_SGIX_ycrcb(this);
	mExtensions.mGL_SGI_color_matrix = Load_GL_SGI_color_matrix(this);
	mExtensions.mGL_SGI_color_table = Load_GL_SGI_color_table(this);
	mExtensions.mGL_SGI_texture_color_table = Load_GL_SGI_texture_color_table(this);
	mExtensions.mGL_SUNX_constant_data = Load_GL_SUNX_constant_data(this);
	mExtensions.mGL_SUN_convolution_border_modes = Load_GL_SUN_convolution_border_modes(this);
	mExtensions.mGL_SUN_global_alpha = Load_GL_SUN_global_alpha(this);
	mExtensions.mGL_SUN_triangle_list = Load_GL_SUN_triangle_list(this);
	mExtensions.mGL_SUN_vertex = Load_GL_SUN_vertex(this);
	if (mExtensions.mGL_VERSION_1_2) Load_GL_VERSION_1_2(this);
	if (mExtensions.mGL_VERSION_1_3) Load_GL_VERSION_1_3(this);
	if (mExtensions.mGL_VERSION_1_4) Load_GL_VERSION_1_4(this);
	mExtensions.mGL_WIN_phong_shading = Load_GL_WIN_phong_shading(this);
	mExtensions.mGL_WIN_specular_fog = Load_GL_WIN_specular_fog(this);
#if defined(_WIN32)
    wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) GetProcedure("wglGetExtensionsStringARB");
    wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) GetProcedure("wglGetExtensionsStringEXT");
    mExtensions.mWGL_ARB_extensions_string = wglGetExtensionsStringARB != NULL;
    mExtensions.mWGL_EXT_extensions_string = wglGetExtensionsStringEXT != NULL;

#endif //_WIN32

	if (ext)
		memcpy(ext, &mExtensions, sizeof(GLExtGenExtensions));

	if (funPtr)
	{
#ifdef GL_ARB_multisample
		funPtr->glSampleCoverageARB = glSampleCoverageARB;
#endif //GL_ARB_multisample

#ifdef GL_ARB_multitexture
		funPtr->glActiveTextureARB = glActiveTextureARB;
		funPtr->glClientActiveTextureARB = glClientActiveTextureARB;
		funPtr->glMultiTexCoord1dARB = glMultiTexCoord1dARB;
		funPtr->glMultiTexCoord1dvARB = glMultiTexCoord1dvARB;
		funPtr->glMultiTexCoord1fARB = glMultiTexCoord1fARB;
		funPtr->glMultiTexCoord1fvARB = glMultiTexCoord1fvARB;
		funPtr->glMultiTexCoord1iARB = glMultiTexCoord1iARB;
		funPtr->glMultiTexCoord1ivARB = glMultiTexCoord1ivARB;
		funPtr->glMultiTexCoord1sARB = glMultiTexCoord1sARB;
		funPtr->glMultiTexCoord1svARB = glMultiTexCoord1svARB;
		funPtr->glMultiTexCoord2dARB = glMultiTexCoord2dARB;
		funPtr->glMultiTexCoord2dvARB = glMultiTexCoord2dvARB;
		funPtr->glMultiTexCoord2fARB = glMultiTexCoord2fARB;
		funPtr->glMultiTexCoord2fvARB = glMultiTexCoord2fvARB;
		funPtr->glMultiTexCoord2iARB = glMultiTexCoord2iARB;
		funPtr->glMultiTexCoord2ivARB = glMultiTexCoord2ivARB;
		funPtr->glMultiTexCoord2sARB = glMultiTexCoord2sARB;
		funPtr->glMultiTexCoord2svARB = glMultiTexCoord2svARB;
		funPtr->glMultiTexCoord3dARB = glMultiTexCoord3dARB;
		funPtr->glMultiTexCoord3dvARB = glMultiTexCoord3dvARB;
		funPtr->glMultiTexCoord3fARB = glMultiTexCoord3fARB;
		funPtr->glMultiTexCoord3fvARB = glMultiTexCoord3fvARB;
		funPtr->glMultiTexCoord3iARB = glMultiTexCoord3iARB;
		funPtr->glMultiTexCoord3ivARB = glMultiTexCoord3ivARB;
		funPtr->glMultiTexCoord3sARB = glMultiTexCoord3sARB;
		funPtr->glMultiTexCoord3svARB = glMultiTexCoord3svARB;
		funPtr->glMultiTexCoord4dARB = glMultiTexCoord4dARB;
		funPtr->glMultiTexCoord4dvARB = glMultiTexCoord4dvARB;
		funPtr->glMultiTexCoord4fARB = glMultiTexCoord4fARB;
		funPtr->glMultiTexCoord4fvARB = glMultiTexCoord4fvARB;
		funPtr->glMultiTexCoord4iARB = glMultiTexCoord4iARB;
		funPtr->glMultiTexCoord4ivARB = glMultiTexCoord4ivARB;
		funPtr->glMultiTexCoord4sARB = glMultiTexCoord4sARB;
		funPtr->glMultiTexCoord4svARB = glMultiTexCoord4svARB;
#endif //GL_ARB_multitexture

#ifdef GL_ARB_point_parameters
		funPtr->glPointParameterfARB = glPointParameterfARB;
		funPtr->glPointParameterfvARB = glPointParameterfvARB;
#endif //GL_ARB_point_parameters

#ifdef GL_ARB_texture_compression
		funPtr->glCompressedTexImage3DARB = glCompressedTexImage3DARB;
		funPtr->glCompressedTexImage2DARB = glCompressedTexImage2DARB;
		funPtr->glCompressedTexImage1DARB = glCompressedTexImage1DARB;
		funPtr->glCompressedTexSubImage3DARB = glCompressedTexSubImage3DARB;
		funPtr->glCompressedTexSubImage2DARB = glCompressedTexSubImage2DARB;
		funPtr->glCompressedTexSubImage1DARB = glCompressedTexSubImage1DARB;
		funPtr->glGetCompressedTexImageARB = glGetCompressedTexImageARB;
#endif //GL_ARB_texture_compression

#ifdef GL_ARB_transpose_matrix
		funPtr->glLoadTransposeMatrixfARB = glLoadTransposeMatrixfARB;
		funPtr->glLoadTransposeMatrixdARB = glLoadTransposeMatrixdARB;
		funPtr->glMultTransposeMatrixfARB = glMultTransposeMatrixfARB;
		funPtr->glMultTransposeMatrixdARB = glMultTransposeMatrixdARB;
#endif //GL_ARB_transpose_matrix

#ifdef GL_ARB_vertex_buffer_object
		funPtr->glBindBufferARB = glBindBufferARB;
		funPtr->glDeleteBuffersARB = glDeleteBuffersARB;
		funPtr->glGenBuffersARB = glGenBuffersARB;
		funPtr->glIsBufferARB = glIsBufferARB;
		funPtr->glBufferDataARB = glBufferDataARB;
		funPtr->glBufferSubDataARB = glBufferSubDataARB;
		funPtr->glGetBufferSubDataARB = glGetBufferSubDataARB;
		funPtr->glMapBufferARB = glMapBufferARB;
		funPtr->glUnmapBufferARB = glUnmapBufferARB;
		funPtr->glGetBufferParameterivARB = glGetBufferParameterivARB;
		funPtr->glGetBufferPointervARB = glGetBufferPointervARB;
#endif //GL_ARB_vertex_buffer_object

#ifdef GL_ARB_vertex_program
		funPtr->glVertexAttrib1sARB = glVertexAttrib1sARB;
		funPtr->glVertexAttrib1fARB = glVertexAttrib1fARB;
		funPtr->glVertexAttrib1dARB = glVertexAttrib1dARB;
		funPtr->glVertexAttrib2sARB = glVertexAttrib2sARB;
		funPtr->glVertexAttrib2fARB = glVertexAttrib2fARB;
		funPtr->glVertexAttrib2dARB = glVertexAttrib2dARB;
		funPtr->glVertexAttrib3sARB = glVertexAttrib3sARB;
		funPtr->glVertexAttrib3fARB = glVertexAttrib3fARB;
		funPtr->glVertexAttrib3dARB = glVertexAttrib3dARB;
		funPtr->glVertexAttrib4sARB = glVertexAttrib4sARB;
		funPtr->glVertexAttrib4fARB = glVertexAttrib4fARB;
		funPtr->glVertexAttrib4dARB = glVertexAttrib4dARB;
		funPtr->glVertexAttrib4NubARB = glVertexAttrib4NubARB;
		funPtr->glVertexAttrib1svARB = glVertexAttrib1svARB;
		funPtr->glVertexAttrib1fvARB = glVertexAttrib1fvARB;
		funPtr->glVertexAttrib1dvARB = glVertexAttrib1dvARB;
		funPtr->glVertexAttrib2svARB = glVertexAttrib2svARB;
		funPtr->glVertexAttrib2fvARB = glVertexAttrib2fvARB;
		funPtr->glVertexAttrib2dvARB = glVertexAttrib2dvARB;
		funPtr->glVertexAttrib3svARB = glVertexAttrib3svARB;
		funPtr->glVertexAttrib3fvARB = glVertexAttrib3fvARB;
		funPtr->glVertexAttrib3dvARB = glVertexAttrib3dvARB;
		funPtr->glVertexAttrib4bvARB = glVertexAttrib4bvARB;
		funPtr->glVertexAttrib4svARB = glVertexAttrib4svARB;
		funPtr->glVertexAttrib4ivARB = glVertexAttrib4ivARB;
		funPtr->glVertexAttrib4ubvARB = glVertexAttrib4ubvARB;
		funPtr->glVertexAttrib4usvARB = glVertexAttrib4usvARB;
		funPtr->glVertexAttrib4uivARB = glVertexAttrib4uivARB;
		funPtr->glVertexAttrib4fvARB = glVertexAttrib4fvARB;
		funPtr->glVertexAttrib4dvARB = glVertexAttrib4dvARB;
		funPtr->glVertexAttrib4NbvARB = glVertexAttrib4NbvARB;
		funPtr->glVertexAttrib4NsvARB = glVertexAttrib4NsvARB;
		funPtr->glVertexAttrib4NivARB = glVertexAttrib4NivARB;
		funPtr->glVertexAttrib4NubvARB = glVertexAttrib4NubvARB;
		funPtr->glVertexAttrib4NusvARB = glVertexAttrib4NusvARB;
		funPtr->glVertexAttrib4NuivARB = glVertexAttrib4NuivARB;
		funPtr->glVertexAttribPointerARB = glVertexAttribPointerARB;
		funPtr->glEnableVertexAttribArrayARB = glEnableVertexAttribArrayARB;
		funPtr->glDisableVertexAttribArrayARB = glDisableVertexAttribArrayARB;
		funPtr->glProgramStringARB = glProgramStringARB;
		funPtr->glBindProgramARB = glBindProgramARB;
		funPtr->glDeleteProgramsARB = glDeleteProgramsARB;
		funPtr->glGenProgramsARB = glGenProgramsARB;
		funPtr->glProgramEnvParameter4dARB = glProgramEnvParameter4dARB;
		funPtr->glProgramEnvParameter4dvARB = glProgramEnvParameter4dvARB;
		funPtr->glProgramEnvParameter4fARB = glProgramEnvParameter4fARB;
		funPtr->glProgramEnvParameter4fvARB = glProgramEnvParameter4fvARB;
		funPtr->glProgramLocalParameter4dARB = glProgramLocalParameter4dARB;
		funPtr->glProgramLocalParameter4dvARB = glProgramLocalParameter4dvARB;
		funPtr->glProgramLocalParameter4fARB = glProgramLocalParameter4fARB;
		funPtr->glProgramLocalParameter4fvARB = glProgramLocalParameter4fvARB;
		funPtr->glGetProgramEnvParameterdvARB = glGetProgramEnvParameterdvARB;
		funPtr->glGetProgramEnvParameterfvARB = glGetProgramEnvParameterfvARB;
		funPtr->glGetProgramLocalParameterdvARB = glGetProgramLocalParameterdvARB;
		funPtr->glGetProgramLocalParameterfvARB = glGetProgramLocalParameterfvARB;
		funPtr->glGetProgramivARB = glGetProgramivARB;
		funPtr->glGetProgramStringARB = glGetProgramStringARB;
		funPtr->glGetVertexAttribdvARB = glGetVertexAttribdvARB;
		funPtr->glGetVertexAttribfvARB = glGetVertexAttribfvARB;
		funPtr->glGetVertexAttribivARB = glGetVertexAttribivARB;
		funPtr->glGetVertexAttribPointervARB = glGetVertexAttribPointervARB;
		funPtr->glIsProgramARB = glIsProgramARB;
#endif //GL_ARB_vertex_program

#ifdef GL_ARB_window_pos
		funPtr->glWindowPos2dARB = glWindowPos2dARB;
		funPtr->glWindowPos2fARB = glWindowPos2fARB;
		funPtr->glWindowPos2iARB = glWindowPos2iARB;
		funPtr->glWindowPos2sARB = glWindowPos2sARB;
		funPtr->glWindowPos2dvARB = glWindowPos2dvARB;
		funPtr->glWindowPos2fvARB = glWindowPos2fvARB;
		funPtr->glWindowPos2ivARB = glWindowPos2ivARB;
		funPtr->glWindowPos2svARB = glWindowPos2svARB;
		funPtr->glWindowPos3dARB = glWindowPos3dARB;
		funPtr->glWindowPos3fARB = glWindowPos3fARB;
		funPtr->glWindowPos3iARB = glWindowPos3iARB;
		funPtr->glWindowPos3sARB = glWindowPos3sARB;
		funPtr->glWindowPos3dvARB = glWindowPos3dvARB;
		funPtr->glWindowPos3fvARB = glWindowPos3fvARB;
		funPtr->glWindowPos3ivARB = glWindowPos3ivARB;
		funPtr->glWindowPos3svARB = glWindowPos3svARB;
#endif //GL_ARB_window_pos

#ifdef GL_EXT_blend_color
		funPtr->glBlendColorEXT = glBlendColorEXT;
#endif //GL_EXT_blend_color

#ifdef GL_EXT_blend_func_separate
		funPtr->glBlendFuncSeparateEXT = glBlendFuncSeparateEXT;
#endif //GL_EXT_blend_func_separate

#ifdef GL_EXT_blend_minmax
		funPtr->glBlendEquationEXT = glBlendEquationEXT;
#endif //GL_EXT_blend_minmax

#ifdef GL_EXT_compiled_vertex_array
		funPtr->glLockArraysEXT = glLockArraysEXT;
		funPtr->glUnlockArraysEXT = glUnlockArraysEXT;
#endif //GL_EXT_compiled_vertex_array

#ifdef GL_EXT_draw_range_elements
		funPtr->glDrawRangeElementsEXT = glDrawRangeElementsEXT;
#endif //GL_EXT_draw_range_elements

#ifdef GL_EXT_fog_coord
		funPtr->glFogCoordfEXT = glFogCoordfEXT;
		funPtr->glFogCoordfvEXT = glFogCoordfvEXT;
		funPtr->glFogCoorddEXT = glFogCoorddEXT;
		funPtr->glFogCoorddvEXT = glFogCoorddvEXT;
		funPtr->glFogCoordPointerEXT = glFogCoordPointerEXT;
#endif //GL_EXT_fog_coord

#ifdef GL_EXT_multi_draw_arrays
		funPtr->glMultiDrawArraysEXT = glMultiDrawArraysEXT;
		funPtr->glMultiDrawElementsEXT = glMultiDrawElementsEXT;
#endif //GL_EXT_multi_draw_arrays

#ifdef GL_EXT_paletted_texture
		funPtr->glColorTableEXT = glColorTableEXT;
		funPtr->glColorSubTableEXT = glColorSubTableEXT;
		funPtr->glGetColorTableEXT = glGetColorTableEXT;
		funPtr->glGetColorTableParameterivEXT = glGetColorTableParameterivEXT;
		funPtr->glGetColorTableParameterfvEXT = glGetColorTableParameterfvEXT;
#endif //GL_EXT_paletted_texture

#ifdef GL_EXT_point_parameters
		funPtr->glPointParameterfEXT = glPointParameterfEXT;
		funPtr->glPointParameterfvEXT = glPointParameterfvEXT;
		funPtr->glPointParameterfSGIS = glPointParameterfSGIS;
		funPtr->glPointParameterfvSGIS = glPointParameterfvSGIS;
#endif //GL_EXT_point_parameters

#ifdef GL_EXT_secondary_color
		funPtr->glSecondaryColor3bEXT = glSecondaryColor3bEXT;
		funPtr->glSecondaryColor3bvEXT = glSecondaryColor3bvEXT;
		funPtr->glSecondaryColor3dEXT = glSecondaryColor3dEXT;
		funPtr->glSecondaryColor3dvEXT = glSecondaryColor3dvEXT;
		funPtr->glSecondaryColor3fEXT = glSecondaryColor3fEXT;
		funPtr->glSecondaryColor3fvEXT = glSecondaryColor3fvEXT;
		funPtr->glSecondaryColor3iEXT = glSecondaryColor3iEXT;
		funPtr->glSecondaryColor3ivEXT = glSecondaryColor3ivEXT;
		funPtr->glSecondaryColor3sEXT = glSecondaryColor3sEXT;
		funPtr->glSecondaryColor3svEXT = glSecondaryColor3svEXT;
		funPtr->glSecondaryColor3ubEXT = glSecondaryColor3ubEXT;
		funPtr->glSecondaryColor3ubvEXT = glSecondaryColor3ubvEXT;
		funPtr->glSecondaryColor3uiEXT = glSecondaryColor3uiEXT;
		funPtr->glSecondaryColor3uivEXT = glSecondaryColor3uivEXT;
		funPtr->glSecondaryColor3usEXT = glSecondaryColor3usEXT;
		funPtr->glSecondaryColor3usvEXT = glSecondaryColor3usvEXT;
		funPtr->glSecondaryColorPointerEXT = glSecondaryColorPointerEXT;
#endif //GL_EXT_secondary_color

#ifdef GL_EXT_stencil_two_side
		funPtr->glActiveStencilFaceEXT = glActiveStencilFaceEXT;
#endif //GL_EXT_stencil_two_side

#ifdef GL_EXT_texture3D
		funPtr->glTexImage3DEXT = glTexImage3DEXT;
		funPtr->glTexSubImage3DEXT = glTexSubImage3DEXT;
#endif //GL_EXT_texture3D

#ifdef GL_EXT_texture_object
		funPtr->glAreTexturesResidentEXT = glAreTexturesResidentEXT;
		funPtr->glBindTextureEXT = glBindTextureEXT;
		funPtr->glDeleteTexturesEXT = glDeleteTexturesEXT;
		funPtr->glGenTexturesEXT = glGenTexturesEXT;
		funPtr->glIsTextureEXT = glIsTextureEXT;
		funPtr->glPrioritizeTexturesEXT = glPrioritizeTexturesEXT;
#endif //GL_EXT_texture_object

#ifdef GL_EXT_vertex_array
		funPtr->glArrayElementEXT = glArrayElementEXT;
		funPtr->glColorPointerEXT = glColorPointerEXT;
		funPtr->glDrawArraysEXT = glDrawArraysEXT;
		funPtr->glEdgeFlagPointerEXT = glEdgeFlagPointerEXT;
		funPtr->glGetPointervEXT = glGetPointervEXT;
		funPtr->glIndexPointerEXT = glIndexPointerEXT;
		funPtr->glNormalPointerEXT = glNormalPointerEXT;
		funPtr->glTexCoordPointerEXT = glTexCoordPointerEXT;
		funPtr->glVertexPointerEXT = glVertexPointerEXT;
#endif //GL_EXT_vertex_array

#ifdef GL_EXT_vertex_weighting
		funPtr->glVertexWeightfEXT = glVertexWeightfEXT;
		funPtr->glVertexWeightfvEXT = glVertexWeightfvEXT;
		funPtr->glVertexWeightPointerEXT = glVertexWeightPointerEXT;
#endif //GL_EXT_vertex_weighting

#ifdef GL_NV_element_array
		funPtr->glElementPointerNV = glElementPointerNV;
		funPtr->glDrawElementArrayNV = glDrawElementArrayNV;
		funPtr->glDrawRangeElementArrayNV = glDrawRangeElementArrayNV;
		funPtr->glMultiDrawElementArrayNV = glMultiDrawElementArrayNV;
		funPtr->glMultiDrawRangeElementArrayNV = glMultiDrawRangeElementArrayNV;
#endif //GL_NV_element_array

#ifdef GL_NV_fence
		funPtr->glDeleteFencesNV = glDeleteFencesNV;
		funPtr->glGenFencesNV = glGenFencesNV;
		funPtr->glIsFenceNV = glIsFenceNV;
		funPtr->glTestFenceNV = glTestFenceNV;
		funPtr->glGetFenceivNV = glGetFenceivNV;
		funPtr->glFinishFenceNV = glFinishFenceNV;
		funPtr->glSetFenceNV = glSetFenceNV;
#endif //GL_NV_fence

#ifdef GL_NV_fragment_program
		funPtr->glProgramNamedParameter4fNV = glProgramNamedParameter4fNV;
		funPtr->glProgramNamedParameter4dNV = glProgramNamedParameter4dNV;
		funPtr->glProgramNamedParameter4fvNV = glProgramNamedParameter4fvNV;
		funPtr->glProgramNamedParameter4dvNV = glProgramNamedParameter4dvNV;
		funPtr->glGetProgramNamedParameterfvNV = glGetProgramNamedParameterfvNV;
		funPtr->glGetProgramNamedParameterdvNV = glGetProgramNamedParameterdvNV;
#endif //GL_NV_fragment_program

#ifdef GL_NV_half_float
		funPtr->glVertex2hNV = glVertex2hNV;
		funPtr->glVertex2hvNV = glVertex2hvNV;
		funPtr->glVertex3hNV = glVertex3hNV;
		funPtr->glVertex3hvNV = glVertex3hvNV;
		funPtr->glVertex4hNV = glVertex4hNV;
		funPtr->glVertex4hvNV = glVertex4hvNV;
		funPtr->glNormal3hNV = glNormal3hNV;
		funPtr->glNormal3hvNV = glNormal3hvNV;
		funPtr->glColor3hNV = glColor3hNV;
		funPtr->glColor3hvNV = glColor3hvNV;
		funPtr->glColor4hNV = glColor4hNV;
		funPtr->glColor4hvNV = glColor4hvNV;
		funPtr->glTexCoord1hNV = glTexCoord1hNV;
		funPtr->glTexCoord1hvNV = glTexCoord1hvNV;
		funPtr->glTexCoord2hNV = glTexCoord2hNV;
		funPtr->glTexCoord2hvNV = glTexCoord2hvNV;
		funPtr->glTexCoord3hNV = glTexCoord3hNV;
		funPtr->glTexCoord3hvNV = glTexCoord3hvNV;
		funPtr->glTexCoord4hNV = glTexCoord4hNV;
		funPtr->glTexCoord4hvNV = glTexCoord4hvNV;
		funPtr->glMultiTexCoord1hNV = glMultiTexCoord1hNV;
		funPtr->glMultiTexCoord1hvNV = glMultiTexCoord1hvNV;
		funPtr->glMultiTexCoord2hNV = glMultiTexCoord2hNV;
		funPtr->glMultiTexCoord2hvNV = glMultiTexCoord2hvNV;
		funPtr->glMultiTexCoord3hNV = glMultiTexCoord3hNV;
		funPtr->glMultiTexCoord3hvNV = glMultiTexCoord3hvNV;
		funPtr->glMultiTexCoord4hNV = glMultiTexCoord4hNV;
		funPtr->glMultiTexCoord4hvNV = glMultiTexCoord4hvNV;
		funPtr->glFogCoordhNV = glFogCoordhNV;
		funPtr->glFogCoordhvNV = glFogCoordhvNV;
		funPtr->glSecondaryColor3hNV = glSecondaryColor3hNV;
		funPtr->glSecondaryColor3hvNV = glSecondaryColor3hvNV;
		funPtr->glVertexWeighthNV = glVertexWeighthNV;
		funPtr->glVertexWeighthvNV = glVertexWeighthvNV;
		funPtr->glVertexAttrib1hNV = glVertexAttrib1hNV;
		funPtr->glVertexAttrib1hvNV = glVertexAttrib1hvNV;
		funPtr->glVertexAttrib2hNV = glVertexAttrib2hNV;
		funPtr->glVertexAttrib2hvNV = glVertexAttrib2hvNV;
		funPtr->glVertexAttrib3hNV = glVertexAttrib3hNV;
		funPtr->glVertexAttrib3hvNV = glVertexAttrib3hvNV;
		funPtr->glVertexAttrib4hNV = glVertexAttrib4hNV;
		funPtr->glVertexAttrib4hvNV = glVertexAttrib4hvNV;
		funPtr->glVertexAttribs1hvNV = glVertexAttribs1hvNV;
		funPtr->glVertexAttribs2hvNV = glVertexAttribs2hvNV;
		funPtr->glVertexAttribs3hvNV = glVertexAttribs3hvNV;
		funPtr->glVertexAttribs4hvNV = glVertexAttribs4hvNV;
#endif //GL_NV_half_float

#ifdef GL_NV_occlusion_query
		funPtr->glGenOcclusionQueriesNV = glGenOcclusionQueriesNV;
		funPtr->glDeleteOcclusionQueriesNV = glDeleteOcclusionQueriesNV;
		funPtr->glIsOcclusionQueryNV = glIsOcclusionQueryNV;
		funPtr->glBeginOcclusionQueryNV = glBeginOcclusionQueryNV;
		funPtr->glEndOcclusionQueryNV = glEndOcclusionQueryNV;
		funPtr->glGetOcclusionQueryivNV = glGetOcclusionQueryivNV;
		funPtr->glGetOcclusionQueryuivNV = glGetOcclusionQueryuivNV;
#endif //GL_NV_occlusion_query

#ifdef GL_NV_pixel_data_range
		funPtr->glPixelDataRangeNV = glPixelDataRangeNV;
		funPtr->glFlushPixelDataRangeNV = glFlushPixelDataRangeNV;
#endif //GL_NV_pixel_data_range

#ifdef GL_NV_point_sprite
		funPtr->glPointParameteriNV = glPointParameteriNV;
		funPtr->glPointParameterivNV = glPointParameterivNV;
#endif //GL_NV_point_sprite

#ifdef GL_NV_primitive_restart
		funPtr->glPrimitiveRestartNV = glPrimitiveRestartNV;
		funPtr->glPrimitiveRestartIndexNV = glPrimitiveRestartIndexNV;
#endif //GL_NV_primitive_restart

#ifdef GL_NV_register_combiners
		funPtr->glCombinerParameterfvNV = glCombinerParameterfvNV;
		funPtr->glCombinerParameterfNV = glCombinerParameterfNV;
		funPtr->glCombinerParameterivNV = glCombinerParameterivNV;
		funPtr->glCombinerParameteriNV = glCombinerParameteriNV;
		funPtr->glCombinerInputNV = glCombinerInputNV;
		funPtr->glCombinerOutputNV = glCombinerOutputNV;
		funPtr->glFinalCombinerInputNV = glFinalCombinerInputNV;
		funPtr->glGetCombinerInputParameterfvNV = glGetCombinerInputParameterfvNV;
		funPtr->glGetCombinerInputParameterivNV = glGetCombinerInputParameterivNV;
		funPtr->glGetCombinerOutputParameterfvNV = glGetCombinerOutputParameterfvNV;
		funPtr->glGetCombinerOutputParameterivNV = glGetCombinerOutputParameterivNV;
		funPtr->glGetFinalCombinerInputParameterfvNV = glGetFinalCombinerInputParameterfvNV;
		funPtr->glGetFinalCombinerInputParameterivNV = glGetFinalCombinerInputParameterivNV;
#endif //GL_NV_register_combiners

#ifdef GL_NV_register_combiners2
		funPtr->glCombinerStageParameterfvNV = glCombinerStageParameterfvNV;
		funPtr->glGetCombinerStageParameterfvNV = glGetCombinerStageParameterfvNV;
#endif //GL_NV_register_combiners2

#ifdef GL_NV_stencil_two_side
		funPtr->glActiveStencilFaceNV = glActiveStencilFaceNV;
#endif //GL_NV_stencil_two_side

#ifdef GL_NV_vertex_array_range
		funPtr->glFlushVertexArrayRangeNV = glFlushVertexArrayRangeNV;
		funPtr->glVertexArrayRangeNV = glVertexArrayRangeNV;
#endif //GL_NV_vertex_array_range

#ifdef GL_NV_vertex_program
		funPtr->glBindProgramNV = glBindProgramNV;
		funPtr->glDeleteProgramsNV = glDeleteProgramsNV;
		funPtr->glExecuteProgramNV = glExecuteProgramNV;
		funPtr->glGenProgramsNV = glGenProgramsNV;
		funPtr->glAreProgramsResidentNV = glAreProgramsResidentNV;
		funPtr->glRequestResidentProgramsNV = glRequestResidentProgramsNV;
		funPtr->glGetProgramParameterfvNV = glGetProgramParameterfvNV;
		funPtr->glGetProgramParameterdvNV = glGetProgramParameterdvNV;
		funPtr->glGetProgramivNV = glGetProgramivNV;
		funPtr->glGetProgramStringNV = glGetProgramStringNV;
		funPtr->glGetTrackMatrixivNV = glGetTrackMatrixivNV;
		funPtr->glGetVertexAttribdvNV = glGetVertexAttribdvNV;
		funPtr->glGetVertexAttribfvNV = glGetVertexAttribfvNV;
		funPtr->glGetVertexAttribivNV = glGetVertexAttribivNV;
		funPtr->glGetVertexAttribPointervNV = glGetVertexAttribPointervNV;
		funPtr->glIsProgramNV = glIsProgramNV;
		funPtr->glLoadProgramNV = glLoadProgramNV;
		funPtr->glProgramParameter4fNV = glProgramParameter4fNV;
		funPtr->glProgramParameter4dNV = glProgramParameter4dNV;
		funPtr->glProgramParameter4dvNV = glProgramParameter4dvNV;
		funPtr->glProgramParameter4fvNV = glProgramParameter4fvNV;
		funPtr->glProgramParameters4dvNV = glProgramParameters4dvNV;
		funPtr->glProgramParameters4fvNV = glProgramParameters4fvNV;
		funPtr->glTrackMatrixNV = glTrackMatrixNV;
		funPtr->glVertexAttribPointerNV = glVertexAttribPointerNV;
		funPtr->glVertexAttrib1sNV = glVertexAttrib1sNV;
		funPtr->glVertexAttrib1fNV = glVertexAttrib1fNV;
		funPtr->glVertexAttrib1dNV = glVertexAttrib1dNV;
		funPtr->glVertexAttrib2sNV = glVertexAttrib2sNV;
		funPtr->glVertexAttrib2fNV = glVertexAttrib2fNV;
		funPtr->glVertexAttrib2dNV = glVertexAttrib2dNV;
		funPtr->glVertexAttrib3sNV = glVertexAttrib3sNV;
		funPtr->glVertexAttrib3fNV = glVertexAttrib3fNV;
		funPtr->glVertexAttrib3dNV = glVertexAttrib3dNV;
		funPtr->glVertexAttrib4sNV = glVertexAttrib4sNV;
		funPtr->glVertexAttrib4fNV = glVertexAttrib4fNV;
		funPtr->glVertexAttrib4dNV = glVertexAttrib4dNV;
		funPtr->glVertexAttrib4ubNV = glVertexAttrib4ubNV;
		funPtr->glVertexAttrib1svNV = glVertexAttrib1svNV;
		funPtr->glVertexAttrib1fvNV = glVertexAttrib1fvNV;
		funPtr->glVertexAttrib1dvNV = glVertexAttrib1dvNV;
		funPtr->glVertexAttrib2svNV = glVertexAttrib2svNV;
		funPtr->glVertexAttrib2fvNV = glVertexAttrib2fvNV;
		funPtr->glVertexAttrib2dvNV = glVertexAttrib2dvNV;
		funPtr->glVertexAttrib3svNV = glVertexAttrib3svNV;
		funPtr->glVertexAttrib3fvNV = glVertexAttrib3fvNV;
		funPtr->glVertexAttrib3dvNV = glVertexAttrib3dvNV;
		funPtr->glVertexAttrib4svNV = glVertexAttrib4svNV;
		funPtr->glVertexAttrib4fvNV = glVertexAttrib4fvNV;
		funPtr->glVertexAttrib4dvNV = glVertexAttrib4dvNV;
		funPtr->glVertexAttrib4ubvNV = glVertexAttrib4ubvNV;
		funPtr->glVertexAttribs1svNV = glVertexAttribs1svNV;
		funPtr->glVertexAttribs1fvNV = glVertexAttribs1fvNV;
		funPtr->glVertexAttribs1dvNV = glVertexAttribs1dvNV;
		funPtr->glVertexAttribs2svNV = glVertexAttribs2svNV;
		funPtr->glVertexAttribs2fvNV = glVertexAttribs2fvNV;
		funPtr->glVertexAttribs2dvNV = glVertexAttribs2dvNV;
		funPtr->glVertexAttribs3svNV = glVertexAttribs3svNV;
		funPtr->glVertexAttribs3fvNV = glVertexAttribs3fvNV;
		funPtr->glVertexAttribs3dvNV = glVertexAttribs3dvNV;
		funPtr->glVertexAttribs4svNV = glVertexAttribs4svNV;
		funPtr->glVertexAttribs4fvNV = glVertexAttribs4fvNV;
		funPtr->glVertexAttribs4dvNV = glVertexAttribs4dvNV;
		funPtr->glVertexAttribs4ubvNV = glVertexAttribs4ubvNV;
#endif //GL_NV_vertex_program

#ifdef GL_VERSION_1_2
		funPtr->glBlendColor = glBlendColor;
		funPtr->glBlendEquation = glBlendEquation;
		funPtr->glDrawRangeElements = glDrawRangeElements;
		funPtr->glColorTable = glColorTable;
		funPtr->glColorTableParameterfv = glColorTableParameterfv;
		funPtr->glColorTableParameteriv = glColorTableParameteriv;
		funPtr->glCopyColorTable = glCopyColorTable;
		funPtr->glGetColorTable = glGetColorTable;
		funPtr->glGetColorTableParameterfv = glGetColorTableParameterfv;
		funPtr->glGetColorTableParameteriv = glGetColorTableParameteriv;
		funPtr->glColorSubTable = glColorSubTable;
		funPtr->glCopyColorSubTable = glCopyColorSubTable;
		funPtr->glConvolutionFilter1D = glConvolutionFilter1D;
		funPtr->glConvolutionFilter2D = glConvolutionFilter2D;
		funPtr->glConvolutionParameterf = glConvolutionParameterf;
		funPtr->glConvolutionParameterfv = glConvolutionParameterfv;
		funPtr->glConvolutionParameteri = glConvolutionParameteri;
		funPtr->glConvolutionParameteriv = glConvolutionParameteriv;
		funPtr->glCopyConvolutionFilter1D = glCopyConvolutionFilter1D;
		funPtr->glCopyConvolutionFilter2D = glCopyConvolutionFilter2D;
		funPtr->glGetConvolutionFilter = glGetConvolutionFilter;
		funPtr->glGetConvolutionParameterfv = glGetConvolutionParameterfv;
		funPtr->glGetConvolutionParameteriv = glGetConvolutionParameteriv;
		funPtr->glGetSeparableFilter = glGetSeparableFilter;
		funPtr->glSeparableFilter2D = glSeparableFilter2D;
		funPtr->glGetHistogram = glGetHistogram;
		funPtr->glGetHistogramParameterfv = glGetHistogramParameterfv;
		funPtr->glGetHistogramParameteriv = glGetHistogramParameteriv;
		funPtr->glGetMinmax = glGetMinmax;
		funPtr->glGetMinmaxParameterfv = glGetMinmaxParameterfv;
		funPtr->glGetMinmaxParameteriv = glGetMinmaxParameteriv;
		funPtr->glHistogram = glHistogram;
		funPtr->glMinmax = glMinmax;
		funPtr->glResetHistogram = glResetHistogram;
		funPtr->glResetMinmax = glResetMinmax;
		funPtr->glTexImage3D = glTexImage3D;
		funPtr->glTexSubImage3D = glTexSubImage3D;
		funPtr->glCopyTexSubImage3D = glCopyTexSubImage3D;
		funPtr->glActiveTexture = glActiveTexture;
		funPtr->glClientActiveTexture = glClientActiveTexture;
		funPtr->glMultiTexCoord1d = glMultiTexCoord1d;
		funPtr->glMultiTexCoord1dv = glMultiTexCoord1dv;
		funPtr->glMultiTexCoord1f = glMultiTexCoord1f;
		funPtr->glMultiTexCoord1fv = glMultiTexCoord1fv;
		funPtr->glMultiTexCoord1i = glMultiTexCoord1i;
		funPtr->glMultiTexCoord1iv = glMultiTexCoord1iv;
		funPtr->glMultiTexCoord1s = glMultiTexCoord1s;
		funPtr->glMultiTexCoord1sv = glMultiTexCoord1sv;
		funPtr->glMultiTexCoord2d = glMultiTexCoord2d;
		funPtr->glMultiTexCoord2dv = glMultiTexCoord2dv;
		funPtr->glMultiTexCoord2f = glMultiTexCoord2f;
		funPtr->glMultiTexCoord2fv = glMultiTexCoord2fv;
		funPtr->glMultiTexCoord2i = glMultiTexCoord2i;
		funPtr->glMultiTexCoord2iv = glMultiTexCoord2iv;
		funPtr->glMultiTexCoord2s = glMultiTexCoord2s;
		funPtr->glMultiTexCoord2sv = glMultiTexCoord2sv;
		funPtr->glMultiTexCoord3d = glMultiTexCoord3d;
		funPtr->glMultiTexCoord3dv = glMultiTexCoord3dv;
		funPtr->glMultiTexCoord3f = glMultiTexCoord3f;
		funPtr->glMultiTexCoord3fv = glMultiTexCoord3fv;
		funPtr->glMultiTexCoord3i = glMultiTexCoord3i;
		funPtr->glMultiTexCoord3iv = glMultiTexCoord3iv;
		funPtr->glMultiTexCoord3s = glMultiTexCoord3s;
		funPtr->glMultiTexCoord3sv = glMultiTexCoord3sv;
		funPtr->glMultiTexCoord4d = glMultiTexCoord4d;
		funPtr->glMultiTexCoord4dv = glMultiTexCoord4dv;
		funPtr->glMultiTexCoord4f = glMultiTexCoord4f;
		funPtr->glMultiTexCoord4fv = glMultiTexCoord4fv;
		funPtr->glMultiTexCoord4i = glMultiTexCoord4i;
		funPtr->glMultiTexCoord4iv = glMultiTexCoord4iv;
		funPtr->glMultiTexCoord4s = glMultiTexCoord4s;
		funPtr->glMultiTexCoord4sv = glMultiTexCoord4sv;
#endif //GL_VERSION_1_2

#ifdef GL_VERSION_1_3
		funPtr->glCompressedTexImage3D = glCompressedTexImage3D;
		funPtr->glCompressedTexImage2D = glCompressedTexImage2D;
		funPtr->glCompressedTexImage1D = glCompressedTexImage1D;
		funPtr->glCompressedTexSubImage3D = glCompressedTexSubImage3D;
		funPtr->glCompressedTexSubImage2D = glCompressedTexSubImage2D;
		funPtr->glCompressedTexSubImage1D = glCompressedTexSubImage1D;
		funPtr->glGetCompressedTexImage = glGetCompressedTexImage;
		funPtr->glSampleCoverage = glSampleCoverage;
		funPtr->glLoadTransposeMatrixf = glLoadTransposeMatrixf;
		funPtr->glLoadTransposeMatrixd = glLoadTransposeMatrixd;
		funPtr->glMultTransposeMatrixf = glMultTransposeMatrixf;
		funPtr->glMultTransposeMatrixd = glMultTransposeMatrixd;
#endif //GL_VERSION_1_3

#ifdef GL_VERSION_1_4
		funPtr->glMultiDrawArrays = glMultiDrawArrays;
		funPtr->glMultiDrawElements = glMultiDrawElements;
		funPtr->glPointParameterf = glPointParameterf;
		funPtr->glPointParameterfv = glPointParameterfv;
		funPtr->glSecondaryColor3b = glSecondaryColor3b;
		funPtr->glSecondaryColor3bv = glSecondaryColor3bv;
		funPtr->glSecondaryColor3d = glSecondaryColor3d;
		funPtr->glSecondaryColor3dv = glSecondaryColor3dv;
		funPtr->glSecondaryColor3f = glSecondaryColor3f;
		funPtr->glSecondaryColor3fv = glSecondaryColor3fv;
		funPtr->glSecondaryColor3i = glSecondaryColor3i;
		funPtr->glSecondaryColor3iv = glSecondaryColor3iv;
		funPtr->glSecondaryColor3s = glSecondaryColor3s;
		funPtr->glSecondaryColor3sv = glSecondaryColor3sv;
		funPtr->glSecondaryColor3ub = glSecondaryColor3ub;
		funPtr->glSecondaryColor3ubv = glSecondaryColor3ubv;
		funPtr->glSecondaryColor3ui = glSecondaryColor3ui;
		funPtr->glSecondaryColor3uiv = glSecondaryColor3uiv;
		funPtr->glSecondaryColor3us = glSecondaryColor3us;
		funPtr->glSecondaryColor3usv = glSecondaryColor3usv;
		funPtr->glSecondaryColorPointer = glSecondaryColorPointer;
		funPtr->glBlendFuncSeparate = glBlendFuncSeparate;
		funPtr->glWindowPos2d = glWindowPos2d;
		funPtr->glWindowPos2f = glWindowPos2f;
		funPtr->glWindowPos2i = glWindowPos2i;
		funPtr->glWindowPos2s = glWindowPos2s;
		funPtr->glWindowPos2dv = glWindowPos2dv;
		funPtr->glWindowPos2fv = glWindowPos2fv;
		funPtr->glWindowPos2iv = glWindowPos2iv;
		funPtr->glWindowPos2sv = glWindowPos2sv;
		funPtr->glWindowPos3d = glWindowPos3d;
		funPtr->glWindowPos3f = glWindowPos3f;
		funPtr->glWindowPos3i = glWindowPos3i;
		funPtr->glWindowPos3s = glWindowPos3s;
		funPtr->glWindowPos3dv = glWindowPos3dv;
		funPtr->glWindowPos3fv = glWindowPos3fv;
		funPtr->glWindowPos3iv = glWindowPos3iv;
		funPtr->glWindowPos3sv = glWindowPos3sv;
#endif //GL_VERSION_1_4

#if defined(_WIN32)
#endif //_WIN32

	}
}

